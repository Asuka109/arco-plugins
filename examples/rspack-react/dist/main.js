(function() {
var __webpack_modules__ = {
"../../node_modules/@arco-design/web-react/es/Avatar/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Breadcrumb/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Button/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/DatePicker/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Empty/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Input/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/InputNumber/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Link/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Menu/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Popover/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Rate/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Skeleton/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Slider/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Space/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Statistic/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Switch/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Tag/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/TimePicker/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Tooltip/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/Trigger/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/_class/picker/style/index.less": function (module, exports, __webpack_require__) {
},
"../../node_modules/@arco-design/web-react/es/style/index.less": function (module, exports, __webpack_require__) {
},
"../component-a/lib/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ComponentA", {
    enumerable: true,
    get: function() {
        return ComponentA;
    }
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/Statistic/style/index.js");
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Statistic/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
function ComponentA() {
    return _index1.default.createElement("div", {
        style: {
            padding: 20
        }
    }, _index1.default.createElement("p", null, "I am ComponentA"), _index1.default.createElement(_index.default, {
        title: "Downloads",
        value: 125670,
        groupSeparator: true,
        style: {
            marginLeft: 60
        }
    }));
}
},
"../../node_modules/@arco-design/web-react/es/Avatar/avatar.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/context.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultProps = {
    shape: 'circle',
    autoFixFontSize: true,
    triggerType: 'button'
};
var Avatar = (0, _index.forwardRef)(function(props, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var prefixCls = getPrefixCls('avatar');
    var contextProps = (0, _index.useContext)(_context.default);
    var mergedProps = __assign(__assign(__assign(__assign({}, defaultProps), componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Avatar), contextProps), props);
    var className = mergedProps.className, shape = mergedProps.shape, size = mergedProps.size, children = mergedProps.children, autoFixFontSize = mergedProps.autoFixFontSize, triggerIcon = mergedProps.triggerIcon, triggerIconStyle = mergedProps.triggerIconStyle, triggerType = mergedProps.triggerType, onClick = mergedProps.onClick, rest = __rest(mergedProps, [
        "className",
        "shape",
        "size",
        "children",
        "autoFixFontSize",
        "triggerIcon",
        "triggerIconStyle",
        "triggerType",
        "onClick"
    ]);
    var style = __assign(__assign({}, contextProps.style), props.style);
    var textRef = (0, _index.useRef)(null);
    var avatarRef = (0, _index.useRef)(null);
    (0, _index.useEffect)(function() {
        if (autoFixFontSize) autoFixFontSizeHandler();
    }, [
        size,
        children
    ]);
    (0, _index.useImperativeHandle)(ref, function() {
        return avatarRef.current;
    });
    function autoFixFontSizeHandler() {
        if (textRef.current) {
            var textWidth = textRef.current.clientWidth;
            var size_1 = props.size || avatarRef.current.offsetWidth;
            var scale = size_1 / (textWidth + 8);
            if (size_1 && scale < 1) textRef.current.style.transform = "scale(" + scale + ") translateX(-50%)";
        }
    }
    var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-" + shape, (_a = {}, _a[prefixCls + "-with-trigger-icon"] = triggerIcon, _a), className);
    var isImage = children && _index.default.isValidElement(children) && (children.type === 'img' || children.type === 'picture');
    var _triggerIconStyle = triggerIconStyle || {};
    if (triggerType === 'button' && (!triggerIconStyle || triggerIconStyle && !triggerIconStyle.color) && style && style.backgroundColor) _triggerIconStyle.color = style.backgroundColor;
    return _index.default.createElement("div", __assign({
        ref: avatarRef,
        onClick: onClick
    }, rest, {
        style: __assign({
            width: size,
            height: size,
            fontSize: (0, _is.isNumber)(size) ? size / 2 : ''
        }, style),
        className: classNames
    }), isImage ? _index.default.createElement("span", {
        className: prefixCls + "-image"
    }, children) : null, !isImage && _index.default.createElement("span", {
        ref: textRef,
        className: prefixCls + "-text"
    }, children), triggerIcon && _index.default.createElement("div", {
        className: prefixCls + "-trigger-icon-" + triggerType,
        style: _triggerIconStyle
    }, triggerIcon));
});
Avatar.displayName = 'Avatar';
var _default = Avatar;
},
"../../node_modules/@arco-design/web-react/es/Avatar/context.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _default = (0, _index.createContext)({});
},
"../../node_modules/@arco-design/web-react/es/Avatar/group.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _avatar = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/avatar.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Popover/index.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/context.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultProps = {
    shape: 'circle',
    autoFixFontSize: true
};
function Group(baseProps, ref) {
    var _a = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _a.getPrefixCls, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig['Avatar.Group']);
    var className = props.className, style = props.style, children = props.children, size = props.size, shape = props.shape, autoFixFontSize = props.autoFixFontSize, zIndexAscend = props.zIndexAscend, maxCount = props.maxCount, maxStyle = props.maxStyle, maxPopoverTriggerProps = props.maxPopoverTriggerProps, rest = __rest(props, [
        "className",
        "style",
        "children",
        "size",
        "shape",
        "autoFixFontSize",
        "zIndexAscend",
        "maxCount",
        "maxStyle",
        "maxPopoverTriggerProps"
    ]);
    var prefixCls = getPrefixCls('avatar-group');
    var classNames = (0, _classNames.default)(prefixCls, className);
    var childrenArr = _index.default.Children.toArray(children);
    var avatarCount = childrenArr.length;
    var avatarsToRender = childrenArr;
    if ((0, _is.isNumber)(maxCount) && maxCount >= 0 && avatarCount > maxCount) {
        var avatarsInPopover = childrenArr.slice(maxCount);
        avatarsToRender = childrenArr.slice(0, maxCount);
        avatarsToRender.push(_index.default.createElement(_avatar.default, {
            key: "_arco_avatar_group_popup",
            style: maxStyle,
            className: prefixCls + "-max-count-avatar"
        }, _index.default.createElement(_index2.default, {
            triggerProps: maxPopoverTriggerProps,
            content: _index.default.createElement(_context.default.Provider, {
                value: {
                    size: size,
                    shape: shape,
                    autoFixFontSize: autoFixFontSize
                }
            }, _index.default.createElement("div", {
                className: prefixCls + "-popover"
            }, avatarsInPopover))
        }, "+", avatarsInPopover.length)));
    }
    return _index.default.createElement("div", __assign({
        ref: ref,
        style: style,
        className: classNames
    }, rest), avatarsToRender.map(function(item, index) {
        var stackedStyle = {
            zIndex: zIndexAscend ? index + 1 : avatarCount - index,
            marginLeft: size ? index !== 0 ? -size / 4 : 0 : ''
        };
        return _index.default.createElement(_context.default.Provider, {
            key: index,
            value: {
                size: size,
                shape: shape,
                autoFixFontSize: autoFixFontSize,
                style: stackedStyle
            }
        }, item);
    }));
}
var AvatarGroupComponent = (0, _index.forwardRef)(Group);
AvatarGroupComponent.displayName = 'AvatarGroup';
var _default = AvatarGroupComponent;
},
"../../node_modules/@arco-design/web-react/es/Avatar/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _avatar = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/avatar.js"));
var _group = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/group.js"));
__webpack_require__.es(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/interface.js"), exports);
var AvatarComponent = _avatar.default;
AvatarComponent.Group = _group.default;
var _default = AvatarComponent;
},
"../../node_modules/@arco-design/web-react/es/Avatar/interface.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
},
"../../node_modules/@arco-design/web-react/es/Avatar/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Popover/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Breadcrumb/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _item = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Breadcrumb/item.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconObliqueLine/index.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultItemRender = function(route, routes, paths) {
    if (routes.indexOf(route) === routes.length - 1) return _index.default.createElement("span", null, route.breadcrumbName);
    return _index.default.createElement("a", {
        href: "#/" + paths.join('/').replace(/^\//, '')
    }, route.breadcrumbName);
};
var defaultProps = {
    separator: _index.default.createElement(_index3.default, null)
};
function Breadcrumb(baseProps, ref) {
    var _a = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _a.getPrefixCls, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Breadcrumb);
    var className = props.className, children = props.children, style = props.style, routes = props.routes, maxCount = props.maxCount, separator = props.separator, rest = __rest(props, [
        "className",
        "children",
        "style",
        "routes",
        "maxCount",
        "separator"
    ]);
    var prefixCls = getPrefixCls('breadcrumb');
    var itemRender = 'itemRender' in props ? props.itemRender : defaultItemRender;
    var Ellipses = _index.default.createElement("span", {
        "aria-label": "ellipses of breadcrumb items",
        className: prefixCls + "-item-ellipses"
    }, "...");
    var Separator = _index.default.createElement("span", {
        "aria-hidden": true,
        className: prefixCls + "-item-separator"
    }, separator);
    var getValidChild = function(itemToRender, delta, index) {
        var SeparatorWithKey = _index.default.cloneElement(Separator, {
            key: index + "_separator"
        });
        if (delta > 0) {
            if (index === 0) return [
                itemToRender,
                SeparatorWithKey,
                Ellipses
            ];
            if (index > delta) return [
                SeparatorWithKey,
                itemToRender
            ];
            return null;
        }
        return index === 0 ? [
            itemToRender
        ] : [
            SeparatorWithKey,
            itemToRender
        ];
    };
    var getItemsByRoute = function() {
        var paths = [];
        var delta = routes.length - maxCount;
        return routes.map(function(route, index) {
            paths.push((route.path || '').replace(/^\//, ''));
            var droplist = route.children ? _index.default.createElement(_index2.default, null, route.children.map(function(item) {
                return _index.default.createElement(_index2.default.Item, {
                    key: item.path || item.breadcrumbName
                }, itemRender(item, routes, paths));
            })) : null;
            return getValidChild(_index.default.createElement(_item.default, {
                prefixCls: prefixCls,
                key: route.path || route.breadcrumbName,
                droplist: droplist
            }, itemRender(route, routes, paths)), delta, index);
        });
    };
    var getItemsByChildren = function() {
        var delta = _index.default.Children.toArray(children).length - maxCount;
        return _index.default.Children.map(children, function(child, index) {
            return child && getValidChild(_index.default.cloneElement(child, {
                prefixCls: prefixCls
            }), delta, index);
        });
    };
    return _index.default.createElement("div", __assign({
        role: "list",
        ref: ref,
        style: style,
        className: (0, _classNames.default)(prefixCls, className)
    }, (0, _omit.default)(rest, [
        'itemRender'
    ])), routes && routes.length ? getItemsByRoute() : getItemsByChildren());
}
var ForwardRefBreadcrumb = (0, _index.forwardRef)(Breadcrumb);
var BreadcrumbComponent = ForwardRefBreadcrumb;
BreadcrumbComponent.displayName = 'Breadcrumb';
BreadcrumbComponent.Item = _item.default;
var _default = BreadcrumbComponent;
},
"../../node_modules/@arco-design/web-react/es/Breadcrumb/item.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Dropdown/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDown/index.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function Item(props) {
    var _a, _b;
    var children = props.children, style = props.style, className = props.className, prefixCls = props.prefixCls, droplist = props.droplist, dropdownProps = props.dropdownProps;
    var _c = __read((0, _index.useState)(false), 2), dropdownVisible = _c[0], setDropdownVisible = _c[1];
    var dom = _index.default.createElement("div", {
        role: "listitem",
        style: style,
        className: (0, _classNames.default)(prefixCls + "-item", (_a = {}, _a[prefixCls + "-item-with-dropdown"] = droplist, _a), className)
    }, children, droplist && _index.default.createElement("span", {
        "aria-hidden": true,
        className: (0, _classNames.default)(prefixCls + "-item-dropdown-icon", (_b = {}, _b[prefixCls + "-item-dropdown-icon-active"] = dropdownVisible, _b))
    }, _index.default.createElement(_index2.default, null)));
    return droplist ? _index.default.createElement(_index1.default, __assign({
        droplist: droplist,
        onVisibleChange: function(visible) {
            setDropdownVisible(visible);
            dropdownProps && dropdownProps.onVisibleChange && dropdownProps.onVisibleChange(visible);
        }
    }, (0, _omit.default)(dropdownProps, [
        'onVisibleChange'
    ])), dom) : dom;
}
Item.displayName = 'BreadcrumbItem';
var _default = Item;
},
"../../node_modules/@arco-design/web-react/es/Breadcrumb/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Breadcrumb/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Button/group.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
function Group(props, ref) {
    var className = props.className, style = props.style, children = props.children;
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('btn-group');
    var classNames = (0, _classNames.default)(prefixCls, className);
    return _index.default.createElement("div", {
        ref: ref,
        className: classNames,
        style: style
    }, children);
}
var GroupComponent = _index.default.forwardRef(Group);
GroupComponent.displayName = 'ButtonGroup';
var _default = GroupComponent;
},
"../../node_modules/@arco-design/web-react/es/Button/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLoading/index.js"));
var _group = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/group.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var regexTwoCNChar = /^[\u4e00-\u9fa5]{2}$/;
function processChildren(children) {
    var childrenList = [];
    var isPrevChildPure = false;
    _index.default.Children.forEach(children, function(child) {
        var isCurrentChildPure = typeof child === 'string' || typeof child === 'number';
        if (isCurrentChildPure && isPrevChildPure) {
            var lastIndex = childrenList.length - 1;
            var lastChild = childrenList[lastIndex];
            childrenList[lastIndex] = "" + lastChild + child;
        } else childrenList.push(child);
        isPrevChildPure = isCurrentChildPure;
    });
    return _index.default.Children.map(childrenList, function(child) {
        return typeof child === 'string' ? _index.default.createElement("span", null, child) : child;
    });
}
var defaultProps = {
    htmlType: 'button',
    type: 'default',
    shape: 'square'
};
function Button(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _b.getPrefixCls, ctxSize = _b.size, autoInsertSpaceInButton = _b.autoInsertSpaceInButton, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Button);
    var style = props.style, className = props.className, children = props.children, htmlType = props.htmlType, type = props.type, status = props.status, size = props.size, shape = props.shape, href = props.href, anchorProps = props.anchorProps, disabled = props.disabled, loading = props.loading, loadingFixedWidth = props.loadingFixedWidth, icon = props.icon, iconOnly = props.iconOnly, onClick = props.onClick, long = props.long, rest = __rest(props, [
        "style",
        "className",
        "children",
        "htmlType",
        "type",
        "status",
        "size",
        "shape",
        "href",
        "anchorProps",
        "disabled",
        "loading",
        "loadingFixedWidth",
        "icon",
        "iconOnly",
        "onClick",
        "long"
    ]);
    var iconNode = loading ? _index.default.createElement(_index1.default, null) : icon;
    var _c = __read((0, _index.useState)(false), 2), isTwoCNChar = _c[0], setIsTwoCNChar = _c[1];
    var innerButtonRef = (0, _index.useRef)();
    var buttonRef = ref || innerButtonRef;
    (0, _index.useEffect)(function() {
        if (autoInsertSpaceInButton && buttonRef && buttonRef.current) {
            var textContent = buttonRef.current.textContent;
            if (regexTwoCNChar.test(textContent)) {
                if (!isTwoCNChar) setIsTwoCNChar(true);
            } else if (isTwoCNChar) setIsTwoCNChar(false);
        }
    }, [
        buttonRef.current,
        autoInsertSpaceInButton
    ]);
    var prefixCls = getPrefixCls('btn');
    var _type = type === 'default' ? 'secondary' : type;
    var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-" + _type, prefixCls + "-size-" + (size || ctxSize), prefixCls + "-shape-" + shape, (_a = {}, _a[prefixCls + "-long"] = long, _a[prefixCls + "-status-" + status] = status, _a[prefixCls + "-loading-fixed-width"] = loadingFixedWidth, _a[prefixCls + "-loading"] = loading, _a[prefixCls + "-link"] = href, _a[prefixCls + "-icon-only"] = iconOnly || !children && children !== 0 && iconNode, _a[prefixCls + "-disabled"] = disabled, _a[prefixCls + "-two-chinese-chars"] = isTwoCNChar, _a), className);
    var handleClick = function(event) {
        if (loading) {
            typeof (event === null || event === void 0 ? void 0 : event.preventDefault) === 'function' && event.preventDefault();
            return;
        }
        onClick && onClick(event);
    };
    var InnerContent = _index.default.createElement(_index.default.Fragment, null, iconNode, processChildren(children));
    if (href) {
        var _anchorProps = __assign({}, anchorProps);
        if (disabled) delete _anchorProps.href;
        else _anchorProps.href = href;
        return _index.default.createElement("a", __assign({
            ref: buttonRef
        }, rest, _anchorProps, {
            style: style,
            className: classNames,
            onClick: handleClick
        }), InnerContent);
    }
    return _index.default.createElement("button", __assign({
        ref: buttonRef
    }, rest, {
        style: style,
        className: classNames,
        type: htmlType,
        disabled: disabled,
        onClick: handleClick
    }), InnerContent);
}
var ForwardRefButton = (0, _index.forwardRef)(Button);
var ButtonComponent = ForwardRefButton;
ButtonComponent.__BYTE_BUTTON = true;
ButtonComponent.Group = _group.default;
ButtonComponent.displayName = 'Button';
var _default = ButtonComponent;
},
"../../node_modules/@arco-design/web-react/es/Button/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    ConfigContext: function() {
        return ConfigContext;
    },
    default: function() {
        return _default1;
    },
    ConfigConsumer: function() {
        return ConfigConsumer;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _default = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/locale/default.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/util.js");
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Message/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Notification/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Empty/index.js"));
var _config = __webpack_require__("../../node_modules/@arco-design/web-react/es/Modal/config.js");
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var colorList = {
    primaryColor: {
        default: '--arcoblue-6',
        hover: '--arcoblue-5',
        active: '--arcoblue-7'
    },
    successColor: {
        default: '--green-6',
        hover: '--green-5',
        active: '--green-7'
    },
    infoColor: {
        default: '--arcoblue-6',
        hover: '--arcoblue-5',
        active: '--arcoblue-7'
    },
    warningColor: {
        default: '--orangered-6',
        hover: '--orangered-5',
        active: '--orangered-7'
    },
    dangerColor: {
        default: '--red-6',
        hover: '--red-5',
        active: '--red-7'
    }
};
function setTheme(theme) {
    if (theme && (0, _is.isObject)(theme)) {
        var root_1 = document.body;
        Object.keys(colorList).forEach(function(color) {
            if (theme[color]) {
                root_1.style.setProperty(colorList[color].default, (0, _util.lighten)(theme[color], 0));
                if (!theme[color + "Hover"]) root_1.style.setProperty(colorList[color].hover, (0, _util.lighten)(theme[color], 10));
                if (!theme[color + "Active"]) root_1.style.setProperty(colorList[color].active, (0, _util.lighten)(theme[color], -10));
            }
        });
    }
}
function renderEmpty(componentName) {
    componentName;
    return _index.default.createElement(_index3.default, null);
}
var defaultProps = {
    locale: _default.default,
    prefixCls: 'arco',
    getPopupContainer: function() {
        return document.body;
    },
    size: 'default',
    renderEmpty: renderEmpty,
    focusLock: {
        modal: {
            autoFocus: true
        },
        drawer: {
            autoFocus: true
        }
    }
};
var componentConfig = {};
var ConfigContext = (0, _index.createContext)(__assign({
    getPrefixCls: function(componentName, customPrefix) {
        return (customPrefix || 'arco') + "-" + componentName;
    }
}, defaultProps));
function ConfigProvider(baseProps) {
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig);
    var theme = props.theme, prefixCls = props.prefixCls, children = props.children, locale = props.locale;
    (0, _index.useEffect)(function() {
        setTheme(theme);
    }, [
        theme
    ]);
    (0, _index.useEffect)(function() {
        _index1.default.config({
            prefixCls: prefixCls
        });
        _index2.default.config({
            prefixCls: prefixCls
        });
    }, [
        prefixCls
    ]);
    function getPrefixCls(componentName, customPrefix) {
        return (customPrefix || prefixCls) + "-" + componentName;
    }
    var config = __assign(__assign({}, (0, _omit.default)(props, [
        'children'
    ])), {
        getPrefixCls: getPrefixCls
    });
    (0, _index.useEffect)(function() {
        (0, _config.setConfigProviderProps)({
            locale: locale,
            prefixCls: prefixCls
        });
    }, [
        locale,
        prefixCls
    ]);
    var child = children;
    if (prefixCls && prefixCls !== 'arco') child = _index.default.createElement(_context.IconContext.Provider, {
        value: {
            prefixCls: prefixCls
        }
    }, children);
    return _index.default.createElement(ConfigContext.Provider, {
        value: config
    }, child);
}
ConfigProvider.ConfigContext = ConfigContext;
ConfigProvider.displayName = 'ConfigProvider';
var _default1 = ConfigProvider;
var ConfigConsumer = ConfigContext.Consumer;
},
"../../node_modules/@arco-design/web-react/es/ConfigProvider/util.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    lighten: function() {
        return lighten;
    },
    hsltorgb: function() {
        return hsltorgb;
    }
});
function hexToRgb(hex) {
    var rgb = [];
    var _hex = hex.substr(1);
    if (hex.length === 3) _hex = hex.replace(/(.)/g, '$1$1');
    _hex.replace(/../g, function(color) {
        rgb.push(parseInt(color, 0x10));
    });
    return {
        r: rgb[0],
        g: rgb[1],
        b: rgb[2],
        rgb: "rgb(" + rgb.join(',') + ")"
    };
}
function getRgb(color) {
    var rgb = hexToRgb(color);
    return {
        r: rgb.r,
        g: rgb.g,
        b: rgb.b
    };
}
function getHsl(color) {
    var rgb = getRgb(color);
    var hsl = rgbToHsl(rgb.r, rgb.g, rgb.b);
    return {
        h: hsl.h,
        s: hsl.s,
        l: hsl.l
    };
}
function rgbToHsl(r, g, b) {
    var _r = r / 255;
    var _g = g / 255;
    var _b = b / 255;
    var max = Math.max(_r, _g, _b);
    var min = Math.min(_r, _g, _b);
    var l = (max + min) / 2;
    var h;
    var s;
    if (max === min) {
        h = 0;
        s = 0;
    } else {
        var d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch(max){
            case _r:
                h = (_g - _b) / d + (_g < _b ? 6 : 0);
                break;
            case _g:
                h = (_b - _r) / d + 2;
                break;
            case _b:
                h = (_r - _g) / d + 4;
                break;
            default:
                break;
        }
        h /= 6;
    }
    return {
        h: h,
        s: s,
        l: l,
        hsl: "hsl(" + h * 360 + ", " + s * 100 + "%, " + l * 100 + "%)"
    };
}
function lighten(color, percent) {
    var hsl = getHsl(color);
    var h = +hsl.h;
    var s = +hsl.s;
    var l = +hsl.l * 100 + +percent;
    var res = hsltorgb([
        h * 360,
        s * 100,
        l
    ]);
    return res.join(',');
}
function hsltorgb(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t2;
    var t3;
    var val;
    if (s === 0) {
        val = l * 255;
        return [
            val,
            val,
            val
        ];
    }
    if (l < 0.5) t2 = l * (1 + s);
    else t2 = l + s - l * s;
    var t1 = 2 * l - t2;
    var rgb = [
        0,
        0,
        0
    ];
    for(var i = 0; i < 3; i++){
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) t3++;
        if (t3 > 1) t3--;
        if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
        else if (2 * t3 < 1) val = t2;
        else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        else val = t1;
        rgb[i] = val * 255;
    }
    return rgb;
}
},
"../../node_modules/@arco-design/web-react/es/DatePicker/context.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _default = (0, _index.createContext)({});
},
"../../node_modules/@arco-design/web-react/es/DatePicker/hooks/useCellClassName.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useClassName;
    }
});
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/util.js");
function getDateValue(date, index) {
    if (!date) return undefined;
    if ((0, _is.isArray)(date)) return date[index];
}
function useClassName(props) {
    var prefixCls = props.prefixCls, value = props.value, rangeValues = props.rangeValues, valueShowHover = props.valueShowHover, isSameTime = props.isSameTime, mode = props.mode, hideNotInViewDates = props.hideNotInViewDates;
    var selectedLength = (0, _util.getAvailableDayjsLength)(rangeValues);
    var hoverLength = (0, _util.getAvailableDayjsLength)(valueShowHover);
    var sortedRangeValues = selectedLength !== 2 && hoverLength === 2 ? (0, _dayjs.getSortedDayjsArray)(valueShowHover) : rangeValues;
    var sortedHoverRangeValues = selectedLength === 2 ? (0, _dayjs.getSortedDayjsArray)(valueShowHover) : [];
    function isInRange(current, startDate, endDate) {
        if (startDate && endDate) return isSameTime(current, startDate) || isSameTime(current, endDate) || current.isBetween(startDate, endDate, null);
    }
    return function getCellClassName(cellDateObj, disabled, utcOffset, timezone) {
        var _a;
        var rangeStart = getDateValue(sortedRangeValues, 0);
        var rangeEnd = getDateValue(sortedRangeValues, 1);
        var hoverRangeStart = getDateValue(sortedHoverRangeValues, 0);
        var hoverRangeEnd = getDateValue(sortedHoverRangeValues, 1);
        var isInView = !cellDateObj.isPrev && !cellDateObj.isNext;
        var selected = value && isSameTime(cellDateObj.time, value);
        var isToday = isSameTime(cellDateObj.time, (0, _dayjs.getNow)(utcOffset, timezone));
        var checkIsInView = mode !== 'week' ? isInView : true;
        if (mode === 'week') isToday = (0, _dayjs.getNow)(utcOffset, timezone).isSame(cellDateObj.time, 'date');
        if (mode === 'quarter') isToday = (0, _dayjs.getNow)(utcOffset, timezone).isSame(cellDateObj.time, 'quarter');
        function getIsRangeStartOrEnd(v) {
            return checkIsInView && !disabled && v && isSameTime(cellDateObj.time, v);
        }
        var isRangeStart = getIsRangeStartOrEnd(rangeStart);
        var isRangeEnd = getIsRangeStartOrEnd(rangeEnd);
        var isRangeStartSelected = getIsRangeStartOrEnd(getDateValue(rangeValues, 0));
        var isRangeEndSelected = getIsRangeStartOrEnd(getDateValue(rangeValues, 1));
        var isHoverRangeStart = getIsRangeStartOrEnd(hoverRangeStart);
        var isHoverRangeEnd = getIsRangeStartOrEnd(hoverRangeEnd);
        var isRangeEdgeInHoverRange = false;
        if (isRangeStart) isRangeEdgeInHoverRange = hoverRangeStart && rangeStart && hoverRangeStart.isBefore(rangeStart) && isInRange(rangeStart, hoverRangeStart, hoverRangeEnd);
        else if (isRangeEnd) isRangeEdgeInHoverRange = hoverRangeEnd && rangeEnd && hoverRangeEnd.isAfter(rangeEnd) && isInRange(rangeEnd, hoverRangeStart, hoverRangeEnd);
        var isHoverRangeEdgeInRange = false;
        if (isHoverRangeStart) isHoverRangeEdgeInRange = hoverRangeStart && rangeStart && rangeStart.isBefore(hoverRangeStart) && isInRange(hoverRangeStart, rangeStart, rangeEnd);
        else if (isHoverRangeEnd) isHoverRangeEdgeInRange = hoverRangeEnd && rangeEnd && rangeEnd.isAfter(hoverRangeEnd) && isInRange(hoverRangeEnd, rangeStart, rangeEnd);
        return (0, _classNames.default)(prefixCls + "-cell", (_a = {}, _a[prefixCls + "-cell-disabled"] = disabled, _a[prefixCls + "-cell-hidden"] = hideNotInViewDates && !isInView, _a[prefixCls + "-cell-in-view"] = isInView, _a[prefixCls + "-cell-today"] = isToday && isInView, _a[prefixCls + "-cell-selected"] = selected || isRangeStartSelected || isRangeEndSelected, _a[prefixCls + "-cell-range-start"] = isRangeStart, _a[prefixCls + "-cell-range-end"] = isRangeEnd, _a[prefixCls + "-cell-in-range"] = checkIsInView && !disabled && isInRange(cellDateObj.time, rangeStart, rangeEnd), _a[prefixCls + "-cell-hover-range-start"] = isHoverRangeStart, _a[prefixCls + "-cell-hover-range-end"] = isHoverRangeEnd, _a[prefixCls + "-cell-hover-in-range"] = checkIsInView && !disabled && isInRange(cellDateObj.time, hoverRangeStart, hoverRangeEnd), _a[prefixCls + "-cell-range-edge-in-hover-range"] = isRangeEdgeInHoverRange, _a[prefixCls + "-cell-hover-range-edge-in-range"] = isHoverRangeEdgeInRange, _a));
    };
}
},
"../../node_modules/@arco-design/web-react/es/DatePicker/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _picker = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/picker.js"));
var _pickerrange = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/picker-range.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/date/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/month/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/year/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/week/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/quarter/index.js"));
__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/polyfill/object-assign.js");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function wrapper(picker, displayName) {
    var _a;
    return _a = function(_super) {
        __extends(PickerWrapper, _super);
        function PickerWrapper() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PickerWrapper.prototype.render = function() {
            return _index.default.createElement(_picker.default, __assign({}, this.props, {
                picker: picker
            }));
        };
        return PickerWrapper;
    }(_index.default.Component), _a.displayName = displayName, _a;
}
var DatePicker = wrapper(_index.default.createElement(_index1.default, null), 'DatePicker');
var MonthPicker = wrapper(_index.default.createElement(_index2.default, null), 'MonthPicker');
var YearPicker = wrapper(_index.default.createElement(_index3.default, null), 'YearPicker');
var WeekPicker = wrapper(_index.default.createElement(_index4.default, null), 'WeekPicker');
var QuarterPicker = wrapper(_index.default.createElement(_index5.default, null), 'QuarterPicker');
var RangePicker = _pickerrange.default;
Object.assign(DatePicker, {
    MonthPicker: MonthPicker,
    YearPicker: YearPicker,
    WeekPicker: WeekPicker,
    QuarterPicker: QuarterPicker,
    RangePicker: RangePicker
});
var _default = DatePicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/body.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _weeklist = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/week-list.js"));
var _useCellClassName = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/hooks/useCellClassName.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/util.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function Body(props) {
    var prefixCls = props.prefixCls, isWeek = props.isWeek, disabledDate = props.disabledDate, onSelectDate = props.onSelectDate, dateRender = props.dateRender, onMouseEnterCell = props.onMouseEnterCell, onMouseLeaveCell = props.onMouseLeaveCell, CALENDAR_LOCALE = props.CALENDAR_LOCALE, rows = props.rows, showWeekList = props.showWeekList, isSameTime = props.isSameTime, format = props.format, mode = props.mode, originMode = props.originMode;
    var _a = (0, _index.useContext)(_context.default), utcOffset = _a.utcOffset, timezone = _a.timezone, weekStart = _a.weekStart;
    var getCellClassName = (0, _useCellClassName.default)(__assign(__assign({}, props), {
        isSameTime: isSameTime
    }));
    function renderRow(row) {
        return row.map(function(col, index) {
            if (col.time) {
                var disabled_1 = (0, _util.isDisabledDate)(col.time, disabledDate, mode, originMode);
                var onClickHandler = function() {
                    return !disabled_1 && onSelectDate(col.time.format(format), col.time);
                };
                return _index.default.createElement("div", {
                    key: index,
                    className: getCellClassName(col, disabled_1, utcOffset, timezone),
                    onMouseEnter: function() {
                        return onMouseEnterCell && onMouseEnterCell(col.time, disabled_1);
                    },
                    onMouseLeave: function() {
                        return onMouseLeaveCell && onMouseLeaveCell(col.time, disabled_1);
                    },
                    onClick: onClickHandler
                }, dateRender ? _index.default.cloneElement(dateRender(col.time)) : _index.default.createElement("div", {
                    className: prefixCls + "-date"
                }, _index.default.createElement("div", {
                    className: prefixCls + "-date-value"
                }, col.name)));
            }
            if ('weekOfYear' in col) return _index.default.createElement("div", {
                key: index,
                className: (0, _classNames.default)(prefixCls + "-cell", prefixCls + "-cell-week")
            }, _index.default.createElement("div", {
                className: prefixCls + "-date"
            }, _index.default.createElement("div", {
                className: prefixCls + "-date-value"
            }, col.weekOfYear)));
        });
    }
    return _index.default.createElement(_index.default.Fragment, null, showWeekList && _index.default.createElement(_weeklist.default, {
        prefixCls: prefixCls,
        weekStart: weekStart,
        isWeek: isWeek,
        CALENDAR_LOCALE: CALENDAR_LOCALE
    }), _index.default.createElement("div", {
        className: prefixCls + "-body"
    }, rows.map(function(row, index) {
        var _a;
        return _index.default.createElement("div", {
            key: index,
            className: (0, _classNames.default)(prefixCls + "-row", (_a = {}, _a[prefixCls + "-row-week"] = isWeek, _a))
        }, renderRow(row));
    })));
}
var _default = Body;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/date/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _merge = __webpack_require__.ir(__webpack_require__("../../node_modules/lodash/merge.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _timepicker = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/time-picker.js"));
var _header = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/header.js"));
var _body = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/body.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/month/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/year/index.js"));
var _constant = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/constant.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var allDaysInOnePage = 42;
var getReturn = function(time) {
    return {
        year: time.year(),
        month: time.month() + 1,
        day: time.day(),
        name: time.date(),
        time: time
    };
};
var getTimeObj = function(time) {
    return __assign(__assign({}, getReturn(_dayjs.methods.startOf(time, 'month'))), {
        days: time.daysInMonth()
    });
};
function getAllDaysByTime(props, time) {
    var dayStartOfWeek = props.dayStartOfWeek, isWeek = props.isWeek;
    var current = getTimeObj(time);
    var flatRows = (0, _constant.newArray)(allDaysInOnePage).map(function() {
        return {};
    });
    var startIndex = current.day - dayStartOfWeek < 0 ? 7 + (current.day - dayStartOfWeek) : current.day - dayStartOfWeek;
    flatRows[startIndex] = __assign({}, current);
    for(var i = 0; i < startIndex; i++)flatRows[startIndex - i - 1] = __assign(__assign({}, getReturn(_dayjs.methods.subtract(current.time, i + 1, 'day'))), {
        isPrev: true
    });
    for(var i = 0; i < allDaysInOnePage - startIndex - 1; i++)flatRows[startIndex + i + 1] = __assign(__assign({}, getReturn(_dayjs.methods.add(current.time, i + 1, 'day'))), {
        isNext: i >= current.days - 1
    });
    var rows = (0, _constant.newArray)(6).map(function() {
        return [];
    });
    for(var i = 0; i < 6; i++){
        rows[i] = flatRows.slice(i * 7, 7 * (i + 1));
        if (isWeek) {
            var weekTime = rows[i][0].time;
            var weekRows = __spreadArray([], __read(rows[i]), false);
            rows[i].unshift({
                weekRows: weekRows,
                weekOfYear: weekTime.week()
            });
        }
    }
    return rows;
}
function DatePicker(props) {
    var isWeek = props.isWeek, popupVisible = props.popupVisible, format = props.format, pageShowDate = props.pageShowDate, showTime = props.showTime, style = props.style, timepickerProps = props.timepickerProps, onMouseEnterCell = props.onMouseEnterCell, onMouseLeaveCell = props.onMouseLeaveCell, dateRender = props.dateRender, disabledDate = props.disabledDate, disabledTime = props.disabledTime, value = props.value, rangeValues = props.rangeValues, locale = props.locale, isRangePicker = props.isRangePicker, onSelect = props.onSelect, onTimePickerSelect = props.onTimePickerSelect, onPrev = props.onPrev, onNext = props.onNext, onSuperPrev = props.onSuperPrev, onSuperNext = props.onSuperNext, isSameTime = props.isSameTime, index = props.index, getHeaderOperations = props.getHeaderOperations, setPageShowDate = props.setPageShowDate, timeValue = props.timeValue, hideNotInViewDates = props.hideNotInViewDates, icons = props.icons, isTimePanel = props.isTimePanel, panelMode = props.panelMode, setPanelMode = props.setPanelMode, rest = __rest(props, [
        "isWeek",
        "popupVisible",
        "format",
        "pageShowDate",
        "showTime",
        "style",
        "timepickerProps",
        "onMouseEnterCell",
        "onMouseLeaveCell",
        "dateRender",
        "disabledDate",
        "disabledTime",
        "value",
        "rangeValues",
        "locale",
        "isRangePicker",
        "onSelect",
        "onTimePickerSelect",
        "onPrev",
        "onNext",
        "onSuperPrev",
        "onSuperNext",
        "isSameTime",
        "index",
        "getHeaderOperations",
        "setPageShowDate",
        "timeValue",
        "hideNotInViewDates",
        "icons",
        "isTimePanel",
        "panelMode",
        "setPanelMode"
    ]);
    var _a = (0, _index.useContext)(_index1.ConfigContext), globalLocale = _a.locale, getPrefixCls = _a.getPrefixCls;
    var _b = (0, _index.useContext)(_context.default), utcOffset = _b.utcOffset, timezone = _b.timezone, weekStart = _b.weekStart;
    var DATEPICKER_LOCALE = (0, _merge.default)(globalLocale.DatePicker, locale);
    var prefixCls = getPrefixCls(isWeek ? 'panel-week' : 'panel-date');
    var classNames = (0, _classNames.default)(prefixCls);
    var bodyProps = isRangePicker ? {
        rangeValues: rangeValues
    } : {
        value: value
    };
    var timeFormat = (0, _is.isObject)(showTime) && showTime.format || (0, _dayjs.getTimeFormat)(format);
    var rows = (0, _index.useMemo)(function() {
        return getAllDaysByTime(__assign(__assign({}, props), {
            dayStartOfWeek: weekStart
        }), pageShowDate);
    }, [
        pageShowDate.toString(),
        weekStart
    ]);
    var disabledTimeProps;
    if (isRangePicker) disabledTimeProps = typeof disabledTime === 'function' ? disabledTime(rangeValues[index], index === 0 ? 'start' : 'end') : {};
    else disabledTimeProps = typeof disabledTime === 'function' ? disabledTime((0, _dayjs.getDayjsValue)(value, format)) : {};
    function renderCalendar() {
        return _index.default.createElement(_body.default, __assign({}, rest, bodyProps, {
            showWeekList: true,
            isWeek: isWeek,
            prefixCls: getPrefixCls('picker'),
            rows: rows,
            isSameTime: isSameTime || function(current, target) {
                return current.isSame(target, 'day');
            },
            onSelectDate: onSelect,
            onMouseEnterCell: onMouseEnterCell,
            onMouseLeaveCell: onMouseLeaveCell,
            dateRender: dateRender,
            disabledDate: disabledDate,
            CALENDAR_LOCALE: DATEPICKER_LOCALE.Calendar,
            mode: isWeek ? 'week' : 'date',
            format: format,
            hideNotInViewDates: hideNotInViewDates
        }));
    }
    function renderTimePicker() {
        var showTimeProps = (0, _is.isObject)(showTime) ? showTime : {};
        return _index.default.createElement("div", {
            className: prefixCls + "-timepicker"
        }, _index.default.createElement("header", {
            className: prefixCls + "-timepicker-title"
        }, DATEPICKER_LOCALE.selectTime), _index.default.createElement(_timepicker.default, __assign({}, timepickerProps, showTimeProps, disabledTimeProps, {
            hideFooter: true,
            format: timeFormat,
            valueShow: timeValue.format(timeFormat),
            onSelect: onTimePickerSelect,
            popupVisible: popupVisible,
            utcOffset: utcOffset,
            timezone: timezone
        })));
    }
    var headerOperations = {
        onPrev: onPrev,
        onSuperPrev: onSuperPrev,
        onNext: onNext,
        onSuperNext: onSuperNext
    };
    function onChangePanel(mode) {
        setPanelMode(mode);
    }
    if (panelMode === 'year') return _index.default.createElement(_index3.default, __assign({}, getHeaderOperations(panelMode), {
        pageShowDate: pageShowDate,
        onSelect: function(_, date) {
            setPanelMode('month');
            setPageShowDate(date);
        },
        disabledDate: disabledDate,
        originMode: "date"
    }));
    if (panelMode === 'month') return _index.default.createElement(_index2.default, __assign({}, getHeaderOperations(panelMode), {
        setPageShowDate: setPageShowDate,
        pageShowDate: pageShowDate,
        panelMode: panelMode,
        getHeaderOperations: getHeaderOperations,
        onSelect: function(_, date) {
            setPanelMode('date');
            setPageShowDate(date);
        },
        disabledDate: disabledDate,
        originMode: "date"
    }));
    return _index.default.createElement("div", {
        className: classNames,
        style: style
    }, showTime && isTimePanel ? renderTimePicker() : _index.default.createElement("div", {
        className: prefixCls + "-inner"
    }, _index.default.createElement(_header.default, __assign({}, headerOperations, {
        icons: icons,
        prefixCls: getPrefixCls('picker'),
        value: pageShowDate,
        mode: panelMode,
        onChangePanel: onChangePanel
    })), renderCalendar()));
}
DatePicker.defaultProps = {
    pickerType: 'date'
};
var _default = DatePicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/footer.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return Footer;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/index.js"));
var _shortcuts = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/shortcuts.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Link/index.js"));
function Footer(props) {
    var showTime = props.showTime, prefixCls = props.prefixCls, DATEPICKER_LOCALE = props.DATEPICKER_LOCALE, disabled = props.disabled, onClickConfirmBtn = props.onClickConfirmBtn, onClickSelectTimeBtn = props.onClickSelectTimeBtn, isTimePanel = props.isTimePanel, onSelectNow = props.onSelectNow, showNowBtn = props.showNowBtn, shortcuts = props.shortcuts, onMouseEnterShortcut = props.onMouseEnterShortcut, onMouseLeaveShortcut = props.onMouseLeaveShortcut, onSelectShortcut = props.onSelectShortcut, extra = props.extra, mode = props.mode, shortcutsPlacementLeft = props.shortcutsPlacementLeft;
    var hasShortcuts = (0, _is.isArray)(shortcuts) && shortcuts.length > 0;
    var shouldShowNowBtn = showNowBtn && showTime && !hasShortcuts;
    var shouldShouldShortcuts = shouldShowNowBtn || hasShortcuts && !shortcutsPlacementLeft;
    return _index.default.createElement("div", {
        className: prefixCls + "-footer"
    }, extra && _index.default.createElement("div", {
        className: prefixCls + "-footer-extra-wrapper"
    }, extra), !showTime && showNowBtn && mode === 'date' && _index.default.createElement("div", {
        className: prefixCls + "-footer-now-wrapper"
    }, _index.default.createElement(_index2.default, {
        onClick: onSelectNow
    }, DATEPICKER_LOCALE.today)), shouldShouldShortcuts || showTime ? _index.default.createElement("div", {
        className: prefixCls + "-footer-btn-wrapper"
    }, !shortcutsPlacementLeft ? _index.default.createElement(_shortcuts.default, {
        shortcuts: shortcuts,
        prefixCls: prefixCls,
        onSelectNow: onSelectNow,
        nowText: DATEPICKER_LOCALE.now,
        showNowBtn: showNowBtn,
        onMouseEnterShortcut: onMouseEnterShortcut,
        onMouseLeaveShortcut: onMouseLeaveShortcut,
        onSelectShortcut: onSelectShortcut,
        showTime: showTime
    }) : _index.default.createElement("div", null), showTime && _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index1.default, {
        type: "text",
        size: "mini",
        onClick: onClickSelectTimeBtn,
        className: isTimePanel ? prefixCls + "-btn-select-date" : prefixCls + "-btn-select-time"
    }, isTimePanel ? DATEPICKER_LOCALE.selectDate : DATEPICKER_LOCALE.selectTime), _index.default.createElement(_index1.default, {
        className: prefixCls + "-btn-confirm",
        type: "primary",
        size: "mini",
        disabled: disabled,
        onClick: onClickConfirmBtn
    }, DATEPICKER_LOCALE.ok))) : null);
}
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/header.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLeft/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconRight/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDoubleLeft/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDoubleRight/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
function Header(props) {
    var prefixCls = props.prefixCls, title = props.title, onPrev = props.onPrev, onNext = props.onNext, onSuperPrev = props.onSuperPrev, onSuperNext = props.onSuperNext, mode = props.mode, value = props.value, onChangePanel = props.onChangePanel, _a = props.icons, icons = _a === void 0 ? {} : _a;
    var showPrev = typeof onPrev === 'function';
    var showSuperPrev = typeof onSuperPrev === 'function';
    var showNext = typeof onNext === 'function';
    var showSuperNext = typeof onSuperNext === 'function';
    var getIconClassName = function(isShow) {
        var _a;
        return (0, _classNames.default)(prefixCls + "-header-icon", (_a = {}, _a[prefixCls + "-header-icon-hidden"] = !isShow, _a));
    };
    function renderHeaderLabel() {
        if (title) return title;
        if (mode === 'date' || mode === 'week') return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement("span", {
            className: prefixCls + "-header-label",
            onClick: function() {
                return onChangePanel('year');
            }
        }, value.format('YYYY')), "-", _index.default.createElement("span", {
            className: prefixCls + "-header-label",
            onClick: function() {
                return onChangePanel('month');
            }
        }, value.format('MM')));
        if (mode === 'month' || mode === 'quarter') return _index.default.createElement("span", {
            className: prefixCls + "-header-label",
            onClick: function() {
                return onChangePanel('year');
            }
        }, value.format('YYYY'));
    }
    var prevDoubleNull = icons.prevDouble === null;
    var prevNull = icons.prev === null;
    var nextNull = icons.next === null;
    var nextDoubleNull = icons.nextDouble === null;
    return _index.default.createElement("div", {
        className: prefixCls + "-header"
    }, !prevDoubleNull && _index.default.createElement("div", {
        className: getIconClassName(showSuperPrev),
        onClick: onSuperPrev
    }, showSuperPrev && (prevDoubleNull ? null : icons.prevDouble || _index.default.createElement(_index3.default, null))), !prevNull && _index.default.createElement("div", {
        className: getIconClassName(showPrev),
        onClick: onPrev
    }, showPrev && (prevNull ? null : icons.prev || _index.default.createElement(_index1.default, null))), _index.default.createElement("div", {
        className: prefixCls + "-header-value"
    }, renderHeaderLabel()), !nextNull && _index.default.createElement("div", {
        className: getIconClassName(showNext),
        onClick: onNext
    }, showNext && (nextNull ? null : icons.next || _index.default.createElement(_index2.default, null))), !nextDoubleNull && _index.default.createElement("div", {
        className: getIconClassName(showSuperNext),
        onClick: onSuperNext
    }, showSuperNext && (nextDoubleNull ? null : icons.nextDouble || _index.default.createElement(_index4.default, null))));
}
var _default = Header;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/month/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _merge = __webpack_require__.ir(__webpack_require__("../../node_modules/lodash/merge.js"));
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _header = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/header.js"));
var _body = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/body.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/year/index.js"));
var _pad = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pad.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function MonthPicker(props) {
    var pageShowDate = props.pageShowDate, style = props.style, onMouseEnterCell = props.onMouseEnterCell, onMouseLeaveCell = props.onMouseLeaveCell, dateRender = props.dateRender, disabledDate = props.disabledDate, value = props.value, locale = props.locale, isRangePicker = props.isRangePicker, onSelect = props.onSelect, rangeValues = props.rangeValues, onSuperPrev = props.onSuperPrev, onSuperNext = props.onSuperNext, format = props.format, getHeaderOperations = props.getHeaderOperations, setPageShowDate = props.setPageShowDate, icons = props.icons, panelMode = props.panelMode, originMode = props.originMode, setPanelMode = props.setPanelMode, rest = __rest(props, [
        "pageShowDate",
        "style",
        "onMouseEnterCell",
        "onMouseLeaveCell",
        "dateRender",
        "disabledDate",
        "value",
        "locale",
        "isRangePicker",
        "onSelect",
        "rangeValues",
        "onSuperPrev",
        "onSuperNext",
        "format",
        "getHeaderOperations",
        "setPageShowDate",
        "icons",
        "panelMode",
        "originMode",
        "setPanelMode"
    ]);
    var _a = (0, _index.useContext)(_index1.ConfigContext), globalLocale = _a.locale, getPrefixCls = _a.getPrefixCls;
    var DATEPICKER_LOCALE = (0, _merge.default)(globalLocale.DatePicker, locale);
    var CALENDAR_LOCALE = DATEPICKER_LOCALE.Calendar;
    var prefixCls = getPrefixCls('panel-month');
    var classNames = (0, _classNames.default)(prefixCls);
    var bodyProps = isRangePicker ? {
        rangeValues: rangeValues
    } : {
        value: value
    };
    var showYear = pageShowDate.year();
    var rows = (0, _index.useMemo)(function() {
        var MONTHS = [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ].map(function(month, index) {
            return {
                name: CALENDAR_LOCALE.month.short[month],
                time: (0, _dayjs.dayjs)(showYear + "-" + (0, _pad.padStart)(index + 1, 2, '0'), 'YYYY-MM').endOf('month')
            };
        });
        var monthGroup = Array(4);
        for(var i = 0; i < 4; i++)monthGroup[i] = MONTHS.slice(i * 3, 3 * (i + 1));
        return monthGroup;
    }, [
        showYear,
        CALENDAR_LOCALE
    ]);
    function renderCalendar() {
        return _index.default.createElement(_body.default, __assign({}, rest, bodyProps, {
            prefixCls: getPrefixCls('picker'),
            rows: rows,
            onSelectDate: onSelect,
            isSameTime: function(current, target) {
                return current.isSame(target, 'month');
            },
            onMouseEnterCell: onMouseEnterCell,
            onMouseLeaveCell: onMouseLeaveCell,
            dateRender: dateRender,
            disabledDate: disabledDate,
            CALENDAR_LOCALE: CALENDAR_LOCALE,
            mode: "month",
            originMode: originMode,
            format: format
        }));
    }
    var headerOperations = {
        onSuperPrev: onSuperPrev,
        onSuperNext: onSuperNext
    };
    function onChangePanel(mode) {
        setPanelMode(mode);
    }
    if (panelMode === 'year') return _index.default.createElement(_index2.default, __assign({}, getHeaderOperations(panelMode), {
        pageShowDate: pageShowDate,
        onSelect: function(_, date) {
            setPanelMode('month');
            setPageShowDate(date);
        },
        disabledDate: disabledDate
    }));
    return _index.default.createElement("div", {
        className: classNames,
        style: style
    }, _index.default.createElement(_header.default, __assign({}, headerOperations, {
        icons: icons,
        prefixCls: getPrefixCls('picker'),
        value: pageShowDate,
        mode: panelMode,
        onChangePanel: onChangePanel
    })), renderCalendar());
}
MonthPicker.defaultProps = {
    pickerType: 'month'
};
var _default = MonthPicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/quarter/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _merge = __webpack_require__.ir(__webpack_require__("../../node_modules/lodash/merge.js"));
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _header = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/header.js"));
var _body = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/body.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/year/index.js"));
var _pad = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pad.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function QuarterPicker(props) {
    var pageShowDate = props.pageShowDate, style = props.style, onMouseEnterCell = props.onMouseEnterCell, onMouseLeaveCell = props.onMouseLeaveCell, dateRender = props.dateRender, disabledDate = props.disabledDate, value = props.value, locale = props.locale, isRangePicker = props.isRangePicker, onSelect = props.onSelect, rangeValues = props.rangeValues, onSuperPrev = props.onSuperPrev, onSuperNext = props.onSuperNext, format = props.format, getHeaderOperations = props.getHeaderOperations, setPageShowDate = props.setPageShowDate, icons = props.icons, panelMode = props.panelMode, setPanelMode = props.setPanelMode, rest = __rest(props, [
        "pageShowDate",
        "style",
        "onMouseEnterCell",
        "onMouseLeaveCell",
        "dateRender",
        "disabledDate",
        "value",
        "locale",
        "isRangePicker",
        "onSelect",
        "rangeValues",
        "onSuperPrev",
        "onSuperNext",
        "format",
        "getHeaderOperations",
        "setPageShowDate",
        "icons",
        "panelMode",
        "setPanelMode"
    ]);
    var _a = (0, _index.useContext)(_index1.ConfigContext), globalLocale = _a.locale, getPrefixCls = _a.getPrefixCls;
    var DATEPICKER_LOCALE = (0, _merge.default)(globalLocale.DatePicker, locale);
    var CALENDAR_LOCALE = DATEPICKER_LOCALE.Calendar;
    var prefixCls = getPrefixCls('panel-quarter');
    var classNames = (0, _classNames.default)(prefixCls);
    var bodyProps = isRangePicker ? {
        rangeValues: rangeValues
    } : {
        value: value
    };
    var showYear = pageShowDate.year();
    var rows = [
        [
            1,
            2,
            3,
            4
        ].map(function(q) {
            return {
                name: "Q" + q,
                time: (0, _dayjs.dayjs)(showYear + "-" + (0, _pad.padStart)((q - 1) * 3 + 1, 2, '0') + "-01")
            };
        })
    ];
    function renderCalendar() {
        return _index.default.createElement(_body.default, __assign({}, rest, bodyProps, {
            prefixCls: getPrefixCls('picker'),
            rows: rows,
            onSelectDate: onSelect,
            isSameTime: function(current, target) {
                return current.isSame(target, 'month');
            },
            onMouseEnterCell: onMouseEnterCell,
            onMouseLeaveCell: onMouseLeaveCell,
            dateRender: dateRender,
            disabledDate: disabledDate,
            CALENDAR_LOCALE: CALENDAR_LOCALE,
            mode: "quarter",
            format: format
        }));
    }
    var headerOperations = {
        onSuperPrev: onSuperPrev,
        onSuperNext: onSuperNext
    };
    function onChangePanel(mode) {
        setPanelMode(mode);
    }
    if (panelMode === 'year') return _index.default.createElement(_index2.default, __assign({}, getHeaderOperations(panelMode), {
        pageShowDate: pageShowDate,
        onSelect: function(_, date) {
            setPanelMode('quarter');
            setPageShowDate(date);
        },
        disabledDate: disabledDate,
        originMode: "quarter"
    }));
    return _index.default.createElement("div", {
        className: classNames,
        style: style
    }, _index.default.createElement(_header.default, __assign({}, headerOperations, {
        icons: icons,
        prefixCls: getPrefixCls('picker'),
        value: pageShowDate,
        mode: panelMode,
        onChangePanel: onChangePanel
    })), _index.default.createElement("div", {
        className: prefixCls + "-wrapper"
    }, renderCalendar()));
}
QuarterPicker.defaultProps = {
    pickerType: 'quarter'
};
var _default = QuarterPicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/range/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/date/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/week/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/month/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/year/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/quarter/index.js"));
var _index6 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function range(start, end) {
    var result = [];
    for(var i = start; i < end; i++)result.push(i);
    return result;
}
function RangePicker(props) {
    var _a = props.mode, mode = _a === void 0 ? 'date' : _a, showTime = props.showTime, disabledDate = props.disabledDate, disabledTime = props.disabledTime, format = props.format, dateRender = props.dateRender, propsValue = props.value, timeValues = props.timeValues, icons = props.icons, locale = props.locale, pageShowDates = props.pageShowDates, onMouseEnterCell = props.onMouseEnterCell, onMouseLeaveCell = props.onMouseLeaveCell, onSelectTime = props.onTimePickerSelect, onSelectPanel = props.onSelectPanel, onPrev = props.onPrev, onSuperPrev = props.onSuperPrev, onNext = props.onNext, onSuperNext = props.onSuperNext, localeName = props.localeName, popupVisible = props.popupVisible, timepickerProps = props.timepickerProps, getHeaderOperations = props.getHeaderOperations, setRangePageShowDates = props.setRangePageShowDates, disabledTimePickerIndex = props.disabledTimePickerIndex, hideNotInViewDates = props.hideNotInViewDates, isTimePanel = props.isTimePanel, valueShowHover = props.valueShowHover, panelModes = props.panelModes, setPanelModes = props.setPanelModes;
    var getPrefixCls = (0, _index.useContext)(_index6.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('picker-range');
    var _b = (0, _index.useContext)(_context.default), utcOffset = _b.utcOffset, timezone = _b.timezone;
    var startShowDate = pageShowDates[0] || (0, _dayjs.getNow)(utcOffset, timezone);
    var endShowDate = pageShowDates[1] || (0, _dayjs.getNow)(utcOffset, timezone);
    var value = (0, _dayjs.getDayjsValue)(propsValue, format);
    var basePickerProps = {
        isRangePicker: true,
        rangeValues: value,
        onMouseEnterCell: onMouseEnterCell,
        onMouseLeaveCell: onMouseLeaveCell,
        format: format,
        locale: locale,
        disabledDate: disabledDate,
        onSelect: onSelectPanel,
        dateRender: dateRender,
        getHeaderOperations: getHeaderOperations,
        icons: icons,
        valueShowHover: valueShowHover
    };
    var startPickerProps = {
        pageShowDate: startShowDate,
        panelMode: panelModes[0],
        setPanelMode: function(m) {
            return setPanelModes([
                m,
                panelModes[1]
            ]);
        }
    };
    var endPickerProps = {
        pageShowDate: endShowDate,
        panelMode: panelModes[1],
        setPanelMode: function(m) {
            return setPanelModes([
                panelModes[0],
                m
            ]);
        }
    };
    function renderDate() {
        var startOperations = {
            onPrev: onPrev,
            onSuperPrev: onSuperPrev
        };
        var endOperations = {
            onNext: onNext,
            onSuperNext: onSuperNext
        };
        var pickerProps = __assign(__assign({}, basePickerProps), {
            localeName: localeName,
            popupVisible: popupVisible,
            timepickerProps: timepickerProps,
            getHeaderOperations: getHeaderOperations,
            hideNotInViewDates: hideNotInViewDates,
            isTimePanel: isTimePanel
        });
        if (mode === 'week') return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index2.default, __assign({
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'week', 0);
            }
        }, startOperations, pickerProps, startPickerProps)), _index.default.createElement(_index2.default, __assign({
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'week', 1);
            }
        }, endOperations, pickerProps, endPickerProps)));
        var showTimeProps = {
            disabledTime: disabledTime,
            showTime: showTime
        };
        var disabledTimePickerProps = {};
        if (typeof disabledTimePickerIndex === 'number') {
            disabledTimePickerProps.disabledTime = function() {
                return {
                    disabledHours: function() {
                        return range(0, 24);
                    },
                    disabledMinutes: function() {
                        return range(0, 60);
                    },
                    disabledSeconds: function() {
                        return range(0, 60);
                    }
                };
            };
            if ((0, _is.isObject)(showTime)) {
                var st = __assign(__assign({}, showTime), {
                    defaultValue: undefined
                });
                disabledTimePickerProps.showTime = __assign(__assign({}, st), {
                    hideDisabledOptions: false
                });
            }
        }
        return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index1.default, __assign({}, startOperations, pickerProps, showTimeProps, disabledTimePickerIndex === 0 ? disabledTimePickerProps : {}, {
            onTimePickerSelect: function(timeString, time) {
                onSelectTime(0, timeString, time);
            },
            index: 0,
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'date', 0);
            },
            timeValue: timeValues[0]
        }, startPickerProps)), _index.default.createElement(_index1.default, __assign({}, endOperations, pickerProps, showTimeProps, disabledTimePickerIndex === 1 ? disabledTimePickerProps : {}, {
            onTimePickerSelect: function(timeString, time) {
                onSelectTime(1, timeString, time);
            },
            index: 1,
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'date', 1);
            },
            timeValue: timeValues[1]
        }, endPickerProps)));
    }
    function renderMonth() {
        var startOperations = {
            onSuperPrev: onSuperPrev
        };
        var endOperations = {
            onSuperNext: onSuperNext
        };
        var pickerProps = basePickerProps;
        return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index3.default, __assign({
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'month', 0);
            }
        }, startOperations, pickerProps, startPickerProps)), _index.default.createElement(_index3.default, __assign({
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'month', 1);
            }
        }, endOperations, pickerProps, endPickerProps)));
    }
    function renderYear() {
        var startOperations = {
            onSuperPrev: onSuperPrev
        };
        var endOperations = {
            onSuperNext: onSuperNext
        };
        var pickerProps = basePickerProps;
        return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index4.default, __assign({}, startOperations, pickerProps, {
            pageShowDate: startShowDate
        })), _index.default.createElement(_index4.default, __assign({}, endOperations, pickerProps, {
            pageShowDate: endShowDate
        })));
    }
    function renderQuarter() {
        var startOperations = {
            onSuperPrev: onSuperPrev
        };
        var endOperations = {
            onSuperNext: onSuperNext
        };
        var pickerProps = basePickerProps;
        return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index5.default, __assign({
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'quarter', 0);
            }
        }, startOperations, pickerProps, startPickerProps)), _index.default.createElement(_index5.default, __assign({
            setPageShowDate: function(d) {
                return setRangePageShowDates([
                    d,
                    d
                ], 'quarter', 1);
            }
        }, endOperations, pickerProps, endPickerProps)));
    }
    return _index.default.createElement("div", {
        className: prefixCls
    }, _index.default.createElement("div", {
        className: prefixCls + "-wrapper"
    }, (mode === 'date' || mode === 'week') && renderDate(), mode === 'month' && renderMonth(), mode === 'year' && renderYear(), mode === 'quarter' && renderQuarter()));
}
RangePicker.defaultProps = {
    pickerType: 'range'
};
var _default = RangePicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/shortcuts.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
function Shortcuts(props, ref) {
    var prefixCls = props.prefixCls, _a = props.shortcuts, shortcuts = _a === void 0 ? [] : _a, onSelectNow = props.onSelectNow, nowText = props.nowText, showNowBtn = props.showNowBtn, showTime = props.showTime, onMouseEnterShortcut = props.onMouseEnterShortcut, onMouseLeaveShortcut = props.onMouseLeaveShortcut;
    function onMouseEnter(shortcut) {
        onMouseEnterShortcut && onMouseEnterShortcut(shortcut);
    }
    function onMouseLeave(shortcut) {
        onMouseLeaveShortcut && onMouseLeaveShortcut(shortcut);
    }
    function onClick(shortcut, e) {
        var onSelectShortcut = props.onSelectShortcut;
        onSelectShortcut && onSelectShortcut(shortcut, e);
    }
    var hasShortcuts = (0, _is.isArray)(shortcuts) && shortcuts.length > 0;
    var shouldShowNowBtn = showNowBtn && showTime && !hasShortcuts;
    return _index.default.createElement("div", {
        ref: ref,
        className: prefixCls + "-shortcuts"
    }, shouldShowNowBtn && _index.default.createElement(_index1.default, {
        size: "mini",
        onClick: onSelectNow
    }, nowText), hasShortcuts && shortcuts.map(function(shortcut, index) {
        return _index.default.createElement(_index1.default, {
            key: index,
            size: "mini",
            onMouseEnter: function() {
                return onMouseEnter(shortcut);
            },
            onMouseLeave: function() {
                return onMouseLeave(shortcut);
            },
            onClick: function(e) {
                return onClick(shortcut, e);
            }
        }, shortcut.text);
    }));
}
var _default = (0, _index.forwardRef)(Shortcuts);
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/week-list.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
function WeekList(props) {
    var prefixCls = props.prefixCls, weekStart = props.weekStart, isWeek = props.isWeek, CALENDAR_LOCALE = props.CALENDAR_LOCALE;
    var weekList = [
        'sunday',
        'monday',
        'tuesday',
        'wednesday',
        'thursday',
        'friday',
        'saturday'
    ];
    weekList = weekList.slice(weekStart).concat(weekList.slice(0, weekStart));
    if (isWeek) weekList.unshift('');
    var weekLocale = CALENDAR_LOCALE.week.short;
    return _index.default.createElement("div", {
        className: prefixCls + "-week-list"
    }, weekList.map(function(w) {
        return _index.default.createElement("div", {
            className: prefixCls + "-week-list-item",
            key: w
        }, w && weekLocale[w]);
    }));
}
var _default = WeekList;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/week/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/date/index.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function WeekPicker(props) {
    var value = props.value, isRangePicker = props.isRangePicker, rangeValues = props.rangeValues, onPrev = props.onPrev, onNext = props.onNext, onSuperPrev = props.onSuperPrev, onSuperNext = props.onSuperNext, localeName = props.localeName, rest = __rest(props, [
        "value",
        "isRangePicker",
        "rangeValues",
        "onPrev",
        "onNext",
        "onSuperPrev",
        "onSuperNext",
        "localeName"
    ]);
    var weekStart = (0, _index.useContext)(_context.default).weekStart;
    var bodyProps = isRangePicker ? {
        rangeValues: rangeValues
    } : {
        value: value
    };
    var headerOperations = {
        onPrev: onPrev,
        onNext: onNext,
        onSuperPrev: onSuperPrev,
        onSuperNext: onSuperNext
    };
    function isSameTime(current, target) {
        return _dayjs.methods.isSameWeek(current, target, weekStart, localeName);
    }
    return _index.default.createElement(_index1.default, __assign({}, rest, bodyProps, headerOperations, {
        isWeek: true,
        isSameTime: isSameTime,
        isRangePicker: isRangePicker
    }));
}
WeekPicker.defaultProps = {
    pickerType: 'week'
};
var _default = WeekPicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/panels/year/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _merge = __webpack_require__.ir(__webpack_require__("../../node_modules/lodash/merge.js"));
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _header = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/header.js"));
var _body = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/body.js"));
var _constant = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/constant.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function YearPicker(props) {
    var pageShowDate = props.pageShowDate, style = props.style, onMouseEnterCell = props.onMouseEnterCell, onMouseLeaveCell = props.onMouseLeaveCell, dateRender = props.dateRender, disabledDate = props.disabledDate, value = props.value, locale = props.locale, isRangePicker = props.isRangePicker, onSelect = props.onSelect, rangeValues = props.rangeValues, onSuperPrev = props.onSuperPrev, onSuperNext = props.onSuperNext, format = props.format, icons = props.icons, originMode = props.originMode, rest = __rest(props, [
        "pageShowDate",
        "style",
        "onMouseEnterCell",
        "onMouseLeaveCell",
        "dateRender",
        "disabledDate",
        "value",
        "locale",
        "isRangePicker",
        "onSelect",
        "rangeValues",
        "onSuperPrev",
        "onSuperNext",
        "format",
        "icons",
        "originMode"
    ]);
    var _a = (0, _index.useContext)(_index1.ConfigContext), globalLocale = _a.locale, getPrefixCls = _a.getPrefixCls;
    var DATEPICKER_LOCALE = (0, _merge.default)(globalLocale.DatePicker, locale);
    var CALENDAR_LOCALE = DATEPICKER_LOCALE.Calendar;
    var _b = (0, _index.useContext)(_context.default), utcOffset = _b.utcOffset, timezone = _b.timezone;
    var prefixCls = getPrefixCls('panel-year');
    var classNames = (0, _classNames.default)(prefixCls);
    var bodyProps = isRangePicker ? {
        rangeValues: rangeValues
    } : {
        value: value
    };
    var showYear = pageShowDate ? pageShowDate.year() : (0, _dayjs.getNow)(utcOffset, timezone).year();
    var startYear = Math.floor(showYear / 10) * 10 - 1;
    var groupRow = (0, _constant.newArray)(3).map(function(_) {
        return '';
    });
    var rows = (0, _constant.newArray)(4).map(function(_) {
        return groupRow;
    }).map(function(arr, i) {
        return arr.map(function(_, j) {
            return {
                name: startYear + i * 3 + j,
                time: (0, _dayjs.dayjs)("" + (startYear + i * 3 + j), 'YYYY').endOf('year'),
                isPrev: i === 0 && j === 0,
                isNext: i === 3 && j === 2
            };
        });
    });
    function renderCalendar() {
        return _index.default.createElement(_body.default, __assign({}, rest, bodyProps, {
            prefixCls: getPrefixCls('picker'),
            rows: rows,
            onSelectDate: onSelect,
            isSameTime: function(current, target) {
                return current.isSame(target, 'year');
            },
            onMouseEnterCell: onMouseEnterCell,
            onMouseLeaveCell: onMouseLeaveCell,
            dateRender: dateRender,
            disabledDate: disabledDate,
            CALENDAR_LOCALE: CALENDAR_LOCALE,
            mode: "year",
            originMode: originMode,
            format: format
        }));
    }
    var headerOperations = {
        onSuperPrev: onSuperPrev,
        onSuperNext: onSuperNext
    };
    return _index.default.createElement("div", {
        className: classNames,
        style: style
    }, _index.default.createElement(_header.default, __assign({
        prefixCls: getPrefixCls('picker'),
        icons: icons,
        title: rows[0][1].name + " - " + rows[3][2].name
    }, headerOperations)), renderCalendar());
}
YearPicker.defaultProps = {
    pickerType: 'year'
};
var _default = YearPicker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/picker-range.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/index.js"));
var _inputrange = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/picker/input-range.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCalendar/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCalendarClock/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/range/index.js"));
var _footer = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/footer.js"));
var _shortcuts = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/shortcuts.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/util.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var _usePrevious = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/usePrevious.js"));
var _useUpdate = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useUpdate.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function getFormat(props) {
    var format = props.format, showTime = props.showTime, mode = props.mode;
    var valueFormat;
    switch(mode){
        case 'date':
            valueFormat = showTime ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD';
            break;
        case 'month':
            valueFormat = 'YYYY-MM';
            break;
        case 'year':
            valueFormat = 'YYYY';
            break;
        case 'week':
            valueFormat = 'YYYY-wo';
            break;
        case 'quarter':
            valueFormat = 'YYYY-[Q]Q';
            break;
        default:
            valueFormat = 'YYYY-MM-DD';
    }
    if (format) valueFormat = format;
    return valueFormat;
}
var defaultProps = {
    allowClear: true,
    unmountOnExit: true,
    position: 'bl',
    editable: true,
    mode: 'date'
};
var Picker = function(baseProps) {
    var _a, _b;
    var _c = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _c.getPrefixCls, locale = _c.locale, ctxSize = _c.size, componentConfig = _c.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.DatePicker);
    var allowClear = props.allowClear, className = props.className, style = props.style, placeholder = props.placeholder, getPopupContainer = props.getPopupContainer, disabled = props.disabled, position = props.position, error = props.error, unmountOnExit = props.unmountOnExit, editable = props.editable, triggerProps = props.triggerProps, shortcuts = props.shortcuts, onSelect = props.onSelect, onVisibleChange = props.onVisibleChange, propsValue = props.value, onChange = props.onChange, icons = props.icons, disabledDate = props.disabledDate, disabledTime = props.disabledTime, mode = props.mode, showTime = props.showTime, onSelectShortcut = props.onSelectShortcut, extra = props.extra, shortcutsPlacementLeft = props.shortcutsPlacementLeft, onOk = props.onOk, defaultPickerValue = props.defaultPickerValue, pickerValue = props.pickerValue, onPickerValueChange = props.onPickerValueChange, triggerElement = props.triggerElement, clearRangeOnReselect = props.clearRangeOnReselect, separator = props.separator, utcOffset = props.utcOffset, timezone = props.timezone;
    var prefixCls = getPrefixCls('picker-range');
    var weekStart = (0, _is.isUndefined)(props.dayStartOfWeek) ? (0, _util.getDefaultWeekStart)(locale.dayjsLocale) : props.dayStartOfWeek;
    var refInput = (0, _index.useRef)(null);
    var refPanel = (0, _index.useRef)(null);
    var refShortcuts = (0, _index.useRef)(null);
    var shortcutEnterTimer = (0, _index.useRef)(null);
    var shortcutLeaveTimer = (0, _index.useRef)(null);
    var format = getFormat(props);
    function getAvailableInputIndex() {
        if ((0, _is.isArray)(disabled)) {
            if (disabled[0] && !disabled[1]) return 1;
            if (disabled[1] && !disabled[0]) return 0;
        }
    }
    var availableInputIndex = getAvailableInputIndex();
    var isHalfAvailable = typeof availableInputIndex === 'number';
    var disabledTimePickerIndex = isHalfAvailable ? 1 ^ availableInputIndex : undefined;
    var _d = __read((0, _index.useState)(isHalfAvailable ? availableInputIndex : 0), 2), focusedInputIndex = _d[0], setFocusedInputIndex = _d[1];
    var nextFocusedInputIndex = 1 ^ focusedInputIndex;
    var _e = __read((0, _index.useState)(), 2), inputValue = _e[0], setInputValue = _e[1];
    var _f = __read((0, _index.useState)(), 2), hoverPlaceholderValue = _f[0], setHoverPlaceholderValue = _f[1];
    var _g = __read((0, _index.useState)(getDefaultValue()), 2), value = _g[0], setValue = _g[1];
    var _h = __read((0, _index.useState)(), 2), valueShow = _h[0], setValueShow = _h[1];
    var _j = __read((0, _index.useState)(), 2), valueShowHover = _j[0], setValueShowHover = _j[1];
    var _k = __read((0, _index.useState)(), 2), shortcutsValue = _k[0], setShortcutsValue = _k[1];
    var _l = __read((0, _index.useState)(props.popupVisible), 2), popupVisible = _l[0], setPopupVisible = _l[1];
    var _m = __read((0, _index.useState)([
        mode,
        mode
    ]), 2), panelModes = _m[0], setPanelModes = _m[1];
    var _o = __read((0, _index.useState)(false), 2), isTimePanel = _o[0], setIsTimePanel = _o[1];
    var mergedPopupVisible = 'popupVisible' in props ? props.popupVisible : popupVisible;
    var propsValueDayjs = (0, _dayjs.getDayjsValue)(propsValue, format, utcOffset, timezone);
    var mergedValue = 'value' in props ? propsValueDayjs : value;
    var panelValue = shortcutsValue || valueShow || mergedValue || [];
    var selectedLength = (0, _util.getAvailableDayjsLength)(valueShow || mergedValue);
    var firstRange = (0, _index.useRef)(true);
    var now = (0, _dayjs.getNow)();
    var zoneNow = (0, _dayjs.toTimezone)(now, utcOffset, timezone);
    function getTimeValues() {
        var timeValues = [];
        var defaultTimeValue = (0, _is.isObject)(showTime) && showTime.defaultValue ? (0, _dayjs.getDayjsValue)(showTime.defaultValue, showTime.format || 'HH:mm:ss', utcOffset, timezone) : [];
        timeValues[0] = panelValue[0] || defaultTimeValue[0] || zoneNow;
        timeValues[1] = panelValue[1] || defaultTimeValue[1] || zoneNow;
        return timeValues;
    }
    var timeValues = getTimeValues();
    var initialDisabledDate = isHalfAvailable ? function(current) {
        return availableInputIndex === 0 ? current.isAfter(panelValue[1], mode) : current.isBefore(panelValue[0], mode);
    } : undefined;
    var selectedDisabledDate = (0, _index.useRef)(initialDisabledDate);
    var customTriggerElement = triggerElement !== undefined;
    var resetRange = customTriggerElement || clearRangeOnReselect;
    function getDefaultValue() {
        var value;
        if (props.value) value = (0, _dayjs.getDayjsValue)(props.value, format, utcOffset, timezone);
        else value = (0, _dayjs.getDayjsValue)(props.defaultValue, format, utcOffset, timezone);
        if (isHalfAvailable && (!value || value && !value[nextFocusedInputIndex])) {
            var nv = [];
            nv[nextFocusedInputIndex] = (0, _dayjs.getNow)(utcOffset, timezone);
            return nv;
        }
        return value;
    }
    var defaultPageShowDates = mergedValue || (0, _dayjs.getDayjsValue)(defaultPickerValue, format) || [
        now,
        now
    ];
    var _p = __read((0, _index.useState)(getShowDatesFromFocused(defaultPageShowDates)), 2), pageShowDates = _p[0], setPageShowDates = _p[1];
    var mergedPageShowDate = getShowDatesFromFocused((0, _dayjs.getDayjsValue)(pickerValue, format, utcOffset, timezone)) || pageShowDates;
    var previousUtcOffset = (0, _usePrevious.default)(utcOffset);
    var previousTimezone = (0, _usePrevious.default)(timezone);
    (0, _useUpdate.default)(function() {
        if ((0, _is.isArray)(value) && (previousUtcOffset !== utcOffset || timezone !== previousTimezone)) {
            var localValue = value.map(function(v) {
                return (0, _dayjs.toLocal)(v, previousUtcOffset, previousTimezone);
            });
            var zoneValue = localValue.map(function(v) {
                return (0, _dayjs.toTimezone)(v, utcOffset, timezone);
            });
            setValue(zoneValue);
        }
    }, [
        utcOffset,
        previousUtcOffset,
        timezone,
        previousTimezone
    ]);
    (0, _index.useEffect)(function() {
        setPanelModes([
            mode,
            mode
        ]);
    }, [
        mode
    ]);
    (0, _index.useEffect)(function() {
        setHoverPlaceholderValue(undefined);
        setInputValue(undefined);
        if (mergedPopupVisible) {
            setIsTimePanel(false);
            setPanelModes([
                mode,
                mode
            ]);
            setPageShowDates(getShowDatesFromFocused(defaultPageShowDates));
            setValueShow(mergedValue);
            if (shortcutsPlacementLeft) refShortcuts.current.style.maxHeight = refPanel.current.clientHeight + "px";
        } else {
            setValueShow(undefined);
            setValueShowHover(undefined);
            setShortcutsValue(undefined);
            resetSelectedDisabledDate();
            blurInput();
        }
        firstRange.current = mergedPopupVisible;
    }, [
        mergedPopupVisible
    ]);
    var startStr = (_a = propsValueDayjs === null || propsValueDayjs === void 0 ? void 0 : propsValueDayjs[0]) === null || _a === void 0 ? void 0 : _a.format(format);
    var endStr = (_b = propsValueDayjs === null || propsValueDayjs === void 0 ? void 0 : propsValueDayjs[1]) === null || _b === void 0 ? void 0 : _b.format(format);
    (0, _index.useEffect)(function() {
        setValueShow(undefined);
        setValueShowHover(undefined);
    }, [
        startStr,
        endStr
    ]);
    function setFixedPageShowDates(innerValue) {
        var newPageShowDates = getShowDatesFromFocused(innerValue);
        setPageShowDates(newPageShowDates);
        handlePickerValueChange(newPageShowDates);
    }
    function handlePickerValueChange(v) {
        if (!isSamePanel([
            v[0],
            pageShowDates[0]
        ], mode)) onPickerValueChange && onPickerValueChange((0, _is.isArray)(v) ? v.map(function(v) {
            return v && v.format(format);
        }) : undefined, v);
    }
    function getShowDatesFromFocused(dates, index) {
        if (index === void 0) index = focusedInputIndex;
        var prev = index === 0 || isSamePanel(dates, mode);
        if ((0, _is.isArray)(dates) && dates.length < 2) return getPageShowDatesByValue(dates[0] || (0, _dayjs.getNow)(utcOffset, timezone), mode, 'prev');
        if ((0, _is.isArray)(dates) && dates.length === 2) {
            if (dates[index]) return getPageShowDatesByValue(dates[index], mode, prev ? 'prev' : 'next');
            return getPageShowDatesByValue(dates[index === 0 ? 1 : 0] || (0, _dayjs.getNow)(utcOffset, timezone), mode, prev && !dates[index === 0 ? 1 : 0] ? 'prev' : 'next');
        }
    }
    function setNestPageShowDates(dates, pickerMode, index) {
        if ((0, _is.isArray)(dates) && dates[index]) {
            setPageShowDates(getPageShowDatesByValue(dates[index], pickerMode, index === 0 ? 'prev' : 'next'));
            handlePickerValueChange(dates);
        }
    }
    function isSamePanel(innerValue, pickerMode) {
        if (innerValue && innerValue.length === 2 && isValidDayjsArray(innerValue)) return (pickerMode === 'date' || pickerMode === 'week') && innerValue[0].isSame(innerValue[1], 'month') || (pickerMode === 'month' || pickerMode === 'quarter') && innerValue[0].isSame(innerValue[1], 'year') || pickerMode === 'year' && Math.floor(innerValue[0].year() / 10) === Math.floor(innerValue[1].year() / 10);
    }
    function getPageShowDatesByValue(value, pickerMode, type) {
        if (value === void 0) value = (0, _dayjs.getNow)(utcOffset, timezone);
        if (pickerMode === void 0) pickerMode = mode;
        if (type === void 0) type = 'prev';
        var prev = type === 'prev';
        switch(pickerMode){
            case 'date':
            case 'week':
                return prev ? [
                    value,
                    _dayjs.methods.add(value, 1, 'month')
                ] : [
                    _dayjs.methods.subtract(value, 1, 'month'),
                    value
                ];
            case 'month':
            case 'quarter':
                return prev ? [
                    value,
                    _dayjs.methods.add(value, 1, 'year')
                ] : [
                    _dayjs.methods.subtract(value, 1, 'year'),
                    value
                ];
            case 'year':
                return prev ? [
                    value,
                    _dayjs.methods.add(value, 10, 'year')
                ] : [
                    _dayjs.methods.subtract(value, 10, 'year'),
                    value
                ];
            default:
                return [];
        }
    }
    function focusInput(index) {
        refInput.current && refInput.current.focus && refInput.current.focus(isHalfAvailable ? availableInputIndex : index);
    }
    function blurInput() {
        refInput.current && refInput.current.blur && refInput.current.blur();
    }
    function visibleChange(visible) {
        if (visible) {
            setTimeout(function() {
                return focusInput();
            });
            setOpen(visible);
        } else setOpen(false);
    }
    function setOpen(visible) {
        onVisibleChange && onVisibleChange(visible);
        setPopupVisible(visible);
    }
    function onClear(e) {
        e.stopPropagation();
        var newValueShow = __spreadArray([], __read(panelValue), false);
        if (isHalfAvailable) newValueShow[availableInputIndex] = undefined;
        else newValueShow = undefined;
        setValue(newValueShow);
        setValueShow(newValueShow);
        onHandleChange(newValueShow);
        props.onClear && props.onClear();
    }
    function changeFocusedInputIndex(index, silent) {
        setInputValue(undefined);
        setFocusedInputIndex(index);
        if (panelValue && panelValue.length && !silent) {
            var newPageShowDates = getShowDatesFromFocused(panelValue, index);
            setPageShowDates(newPageShowDates);
            handlePickerValueChange(newPageShowDates);
        }
    }
    function isDisabledDate(date) {
        var selectedDisabled = typeof selectedDisabledDate.current === 'function' ? selectedDisabledDate.current(date) : false;
        var originDisabledDate = typeof disabledDate === 'function' ? disabledDate(date) : false;
        return originDisabledDate || selectedDisabled;
    }
    function isValid(time) {
        return (0, _dayjs.isValidTimeString)(time, format) && !isDisabledDate((0, _dayjs.getDayjsValue)(time, format));
    }
    function resetSelectedDisabledDate() {
        selectedDisabledDate.current = initialDisabledDate;
    }
    function onChangeInput(e) {
        var newValueShow = __spreadArray([], __read(panelValue || []), false);
        var niv = e.target.value;
        setInputValue(niv);
        if (!mergedPopupVisible) setOpen(true);
        if (isValid(niv)) {
            newValueShow[focusedInputIndex] = (0, _dayjs.getDayjsValue)(niv, format);
            setValueShow(newValueShow);
            setFixedPageShowDates(newValueShow);
            setInputValue(undefined);
        }
    }
    function onHandleChange(newValue) {
        if ((0, _dayjs.isDayjsArrayChange)(mergedValue, newValue)) {
            var localValue = (0, _is.isArray)(newValue) ? newValue.map(function(v) {
                return (0, _dayjs.toLocal)(v, utcOffset, timezone);
            }) : undefined;
            onChange && onChange((0, _is.isArray)(localValue) ? localValue.map(function(v) {
                return v && v.format(format);
            }) : undefined, localValue);
        }
    }
    function onPressEnter() {
        if ((0, _is.isArray)(valueShow) && valueShow.length) {
            if (inputValue && !isValid(inputValue)) setInputValue(undefined);
            else if (selectedLength !== 2) switchFocusedInput();
            else if (selectedLength === 2) onConfirmValue(valueShow);
        } else if (mergedPopupVisible) setOpen(false);
    }
    function onPressTab(e) {
        e.preventDefault();
    }
    function onConfirmValue(date, keepOpen) {
        var confirmValue = date || panelValue;
        if (!confirmValue || !confirmValue[0] || !confirmValue[1]) return;
        var sortedValues = (0, _dayjs.getSortedDayjsArray)(confirmValue);
        setValue(sortedValues);
        onHandleChange(sortedValues);
        resetSelectedDisabledDate();
        if (triggerElement !== null && !keepOpen) setOpen(false);
    }
    function onClickConfirmBtn() {
        onConfirmValue();
        onOk && onOk(panelValue.map(function(v) {
            return v && v.format(format);
        }), panelValue);
    }
    function outOfRange(date) {
        if (selectedLength !== 2) return false;
        var v = valueShow || mergedValue;
        if (focusedInputIndex === 0 && date.valueOf() > v[1].valueOf()) return true;
        if (focusedInputIndex === 1 && date.valueOf() < v[0].valueOf()) return true;
        return false;
    }
    function onSelectPanel(_, date) {
        var isOutOfRange = outOfRange(date);
        var newValueShow = resetRange && selectedLength === 2 && !isHalfAvailable ? [] : __spreadArray([], __read(panelValue), false);
        var focusedIndex = customTriggerElement ? selectedLength === 0 || selectedLength === 2 ? 0 : 1 : focusedInputIndex;
        var newDate = showTime ? (0, _dayjs.getValueWithTime)(date, timeValues[focusedIndex]) : date;
        if (isOutOfRange) {
            newValueShow[focusedIndex] = newDate;
            newValueShow[1 ^ focusedIndex] = undefined;
        } else newValueShow[focusedIndex] = newDate;
        var sortedValueShow = (0, _dayjs.getSortedDayjsArray)(newValueShow);
        onSelectValueShow(sortedValueShow);
        setInputValue(undefined);
        setHoverPlaceholderValue(undefined);
        var newSelectedLength = (0, _util.getAvailableDayjsLength)(newValueShow);
        if (resetRange) {
            if (selectedLength === 0 || selectedLength === 2 && !isHalfAvailable) customTriggerElement ? setFocusedInputIndex(1) : switchFocusedInput(true);
            else if (!showTime) onConfirmValue(newValueShow);
        } else if (newSelectedLength <= 1) switchFocusedInput(true);
        else if (selectedLength === 2 && firstRange.current && !isHalfAvailable) {
            firstRange.current = false;
            switchFocusedInput(true);
            if (!showTime && !isOutOfRange) onConfirmValue(newValueShow, true);
        } else {
            firstRange.current = false;
            if (!showTime && !isOutOfRange) onConfirmValue(newValueShow);
        }
    }
    function onTimePickerSelect(index, _, time) {
        var newValueShow = (0, _is.isArray)(panelValue) ? __spreadArray([], __read(panelValue), false) : [];
        var newTimeValue = (0, _dayjs.getValueWithTime)(newValueShow[index] || (0, _dayjs.getNow)(utcOffset, timezone), time);
        newValueShow[index] = newTimeValue;
        onSelectValueShow(newValueShow);
    }
    function onSelectValueShow(newValueShow) {
        setValueShow(newValueShow);
        setValueShowHover(undefined);
        var sortedValues = (0, _dayjs.getSortedDayjsArray)(newValueShow);
        var zoneValues = sortedValues.map(function(v) {
            return (0, _dayjs.toLocal)(v, utcOffset, timezone);
        });
        onSelect && onSelect(zoneValues.map(function(v) {
            return v && v.format(format);
        }), zoneValues, {
            type: focusedInputIndex === 1 ? 'end' : 'start'
        });
    }
    function switchFocusedInput(silent) {
        changeFocusedInputIndex(nextFocusedInputIndex, silent);
        setTimeout(function() {
            return focusInput(nextFocusedInputIndex);
        });
    }
    function onMouseEnterCell(date, disabled) {
        var newValueShowHover = __spreadArray([], __read(panelValue || []), false);
        var needShowHover = resetRange ? selectedLength === 1 : selectedLength !== 0;
        if (!disabled && needShowHover && !outOfRange(date)) {
            newValueShowHover[focusedInputIndex] = (0, _dayjs.getValueWithTime)(date, timeValues[focusedInputIndex]);
            setValueShowHover(newValueShowHover);
            setInputValue(undefined);
        }
        if (!disabled) {
            var placeHolderValue = showTime ? (0, _dayjs.getValueWithTime)(date, timeValues[focusedInputIndex]) : date;
            setHoverPlaceholderValue(placeHolderValue.locale(locale.dayjsLocale).format(format));
        }
    }
    function onMouseLeaveCell() {
        setValueShowHover(undefined);
        setHoverPlaceholderValue(undefined);
    }
    function isValidDayjsArray(sv) {
        return sv && (0, _is.isArray)(sv) && sv.length === 2 && (0, _is.isDayjs)(sv[0]) && (0, _is.isDayjs)(sv[1]);
    }
    function isValidShortcut(shortcut) {
        var sv = typeof shortcut.value === 'function' && shortcut.value();
        return isValidDayjsArray(sv);
    }
    function clearShortcutsTimer() {
        clearTimeout(shortcutEnterTimer.current);
        clearTimeout(shortcutLeaveTimer.current);
        shortcutEnterTimer.current = null;
        shortcutLeaveTimer.current = null;
    }
    function onMouseEnterShortcut(shortcut) {
        clearShortcutsTimer();
        shortcutEnterTimer.current = setTimeout(function() {
            if (isValidShortcut(shortcut)) {
                var nv = (0, _dayjs.getDayjsValue)(shortcut.value(), format, utcOffset, timezone);
                setShortcutsValue(nv);
                setFixedPageShowDates(nv);
            }
        }, 50);
    }
    function onMouseLeaveShortcut() {
        clearShortcutsTimer();
        shortcutLeaveTimer.current = setTimeout(function() {
            setShortcutsValue(undefined);
            setFixedPageShowDates(valueShow || mergedValue || [
                (0, _dayjs.getNow)(utcOffset, timezone),
                (0, _dayjs.getNow)(utcOffset, timezone)
            ]);
        }, 50);
    }
    function onHandleSelectShortcut(shortcut) {
        onSelectShortcut && onSelectShortcut(shortcut);
        if (isValidShortcut(shortcut)) {
            var time = (0, _dayjs.getDayjsValue)(shortcut.value(), format, utcOffset, timezone);
            onConfirmValue(time);
        }
    }
    function changePageShowDates(type, unit, num) {
        if (num === void 0) num = 1;
        var index = type === 'prev' ? 0 : 1;
        var newPageShowDates = __spreadArray([], __read(mergedPageShowDate), false);
        if (type === 'prev') newPageShowDates[index] = _dayjs.methods.subtract(mergedPageShowDate[index], num, unit);
        if (type === 'next') newPageShowDates[index] = _dayjs.methods.add(mergedPageShowDate[index], num, unit);
        newPageShowDates = getPageShowDatesByValue(newPageShowDates[index], mode, type);
        setFixedPageShowDates(newPageShowDates);
    }
    function getHeaderOperations(pickerMode) {
        if (pickerMode === void 0) pickerMode = mode;
        if (pickerMode === 'date' || pickerMode === 'week') return {
            onPrev: function() {
                return changePageShowDates('prev', 'month');
            },
            onNext: function() {
                return changePageShowDates('next', 'month');
            },
            onSuperPrev: function() {
                return changePageShowDates('prev', 'year');
            },
            onSuperNext: function() {
                return changePageShowDates('next', 'year');
            }
        };
        if (pickerMode === 'month' || pickerMode === 'quarter') return {
            onSuperPrev: function() {
                return changePageShowDates('prev', 'year');
            },
            onSuperNext: function() {
                return changePageShowDates('next', 'year');
            }
        };
        if (pickerMode === 'year') return {
            onSuperPrev: function() {
                return changePageShowDates('prev', 'year', 10);
            },
            onSuperNext: function() {
                return changePageShowDates('next', 'year', 10);
            }
        };
    }
    function onClickSelectTimeBtn() {
        setIsTimePanel(!isTimePanel);
    }
    function renderPopup(panelOnly) {
        var _a;
        var classNames = (0, _classNames.default)(prefixCls + "-container", (_a = {}, _a[prefixCls + "-panel-only"] = panelOnly, _a[prefixCls + "-container-shortcuts-placement-left"] = (0, _is.isArray)(shortcuts) && shortcutsPlacementLeft, _a), panelOnly ? className : '');
        var shortcutsProps = {
            prefixCls: getPrefixCls('picker'),
            showTime: showTime,
            shortcuts: shortcuts,
            onMouseEnterShortcut: onMouseEnterShortcut,
            onMouseLeaveShortcut: onMouseLeaveShortcut,
            onSelectShortcut: onHandleSelectShortcut
        };
        var shouldShowFooter = showTime && panelModes[0] === 'date' && panelModes[1] === 'date' || extra || (0, _is.isArray)(shortcuts) && shortcuts.length && !shortcutsPlacementLeft;
        var content = _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_index5.default, __assign({}, props, getHeaderOperations(), {
            getHeaderOperations: getHeaderOperations,
            setRangePageShowDates: setNestPageShowDates,
            pageShowDates: mergedPageShowDate,
            value: panelValue,
            format: format,
            onSelectPanel: onSelectPanel,
            onMouseEnterCell: onMouseEnterCell,
            onMouseLeaveCell: onMouseLeaveCell,
            disabledDate: function(current) {
                return isDisabledDate(current);
            },
            disabledTime: disabledTime,
            mode: mode,
            localeName: locale.dayjsLocale,
            showTime: showTime,
            timeValues: shortcutsValue || timeValues,
            onTimePickerSelect: onTimePickerSelect,
            popupVisible: mergedPopupVisible,
            disabledTimePickerIndex: disabledTimePickerIndex,
            isTimePanel: isTimePanel,
            valueShowHover: valueShowHover,
            panelModes: panelModes,
            setPanelModes: setPanelModes
        })), shouldShowFooter && _index.default.createElement(_footer.default, __assign({}, shortcutsProps, {
            DATEPICKER_LOCALE: locale.DatePicker,
            disabled: !((0, _is.isArray)(panelValue) && panelValue[0] && panelValue[1]),
            onClickConfirmBtn: onClickConfirmBtn,
            extra: extra,
            shortcutsPlacementLeft: shortcutsPlacementLeft,
            onClickSelectTimeBtn: onClickSelectTimeBtn,
            isTimePanel: isTimePanel
        })));
        return _index.default.createElement("div", {
            className: classNames,
            onClick: function() {
                return focusInput();
            },
            style: panelOnly ? style : {}
        }, shortcutsPlacementLeft ? _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_shortcuts.default, __assign({
            ref: refShortcuts
        }, shortcutsProps)), _index.default.createElement("div", {
            ref: refPanel,
            className: prefixCls + "-panel-wrapper"
        }, content)) : content);
    }
    var size = props.size || ctxSize;
    var placeholders = (0, _is.isArray)(placeholder) ? placeholder : locale.DatePicker.placeholders[mode];
    var suffixIcon = icons && icons.inputSuffix === null ? null : icons && icons.inputSuffix || (showTime ? _index.default.createElement(_index4.default, null) : _index.default.createElement(_index3.default, null));
    var baseInputProps = {
        style: style,
        className: className,
        popupVisible: mergedPopupVisible,
        format: format,
        disabled: disabled,
        error: error,
        size: size,
        onPressEnter: onPressEnter,
        onPressTab: onPressTab,
        onClear: onClear,
        suffixIcon: suffixIcon,
        editable: editable,
        allowClear: allowClear
    };
    var triggerDisabled = (0, _is.isArray)(disabled) ? disabled[0] && disabled[1] : disabled;
    return _index.default.createElement(_context.default.Provider, {
        value: {
            utcOffset: utcOffset,
            timezone: timezone,
            weekStart: weekStart
        }
    }, triggerElement === null ? renderPopup(true) : _index.default.createElement(_index1.default, __assign({
        popup: renderPopup,
        trigger: "click",
        clickToClose: false,
        position: position,
        disabled: triggerDisabled,
        popupAlign: {
            bottom: 4
        },
        getPopupContainer: getPopupContainer,
        onVisibleChange: visibleChange,
        popupVisible: mergedPopupVisible,
        classNames: "slideDynamicOrigin",
        unmountOnExit: unmountOnExit
    }, triggerProps), triggerElement || _index.default.createElement(_inputrange.default, __assign({}, baseInputProps, {
        ref: refInput,
        placeholder: placeholders,
        value: valueShow || mergedValue,
        onChange: onChangeInput,
        inputValue: hoverPlaceholderValue || inputValue,
        changeFocusedInputIndex: changeFocusedInputIndex,
        focusedInputIndex: focusedInputIndex,
        isPlaceholder: !!hoverPlaceholderValue,
        separator: separator
    }))));
};
Picker.displayName = 'RangePicker';
var _default = Picker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/picker.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/index.js"));
var _input = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/picker/input.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCalendar/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCalendarClock/index.js"));
var _footer = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/footer.js"));
var _shortcuts = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/panels/shortcuts.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/context.js"));
var _usePrevious = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/usePrevious.js"));
var _useUpdate = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useUpdate.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/util.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function getFormat(props) {
    var format = props.format, picker = props.picker, showTime = props.showTime;
    var valueFormat;
    switch(picker.props.pickerType){
        case 'date':
            valueFormat = showTime ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD';
            break;
        case 'month':
            valueFormat = 'YYYY-MM';
            break;
        case 'year':
            valueFormat = 'YYYY';
            break;
        case 'week':
            valueFormat = 'gggg-wo';
            break;
        case 'quarter':
            valueFormat = 'YYYY-[Q]Q';
            break;
        default:
            valueFormat = 'YYYY-MM-DD';
    }
    if (format) valueFormat = format;
    return valueFormat;
}
var defaultProps = {
    allowClear: true,
    unmountOnExit: true,
    position: 'bl',
    editable: true,
    showNowBtn: true
};
var Picker = function(baseProps) {
    var _a = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _a.getPrefixCls, locale = _a.locale, ctxSize = _a.size, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.DatePicker);
    var allowClear = props.allowClear, className = props.className, style = props.style, placeholder = props.placeholder, getPopupContainer = props.getPopupContainer, disabled = props.disabled, position = props.position, error = props.error, unmountOnExit = props.unmountOnExit, editable = props.editable, triggerProps = props.triggerProps, picker = props.picker, shortcuts = props.shortcuts, onSelect = props.onSelect, onVisibleChange = props.onVisibleChange, propsValue = props.value, onChange = props.onChange, icons = props.icons, disabledDate = props.disabledDate, showTime = props.showTime, showNowBtn = props.showNowBtn, onSelectShortcut = props.onSelectShortcut, extra = props.extra, shortcutsPlacementLeft = props.shortcutsPlacementLeft, onOk = props.onOk, defaultPickerValue = props.defaultPickerValue, pickerValue = props.pickerValue, onPickerValueChange = props.onPickerValueChange, triggerElement = props.triggerElement, utcOffset = props.utcOffset, timezone = props.timezone, panelRender = props.panelRender;
    var prefixCls = getPrefixCls('picker');
    var DATEPICKER_LOCALE = locale.DatePicker;
    var weekStart = (0, _is.isUndefined)(props.dayStartOfWeek) ? (0, _util.getDefaultWeekStart)(locale.dayjsLocale) : props.dayStartOfWeek;
    var mode = picker.props.pickerType;
    var refInput = (0, _index.useRef)(null);
    var refPanel = (0, _index.useRef)(null);
    var refShortcuts = (0, _index.useRef)(null);
    var realFormat = getFormat(props);
    var format = realFormat;
    if (typeof format === 'function') format = showTime ? 'YYYY-MM-DD HH:mm:ss' : 'YYYY-MM-DD';
    function getDefaultValue() {
        var value;
        if (props.value) value = (0, _dayjs.getDayjsValue)(props.value, format, utcOffset, timezone);
        else value = (0, _dayjs.getDayjsValue)(props.defaultValue, format, utcOffset, timezone);
        return value;
    }
    var _b = __read((0, _index.useState)(getDefaultValue()), 2), value = _b[0], setValue = _b[1];
    var _c = __read((0, _index.useState)(props.popupVisible), 2), popupVisible = _c[0], setPopupVisible = _c[1];
    var _d = __read((0, _index.useState)(false), 2), isTimePanel = _d[0], setIsTimePanel = _d[1];
    var _e = __read((0, _index.useState)(), 2), hoverPlaceholderValue = _e[0], setHoverPlaceholderValue = _e[1];
    var mergedPopupVisible = 'popupVisible' in props ? props.popupVisible : popupVisible;
    var mergedValue = 'value' in props ? (0, _dayjs.getDayjsValue)(propsValue, format, utcOffset, timezone) : value;
    var defaultPageShowDate = mergedValue || (0, _dayjs.getDayjsValue)(defaultPickerValue, format) || (0, _dayjs.getNow)();
    var _f = __read((0, _index.useState)(), 2), inputValue = _f[0], setInputValue = _f[1];
    var _g = __read((0, _index.useState)(), 2), valueShow = _g[0], setValueShow = _g[1];
    var _h = __read((0, _index.useState)(), 2), shortcutValue = _h[0], setShortcutValue = _h[1];
    var _j = __read((0, _index.useState)(defaultPageShowDate), 2), pageShowDate = _j[0], setPageShowDate = _j[1];
    var mergedPageShowDate = (0, _dayjs.getDayjsValue)(pickerValue, format) || pageShowDate;
    var panelValue = shortcutValue || valueShow || mergedValue;
    var _k = __read((0, _index.useState)(mode), 2), panelMode = _k[0], setPanelMode = _k[1];
    var defaultTimeValue = (0, _is.isObject)(showTime) && (0, _dayjs.getDayjsValue)(showTime.defaultValue, showTime.format || 'HH:mm:ss', utcOffset, timezone) || (0, _dayjs.getNow)(utcOffset, timezone);
    var timeValue = panelValue || defaultTimeValue;
    function focusInput() {
        refInput.current && refInput.current.blur && refInput.current.focus();
    }
    function blurInput() {
        refInput.current && refInput.current.blur && refInput.current.blur();
    }
    var previousUtcOffset = (0, _usePrevious.default)(utcOffset);
    var previousTimezone = (0, _usePrevious.default)(timezone);
    (0, _useUpdate.default)(function() {
        if (value && (previousUtcOffset !== utcOffset || timezone !== previousTimezone)) {
            var localValue = (0, _dayjs.toLocal)(value, previousUtcOffset, previousTimezone);
            setValue((0, _dayjs.toTimezone)(localValue, utcOffset, timezone));
        }
    }, [
        utcOffset,
        previousUtcOffset,
        timezone,
        previousTimezone
    ]);
    (0, _index.useEffect)(function() {
        setInputValue(undefined);
        setHoverPlaceholderValue(undefined);
        if (mergedPopupVisible) {
            setPageShowDate(defaultPageShowDate);
            if (shortcutsPlacementLeft) refShortcuts.current.style.maxHeight = refPanel.current.clientHeight + "px";
        } else {
            setValueShow(undefined);
            setShortcutValue(undefined);
            setTimeout(function() {
                setIsTimePanel(false);
                setPanelMode(mode);
                blurInput();
            }, 100);
        }
    }, [
        mergedPopupVisible
    ]);
    function visibleChange(visible) {
        if (visible) setOpen(visible, function() {
            focusInput();
        });
        else setOpen(false);
    }
    function handlePickerValueChange(v) {
        onPickerValueChange && onPickerValueChange(v.format(format), v);
    }
    function setOpen(visible, callback) {
        setPopupVisible(visible);
        onVisibleChange && onVisibleChange(visible);
        callback && callback();
    }
    function onClear(e) {
        e.stopPropagation();
        setValue(undefined);
        setValueShow(undefined);
        onHandleChange(undefined);
        props.onClear && props.onClear();
    }
    function onClickConfirmBtn() {
        onConfirmValue();
        onOk && onOk(panelValue && panelValue.format(format), panelValue);
    }
    function onConfirmValue() {
        setValue(panelValue);
        onHandleChange(panelValue);
        setOpen(false);
    }
    function onHandleSelect(_, date, now) {
        setInputValue(undefined);
        setHoverPlaceholderValue(undefined);
        if (showTime) {
            var newTime = now ? date : (0, _dayjs.getValueWithTime)(date, timeValue);
            setValueShow(newTime);
            setPageShowDate(newTime);
            var localTime = (0, _dayjs.toLocal)(newTime, utcOffset, timezone);
            onSelect && onSelect(localTime.format(format), localTime);
        } else {
            var localTime = (0, _dayjs.toLocal)(date, utcOffset, timezone);
            onSelect && onSelect(localTime ? localTime.format(format) : undefined, localTime);
            setValue(date);
            onHandleChange(date);
            setOpen(false);
        }
    }
    function onHandleChange(newValue) {
        if ((0, _dayjs.isDayjsChange)(newValue, mergedValue)) {
            var localValue = (0, _dayjs.toLocal)(newValue, utcOffset, timezone);
            onChange && onChange(localValue ? localValue.format(format) : undefined, localValue);
        }
    }
    function onTimePickerSelect(_, time) {
        var _valueShow = panelValue || (0, _dayjs.getNow)(utcOffset, timezone);
        var newValueShow = (0, _dayjs.getValueWithTime)(_valueShow, time);
        setValueShow(newValueShow);
        var localNewValueShow = (0, _dayjs.toLocal)(newValueShow, utcOffset, timezone);
        onSelect && onSelect(localNewValueShow.format(format), localNewValueShow);
    }
    function isValid(time) {
        return typeof time === 'string' && (0, _dayjs.dayjs)(time, format).format(format) === time && (typeof disabledDate === 'function' ? !disabledDate((0, _dayjs.dayjs)(time, format)) : true);
    }
    function onChangeInput(e) {
        var niv = e.target.value;
        setInputValue(niv);
        if (!mergedPopupVisible) setOpen(true);
        if (isValid(niv)) {
            var newValue = (0, _dayjs.getDayjsValue)(niv, format, utcOffset, timezone);
            setValueShow(newValue);
            setPageShowDate(newValue);
            setInputValue(undefined);
        }
    }
    function onPressEnter() {
        if (panelValue) {
            onConfirmValue();
            blurInput();
        } else if (mergedPopupVisible) setOpen(false);
    }
    function changePageShowDate(type, unit, num) {
        if (num === void 0) num = 1;
        var newPageShowDate;
        if (type === 'prev') newPageShowDate = _dayjs.methods.subtract(mergedPageShowDate, num, unit);
        if (type === 'next') newPageShowDate = _dayjs.methods.add(mergedPageShowDate, num, unit);
        handlePickerValueChange(newPageShowDate);
        setPageShowDate(newPageShowDate);
    }
    function getHeaderOperations(pickMode) {
        if (pickMode === void 0) pickMode = mode;
        if (pickMode === 'date' || pickMode === 'week') return {
            onPrev: function() {
                return changePageShowDate('prev', 'month');
            },
            onNext: function() {
                return changePageShowDate('next', 'month');
            },
            onSuperPrev: function() {
                return changePageShowDate('prev', 'year');
            },
            onSuperNext: function() {
                return changePageShowDate('next', 'year');
            }
        };
        if (pickMode === 'month' || pickMode === 'quarter') return {
            onSuperPrev: function() {
                return changePageShowDate('prev', 'year');
            },
            onSuperNext: function() {
                return changePageShowDate('next', 'year');
            }
        };
        if (pickMode === 'year') return {
            onSuperPrev: function() {
                return changePageShowDate('prev', 'year', 10);
            },
            onSuperNext: function() {
                return changePageShowDate('next', 'year', 10);
            }
        };
    }
    function onSelectNow() {
        var now = (0, _dayjs.getNow)(utcOffset, timezone);
        handlePickerValueChange(now);
        onHandleSelect(now.format(format), now, true);
    }
    function onMouseEnterCell(value, disabled) {
        if (!disabled) {
            var placeHolderValue = showTime ? (0, _dayjs.getValueWithTime)(value, timeValue) : value;
            setHoverPlaceholderValue(typeof realFormat === 'function' ? realFormat(value) : placeHolderValue.locale(locale.dayjsLocale).format(format));
        }
    }
    function onMouseLeaveCell() {
        setHoverPlaceholderValue(undefined);
    }
    function onMouseEnterShortcut(shortcut) {
        if (typeof shortcut.value === 'function' && (0, _is.isDayjs)(shortcut.value())) {
            var sv = (0, _dayjs.getDayjsValue)(shortcut.value(), format, utcOffset, timezone);
            setPageShowDate(sv);
            handlePickerValueChange(sv);
            setShortcutValue(sv);
        }
    }
    function onMouseLeaveShortcut() {
        var newValue = valueShow || mergedValue || (0, _dayjs.getNow)(utcOffset, timezone);
        setShortcutValue(undefined);
        setPageShowDate(newValue);
        handlePickerValueChange(newValue);
    }
    function onHandleSelectShortcut(shortcut) {
        onSelectShortcut && onSelectShortcut(shortcut);
        if (typeof shortcut.value === 'function' && (0, _is.isDayjs)(shortcut.value())) {
            var time = (0, _dayjs.getDayjsValue)(shortcut.value(), format, utcOffset, timezone);
            setValue(time);
            onHandleChange(time);
            setOpen(false);
        }
    }
    function onClickSelectTimeBtn() {
        setIsTimePanel(!isTimePanel);
    }
    function renderPopup(panelOnly) {
        var _a;
        var classNames = (0, _classNames.default)(prefixCls + "-container", (_a = {}, _a[prefixCls + "-panel-only"] = panelOnly, _a[prefixCls + "-container-shortcuts-placement-left"] = (0, _is.isArray)(shortcuts) && shortcutsPlacementLeft, _a), panelOnly ? className : '');
        var shortcutsProps = {
            prefixCls: prefixCls,
            showTime: showTime,
            shortcuts: shortcuts,
            onSelectNow: onSelectNow,
            showNowBtn: showNowBtn,
            onMouseEnterShortcut: onMouseEnterShortcut,
            onMouseLeaveShortcut: onMouseLeaveShortcut,
            onSelectShortcut: onHandleSelectShortcut
        };
        var shouldShowFooter = showTime && panelMode === 'date' || extra || (0, _is.isArray)(shortcuts) && shortcuts.length && !shortcutsPlacementLeft || !showTime && panelMode === 'date' && showNowBtn;
        var content = _index.default.createElement(_index.default.Fragment, null, _index.default.cloneElement(picker, __assign(__assign(__assign({}, (0, _omit.default)(props, [
            'style'
        ])), getHeaderOperations()), {
            getHeaderOperations: getHeaderOperations,
            onSelect: onHandleSelect,
            onTimePickerSelect: onTimePickerSelect,
            onSelectNow: onSelectNow,
            popupVisible: mergedPopupVisible,
            format: format,
            value: panelValue,
            pageShowDate: mergedPageShowDate,
            localeName: locale.dayjsLocale,
            setPageShowDate: function(v) {
                setPageShowDate(v);
                handlePickerValueChange(v);
            },
            timeValue: timeValue,
            isTimePanel: isTimePanel,
            panelMode: panelMode,
            setPanelMode: setPanelMode,
            onMouseEnterCell: onMouseEnterCell,
            onMouseLeaveCell: onMouseLeaveCell
        })), shouldShowFooter && _index.default.createElement(_footer.default, __assign({}, shortcutsProps, {
            DATEPICKER_LOCALE: DATEPICKER_LOCALE,
            disabled: !panelValue,
            onClickConfirmBtn: onClickConfirmBtn,
            extra: extra,
            mode: panelMode,
            shortcutsPlacementLeft: shortcutsPlacementLeft,
            onClickSelectTimeBtn: onClickSelectTimeBtn,
            isTimePanel: isTimePanel
        })));
        var contentWithShortcuts = shortcutsPlacementLeft ? _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_shortcuts.default, __assign({
            ref: refShortcuts
        }, shortcutsProps)), _index.default.createElement("div", {
            ref: refPanel,
            className: prefixCls + "-panel-wrapper"
        }, content)) : content;
        var panelNode = typeof panelRender === 'function' ? panelRender(contentWithShortcuts) : contentWithShortcuts;
        return _index.default.createElement("div", {
            className: classNames,
            onClick: function() {
                refInput.current && refInput.current.focus && refInput.current.focus();
            },
            style: panelOnly ? style : {}
        }, panelNode);
    }
    var size = props.size || ctxSize;
    var suffixIcon = icons && icons.inputSuffix === null ? null : icons && icons.inputSuffix || (showTime ? _index.default.createElement(_index4.default, null) : _index.default.createElement(_index3.default, null));
    var baseInputProps = {
        style: style,
        className: className,
        popupVisible: mergedPopupVisible,
        format: realFormat,
        disabled: disabled,
        error: error,
        size: size,
        onPressEnter: onPressEnter,
        onClear: onClear,
        suffixIcon: suffixIcon,
        editable: editable && typeof realFormat !== 'function',
        allowClear: allowClear
    };
    return _index.default.createElement(_context.default.Provider, {
        value: {
            utcOffset: utcOffset,
            timezone: timezone,
            weekStart: weekStart
        }
    }, triggerElement === null ? renderPopup(true) : _index.default.createElement(_index1.default, __assign({
        popup: renderPopup,
        trigger: "click",
        clickToClose: false,
        position: position,
        disabled: disabled,
        popupAlign: {
            bottom: 4
        },
        getPopupContainer: getPopupContainer,
        onVisibleChange: visibleChange,
        popupVisible: mergedPopupVisible,
        classNames: "slideDynamicOrigin",
        unmountOnExit: unmountOnExit
    }, triggerProps), triggerElement || _index.default.createElement(_input.default, __assign({}, baseInputProps, {
        ref: refInput,
        placeholder: placeholder || DATEPICKER_LOCALE.placeholder[mode],
        popupVisible: mergedPopupVisible,
        value: valueShow || mergedValue,
        inputValue: hoverPlaceholderValue || inputValue,
        prefixCls: prefixCls,
        onChange: onChangeInput,
        isPlaceholder: !!hoverPlaceholderValue
    }))));
};
var _default = Picker;
},
"../../node_modules/@arco-design/web-react/es/DatePicker/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Link/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/picker/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/DatePicker/util.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isTimeArrayChange: function() {
        return isTimeArrayChange;
    },
    getAvailableDayjsLength: function() {
        return getAvailableDayjsLength;
    },
    isDisabledDate: function() {
        return isDisabledDate;
    },
    getDefaultWeekStart: function() {
        return getDefaultWeekStart;
    }
});
var _dayjsmin = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/dayjs.min.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
function getFormat(time) {
    return (0, _is.isDayjs)(time) && time.format('HH:mm:ss');
}
function isTimeArrayChange(prevTime, nextTime) {
    return getFormat(prevTime[0]) !== getFormat(nextTime[0]) || getFormat(prevTime[1]) !== getFormat(nextTime[1]);
}
function getAvailableDayjsLength(value) {
    if (!value) return 0;
    if ((0, _is.isArray)(value)) {
        if ((0, _is.isDayjs)(value[0]) && (0, _is.isDayjs)(value[1])) return 2;
        if (!(0, _is.isDayjs)(value[0]) && !(0, _is.isDayjs)(value[1])) return 0;
        return 1;
    }
    return 0;
}
function isDisabledDate(date, disabledDate, mode, originMode) {
    if (typeof disabledDate !== 'function') return false;
    if (!originMode || originMode === mode) return disabledDate(date);
    return disabledDate(date.startOf(mode)) && disabledDate(date.endOf(mode));
}
function getDefaultWeekStart(dayjsLocale) {
    var _a, _b;
    return ((_b = (_a = _dayjsmin.default.Ls) === null || _a === void 0 ? void 0 : _a[dayjsLocale]) === null || _b === void 0 ? void 0 : _b.weekStart) || 0;
}
},
"../../node_modules/@arco-design/web-react/es/Dropdown/button.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Dropdown/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconMore/index.js"));
var _index4 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var defaultProps = {
    position: 'br',
    trigger: 'hover',
    type: 'default',
    icon: _index.default.createElement(_index3.default, null),
    unmountOnExit: true
};
function Button(baseProps, ref) {
    var _a;
    var componentConfig = (0, _index.useContext)(_index4.ConfigContext).componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig['Dropdown.Button']);
    var className = props.className, style = props.style, children = props.children, disabled = props.disabled, droplist = props.droplist, _b = props.position, position = _b === void 0 ? 'br' : _b, _c = props.trigger, trigger = _c === void 0 ? 'hover' : _c, _d = props.type, type = _d === void 0 ? 'default' : _d, size = props.size, _e = props.icon, icon = _e === void 0 ? _index.default.createElement(_index3.default, null) : _e, _f = props.unmountOnExit, unmountOnExit = _f === void 0 ? true : _f, onClick = props.onClick, onVisibleChange = props.onVisibleChange, buttonProps = props.buttonProps, buttonsRender = props.buttonsRender;
    var leftButton = _index.default.createElement(_index1.default, __assign({
        disabled: disabled,
        type: type,
        size: size,
        onClick: onClick
    }, buttonProps), children);
    var rightButton = _index.default.createElement(_index1.default, {
        disabled: disabled,
        type: type,
        size: size,
        icon: icon
    });
    if (buttonsRender) _a = __read(buttonsRender([
        leftButton,
        rightButton
    ]), 2), leftButton = _a[0], rightButton = _a[1];
    var disableTrigger = disabled || !rightButton || rightButton.props && rightButton.props.loading;
    return _index.default.createElement(_index1.default.Group, {
        className: className,
        style: style,
        ref: ref
    }, leftButton, _index.default.createElement(_index2.default, {
        droplist: droplist,
        position: position,
        trigger: trigger,
        unmountOnExit: unmountOnExit,
        onVisibleChange: onVisibleChange,
        triggerProps: {
            disabled: disableTrigger
        }
    }, rightButton));
}
var ButtonComponent = (0, _index.forwardRef)(Button);
ButtonComponent.displayName = 'DropdownButton';
var _default = ButtonComponent;
},
"../../node_modules/@arco-design/web-react/es/Dropdown/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/index.js"));
var _button = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Dropdown/button.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _pick = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pick.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var defaultProps = {
    position: 'bl',
    trigger: 'hover',
    unmountOnExit: true
};
function Dropdown(baseProps, _) {
    var _a;
    var _b = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Button);
    var trigger = props.trigger, droplist = props.droplist, children = props.children, position = props.position, disabled = props.disabled, unmountOnExit = props.unmountOnExit, triggerProps = props.triggerProps, getPopupContainer = props.getPopupContainer, onVisibleChange = props.onVisibleChange, rest = __rest(props, [
        "trigger",
        "droplist",
        "children",
        "position",
        "disabled",
        "unmountOnExit",
        "triggerProps",
        "getPopupContainer",
        "onVisibleChange"
    ]);
    var prefixCls = getPrefixCls('dropdown');
    var triggerRef = (0, _index.useRef)(null);
    var _c = __read((0, _useMergeValue.default)(false, {
        defaultValue: props.defaultPopupVisible,
        value: props.popupVisible
    }), 2), popupVisible = _c[0], setPopupVisible = _c[1];
    var getPopupContent = function() {
        return _index.default.Children.only(droplist || _index.default.createElement("span", null));
    };
    var changePopupVisible = function(visible) {
        setPopupVisible(visible);
        onVisibleChange && onVisibleChange(visible);
        triggerProps && triggerProps.onVisibleChange && triggerProps.onVisibleChange(visible);
    };
    var handleVisibleChange = function(visible) {
        if (visible !== popupVisible) changePopupVisible(visible);
    };
    var renderPopup = function() {
        var content = getPopupContent();
        return content && content.props.isMenu ? _index.default.cloneElement(content, {
            prefixCls: prefixCls + "-menu",
            inDropdown: true,
            selectable: false,
            onClickMenuItem: function() {
                var _a;
                var args = [];
                for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
                var returnValueOfOnClickMenuItem = null;
                var content = getPopupContent();
                if (content.props.onClickMenuItem) returnValueOfOnClickMenuItem = (_a = content.props).onClickMenuItem.apply(_a, __spreadArray([], __read(args), false));
                var child = triggerRef.current && triggerRef.current.getRootElement();
                child && child.focus && child.focus();
                if (returnValueOfOnClickMenuItem instanceof Promise) returnValueOfOnClickMenuItem.finally(function() {
                    return changePopupVisible(false);
                });
                else if (returnValueOfOnClickMenuItem !== false) changePopupVisible(false);
            }
        }) : content;
    };
    return _index.default.createElement(_index1.default, __assign({
        ref: function(ref) {
            return triggerRef.current = ref;
        },
        classNames: "slideDynamicOrigin",
        childrenPrefix: prefixCls,
        trigger: trigger,
        popup: renderPopup,
        mouseEnterDelay: 400,
        mouseLeaveDelay: 400,
        disabled: disabled,
        unmountOnExit: unmountOnExit,
        position: position,
        popupVisible: popupVisible,
        popupAlign: {
            left: 4,
            right: 4,
            top: 4,
            bottom: 4
        },
        getPopupContainer: getPopupContainer,
        alignPoint: trigger === 'contextMenu'
    }, (0, _pick.default)(rest, _index1.EventsByTriggerNeed), (0, _omit.default)(triggerProps, [
        'onVisibleChange'
    ]), {
        onVisibleChange: handleVisibleChange
    }), _index.default.isValidElement(children) ? _index.default.cloneElement(children, {
        disabled: disabled,
        className: (0, _classNames.default)((_a = {}, _a[prefixCls + "-popup-visible"] = popupVisible, _a), children.props.className)
    }) : children);
}
var ForwardRefDropdown = _index.default.forwardRef(Dropdown);
var DropdownComponent = ForwardRefDropdown;
DropdownComponent.displayName = 'Dropdown';
DropdownComponent.Button = _button.default;
var _default = DropdownComponent;
},
"../../node_modules/@arco-design/web-react/es/Empty/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconEmpty/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
function Empty(baseProps, ref) {
    var _a = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _a.getPrefixCls, globalLocale = _a.locale, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, {}, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Empty);
    var style = props.style, className = props.className, description = props.description, icon = props.icon, imgSrc = props.imgSrc;
    var prefixCls = getPrefixCls('empty');
    var classNames = (0, _classNames.default)(prefixCls, className);
    var noData = globalLocale.Empty.noData;
    var alt = typeof description === 'string' ? description : 'empty';
    return _index.default.createElement("div", {
        ref: ref,
        className: classNames,
        style: style
    }, _index.default.createElement("div", {
        className: prefixCls + "-wrapper"
    }, _index.default.createElement("div", {
        className: prefixCls + "-image"
    }, imgSrc ? _index.default.createElement("img", {
        alt: alt,
        src: imgSrc
    }) : icon || _index.default.createElement(_index1.default, null)), _index.default.createElement("div", {
        className: prefixCls + "-description"
    }, description || noData)));
}
var EmptyComponent = (0, _index.forwardRef)(Empty);
EmptyComponent.displayName = 'Empty';
var _default = (0, _index.memo)(EmptyComponent);
},
"../../node_modules/@arco-design/web-react/es/Empty/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Empty/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Input/autoSizeTextAreaHeight.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var mirrorTextAreaStyle = "\n  position: absolute;\n  min-height: 0 !important;\n  max-height: none;\n  height:0;\n  visibility: hidden;\n  z-index: -100;\n  top: 0;\n  right: 0;\n";
var mirrorTextAreaSizing = [
    'border-width',
    'box-sizing',
    'font-family',
    'font-weight',
    'font-size',
    'font-variant',
    'letter-spacing',
    'line-height',
    'padding-top',
    'padding-bottom',
    'padding-left',
    'padding-right',
    'text-indent',
    'text-rendering',
    'text-transform',
    'width'
];
var mirrorTextArea;
function setMirrorTextArea(originTextArea) {
    if (!mirrorTextArea) {
        mirrorTextArea = document.createElement('textarea');
        document.body.appendChild(mirrorTextArea);
    }
    var originStyle = window.getComputedStyle(originTextArea);
    var originSizingStyle = "\n    " + mirrorTextAreaSizing.map(function(attr) {
        return attr + ":" + originStyle.getPropertyValue(attr);
    }).join(';') + "\n  ";
    mirrorTextArea.setAttribute('style', "" + mirrorTextAreaStyle + originSizingStyle);
    var paddingSize = parseFloat(originStyle.getPropertyValue('padding-top')) + parseFloat(originStyle.getPropertyValue('padding-bottom'));
    var boxSizing = originStyle.getPropertyValue('box-sizing');
    var borderSize = parseFloat(originStyle.getPropertyValue('border-top-width')) + parseFloat(originStyle.getPropertyValue('border-bottom-width'));
    return {
        paddingSize: paddingSize,
        boxSizing: boxSizing,
        borderSize: borderSize
    };
}
function autoSizeTextAreaHeight(autoSize, node) {
    var getRows = function() {
        var minRows;
        var maxRows;
        if ((0, _is.isObject)(autoSize)) {
            minRows = autoSize.minRows;
            maxRows = autoSize.maxRows;
        }
        return {
            minRows: minRows,
            maxRows: maxRows
        };
    };
    if (autoSize) {
        var _a = getRows(), minRows = _a.minRows, maxRows = _a.maxRows;
        var originTextNode = node;
        var _b = setMirrorTextArea(originTextNode), paddingSize = _b.paddingSize, boxSizing = _b.boxSizing, borderSize = _b.borderSize;
        mirrorTextArea.value = originTextNode.value || originTextNode.placeholder || '';
        var mirrorTextAreaHeight = mirrorTextArea.scrollHeight + borderSize;
        var minHeight = void 0;
        var maxHeight = void 0;
        var overflowY = void 0;
        if (minRows || maxRows) {
            mirrorTextArea.value = '';
            var singleRowHeight = mirrorTextArea.scrollHeight - paddingSize;
            if ((0, _is.isNumber)(minRows)) {
                minHeight = singleRowHeight * minRows;
                if (boxSizing === 'border-box') {
                    minHeight += paddingSize;
                    minHeight += borderSize;
                }
                mirrorTextAreaHeight = Math.max(mirrorTextAreaHeight, minHeight);
            }
            if ((0, _is.isNumber)(maxRows)) {
                maxHeight = singleRowHeight * maxRows;
                if (boxSizing === 'border-box') {
                    maxHeight += paddingSize;
                    maxHeight += borderSize;
                }
                overflowY = mirrorTextAreaHeight > maxHeight ? 'auto' : '';
                maxHeight = Math.min(mirrorTextAreaHeight, maxHeight);
            }
        }
        var textAreaStyle = {};
        textAreaStyle.height = mirrorTextAreaHeight;
        if (minHeight) textAreaStyle.minHeight = minHeight;
        if (maxHeight) textAreaStyle.maxHeight = maxHeight;
        if (overflowY) textAreaStyle.overflowY = overflowY;
        return textAreaStyle;
    }
}
var _default = autoSizeTextAreaHeight;
},
"../../node_modules/@arco-design/web-react/es/Input/group.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var Group = _index.default.forwardRef(function(props, ref) {
    var _a;
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var className = props.className, style = props.style, children = props.children, compact = props.compact, rest = __rest(props, [
        "className",
        "style",
        "children",
        "compact"
    ]);
    var prefixCls = getPrefixCls('input-group');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-compact"] = compact, _a), className);
    return _index.default.createElement("div", __assign({
        ref: ref,
        className: classNames,
        style: style
    }, rest), children);
});
Group.displayName = 'InputGroup';
var _default = Group;
},
"../../node_modules/@arco-design/web-react/es/Input/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _input = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/input.js"));
var _default = _input.default;
},
"../../node_modules/@arco-design/web-react/es/Input/input-element.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _resizeObserver = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/resizeObserver.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js"));
var _iconhover = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/icon-hover.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _useComposition = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/useComposition.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var InputComponent = _index.default.forwardRef(function(props, ref) {
    var _a;
    var allowClear = props.allowClear, error = props.error, disabled = props.disabled, placeholder = props.placeholder, className = props.className, style = props.style, height = props.height, prefixCls = props.prefixCls, hasParent = props.hasParent, size = props.size, value = props.value, autoFitWidth = props.autoFitWidth, onClear = props.onClear, readOnly = props.readOnly, onChange = props.onChange, onKeyDown = props.onKeyDown, onPressEnter = props.onPressEnter, propMaxLength = props.maxLength, rest = __rest(props, [
        "allowClear",
        "error",
        "disabled",
        "placeholder",
        "className",
        "style",
        "height",
        "prefixCls",
        "hasParent",
        "size",
        "value",
        "autoFitWidth",
        "onClear",
        "readOnly",
        "onChange",
        "onKeyDown",
        "onPressEnter",
        "maxLength"
    ]);
    var otherProps = (0, _omit.default)(rest, [
        'showWordLimit',
        'className',
        'defaultValue',
        'addBefore',
        'addAfter',
        'afterStyle',
        'beforeStyle',
        'prefix',
        'suffix'
    ]);
    var refInput = (0, _index.useRef)();
    var refInputMirror = (0, _index.useRef)();
    var refPrevInputWidth = (0, _index.useRef)(null);
    var maxLength = (0, _is.isObject)(propMaxLength) ? propMaxLength.errorOnly ? undefined : propMaxLength.length : propMaxLength;
    var _b = (0, _useComposition.default)({
        value: value,
        maxLength: maxLength,
        onChange: onChange,
        onKeyDown: onKeyDown,
        onPressEnter: onPressEnter
    }), compositionValue = _b.compositionValue, valueChangeHandler = _b.valueChangeHandler, compositionHandler = _b.compositionHandler, keyDownHandler = _b.keyDownHandler, triggerValueChangeCallback = _b.triggerValueChangeCallback;
    var inputClassNames = (0, _classNames.default)(prefixCls, prefixCls && (_a = {}, _a[prefixCls + "-size-" + size] = size, _a[prefixCls + "-error"] = error, _a[prefixCls + "-disabled"] = disabled, _a), hasParent ? undefined : className);
    (0, _index.useImperativeHandle)(ref, function() {
        return {
            dom: refInput.current,
            focus: function() {
                refInput.current && refInput.current.focus && refInput.current.focus();
            },
            blur: function() {
                refInput.current && refInput.current.blur && refInput.current.blur();
            }
        };
    }, []);
    var updateInputWidth = function() {
        if (refInputMirror.current && refInput.current) {
            var width = refInputMirror.current.offsetWidth;
            refInput.current.style.width = width + (width ? 8 : 4) + "px";
        }
    };
    (0, _index.useEffect)(function() {
        return autoFitWidth && updateInputWidth();
    }, []);
    var inputProps = __assign(__assign({
        'aria-invalid': error
    }, otherProps), {
        readOnly: readOnly,
        maxLength: maxLength,
        disabled: disabled,
        placeholder: placeholder,
        value: compositionValue || value || '',
        className: inputClassNames,
        onKeyDown: keyDownHandler,
        onChange: valueChangeHandler,
        onCompositionStart: compositionHandler,
        onCompositionUpdate: compositionHandler,
        onCompositionEnd: compositionHandler
    });
    var mirrorValue = inputProps.value || placeholder;
    return _index.default.createElement(_index.default.Fragment, null, allowClear ? _index.default.createElement(_index.default.Fragment, null, _index.default.createElement("input", __assign({
        ref: refInput
    }, inputProps)), !readOnly && !disabled && allowClear && value ? _index.default.createElement(_iconhover.default, {
        className: prefixCls + "-clear-icon",
        onClick: function(e) {
            e.stopPropagation();
            if (refInput.current && refInput.current.focus) refInput.current.focus();
            triggerValueChangeCallback('', e);
            onClear && onClear();
        }
    }, _index.default.createElement(_index1.default, {
        onMouseDown: function(e) {
            e.preventDefault();
        }
    })) : null) : _index.default.createElement("input", __assign({
        ref: refInput
    }, inputProps, {
        style: hasParent ? {} : __assign(__assign({}, style), 'height' in props ? {
            height: height
        } : {})
    })), autoFitWidth && _index.default.createElement(_resizeObserver.default, {
        onResize: function() {
            var inputWidth = refInputMirror.current.offsetWidth;
            if (typeof autoFitWidth === 'object') {
                var delay = typeof autoFitWidth.delay === 'function' ? autoFitWidth.delay(inputWidth, refPrevInputWidth.current) : autoFitWidth.delay;
                delay ? setTimeout(updateInputWidth, delay) : updateInputWidth();
            } else updateInputWidth();
            refPrevInputWidth.current = inputWidth;
        }
    }, _index.default.createElement("span", {
        className: prefixCls + "-mirror",
        ref: refInputMirror
    }, mirrorValue && mirrorValue.replace(/\s/g, '\u00A0'))));
});
InputComponent.displayName = 'InputComponent';
var _default = InputComponent;
},
"../../node_modules/@arco-design/web-react/es/Input/input.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    formatValue: function() {
        return formatValue;
    },
    default: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _search = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/search.js"));
var _textarea = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/textarea.js"));
var _password = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/password.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _inputelement = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/input-element.js"));
var _group = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/group.js"));
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var keepFocus = function(e) {
    e.target.tagName !== 'INPUT' && e.preventDefault();
};
var inputAddon = function(className, node, style, onClick) {
    if (style === void 0) style = {};
    return node ? _index.default.createElement("span", {
        style: style,
        className: className,
        onClick: onClick
    }, node) : null;
};
function formatValue(value, maxLength) {
    var str = value !== null && !(0, _is.isUndefined)(value) && !(0, _is.isString)(value) ? String(value) : value || '';
    if (maxLength) return str.slice(0, maxLength);
    return str;
}
function Input(baseProps, ref) {
    var _a, _b, _c;
    var _d = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _d.getPrefixCls, ctxSize = _d.size, componentConfig = _d.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, {}, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Input);
    var className = props.className, style = props.style, addBefore = props.addBefore, addAfter = props.addAfter, suffix = props.suffix, prefix = props.prefix, beforeStyle = props.beforeStyle, afterStyle = props.afterStyle, height = props.height, disabled = props.disabled, maxLength = props.maxLength, showWordLimit = props.showWordLimit, allowClear = props.allowClear;
    var trueMaxLength = (0, _is.isObject)(maxLength) ? maxLength.length : maxLength;
    var mergedMaxLength = (0, _is.isObject)(maxLength) && maxLength.errorOnly ? undefined : trueMaxLength;
    var _e = __read((0, _index.useState)(false), 2), focus = _e[0], setFocus = _e[1];
    var inputRef = (0, _index.useRef)();
    var inputWrapperRef = (0, _index.useRef)();
    var _f = __read((0, _useMergeValue.default)('', {
        defaultValue: 'defaultValue' in props ? formatValue(props.defaultValue, mergedMaxLength) : undefined,
        value: 'value' in props ? formatValue(props.value, mergedMaxLength) : undefined
    }), 2), value = _f[0], setValue = _f[1];
    (0, _index.useImperativeHandle)(ref, function() {
        return inputRef.current;
    }, []);
    var onChange = function(value, e) {
        if (!('value' in props)) setValue(value);
        props.onChange && props.onChange(value, e);
    };
    var prefixCls = getPrefixCls('input');
    var size = props.size || ctxSize;
    var isCustomHeight = 'height' in props;
    var suffixElement = suffix;
    var valueLength = value ? value.length : 0;
    var lengthError = (0, _index.useMemo)(function() {
        if (!mergedMaxLength && trueMaxLength) return valueLength > trueMaxLength;
        return false;
    }, [
        valueLength,
        trueMaxLength,
        mergedMaxLength
    ]);
    if (trueMaxLength && showWordLimit) suffixElement = _index.default.createElement("span", {
        className: (0, _classNames.default)(prefixCls + "-word-limit", (_a = {}, _a[prefixCls + "-word-limit-error"] = lengthError, _a))
    }, valueLength, "/", trueMaxLength);
    var classnames = (0, _classNames.default)(prefixCls + "-group-wrapper", prefixCls + "-group-wrapper-" + size, (_b = {}, _b[prefixCls + "-custom-height"] = isCustomHeight, _b[prefixCls + "-has-suffix"] = suffixElement, _b[prefixCls + "-group-wrapper-disabled"] = disabled, _b), className);
    var needWrapper = addBefore || addAfter || suffixElement || prefix;
    var inputElement = _index.default.createElement(_inputelement.default, __assign({
        ref: inputRef
    }, props, {
        onFocus: function(e) {
            setFocus(true);
            props.onFocus && props.onFocus(e);
        },
        onBlur: function(e) {
            setFocus(false);
            props.onBlur && props.onBlur(e);
        },
        onChange: onChange,
        prefixCls: prefixCls,
        value: value,
        hasParent: !!needWrapper || allowClear,
        size: size
    }));
    var innerWrapperClassnames = (0, _classNames.default)(prefixCls + "-inner-wrapper", (_c = {}, _c[prefixCls + "-inner-wrapper-error"] = props.error || lengthError, _c[prefixCls + "-inner-wrapper-disabled"] = disabled, _c[prefixCls + "-inner-wrapper-focus"] = focus, _c[prefixCls + "-inner-wrapper-has-prefix"] = prefix, _c[prefixCls + "-inner-wrapper-" + size] = size, _c[prefixCls + "-clear-wrapper"] = allowClear, _c));
    return needWrapper ? _index.default.createElement("div", {
        className: classnames,
        style: __assign(__assign({}, style), isCustomHeight ? {
            height: height
        } : {})
    }, _index.default.createElement("span", {
        className: prefixCls + "-group"
    }, inputAddon(prefixCls + "-group-addbefore", addBefore, beforeStyle), _index.default.createElement("span", {
        className: innerWrapperClassnames,
        ref: inputWrapperRef,
        onMouseDown: function(e) {
            if (e.target.tagName !== 'INPUT') {
                if (inputWrapperRef.current && (0, _dom.contains)(inputWrapperRef.current, e.target)) e.preventDefault();
            }
        },
        onClick: function(e) {
            if (inputWrapperRef.current && (0, _dom.contains)(inputWrapperRef.current, e.target)) inputRef.current && inputRef.current.focus();
        }
    }, inputAddon(prefixCls + "-group-prefix", prefix), inputElement, inputAddon(prefixCls + "-group-suffix", suffixElement)), inputAddon(prefixCls + "-group-addafter", addAfter, afterStyle))) : allowClear ? _index.default.createElement("span", {
        className: (0, _classNames.default)(className, innerWrapperClassnames),
        style: __assign(__assign({}, style), isCustomHeight ? {
            height: height
        } : {}),
        onMouseDown: keepFocus,
        onClick: function() {
            inputRef.current && inputRef.current.focus();
        }
    }, inputElement) : inputElement;
}
var InputElement = _index.default.forwardRef(Input);
InputElement.displayName = 'Input';
InputElement.Search = _search.default;
InputElement.TextArea = _textarea.default;
InputElement.Password = _password.default;
InputElement.Group = _group.default;
var _default = InputElement;
},
"../../node_modules/@arco-design/web-react/es/Input/password.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _input = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/input.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconEye/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconEyeInvisible/index.js"));
var _index3 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var Password = _index.default.forwardRef(function(props, ref) {
    var _a;
    var _b = __read((0, _useMergeValue.default)(false, {
        defaultValue: props.defaultVisibility,
        value: props.visibility
    }), 2), visibility = _b[0], setVisibility = _b[1];
    var getPrefixCls = (0, _index.useContext)(_index3.ConfigContext).getPrefixCls;
    var className = props.className, visibilityToggle = props.visibilityToggle, onVisibilityChange = props.onVisibilityChange, rest = __rest(props, [
        "className",
        "visibilityToggle",
        "onVisibilityChange"
    ]);
    var prefixCls = getPrefixCls('input-password');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-visibility"] = visibilityToggle, _a), className);
    var onClickVisibility = function(v) {
        if (!('visibility' in props)) setVisibility(v);
        onVisibilityChange && onVisibilityChange(v);
    };
    var icon = props.suffix;
    if (visibilityToggle) {
        var IconProps = {
            onClick: function() {
                return onClickVisibility(!visibility);
            },
            onMouseDown: function(e) {
                return e.preventDefault();
            },
            onMouseUp: function(e) {
                return e.preventDefault();
            }
        };
        if (props.suffix) icon = _index.default.createElement("span", __assign({}, IconProps), props.suffix);
        else {
            var IconComponent = visibility ? _index1.default : _index2.default;
            icon = _index.default.createElement(IconComponent, __assign({}, IconProps));
        }
    }
    return _index.default.createElement(_input.default, __assign({}, (0, _omit.default)(rest, [
        'visibility',
        'defaultVisibility'
    ]), {
        type: visibility ? 'text' : 'password',
        className: classNames,
        ref: ref,
        suffix: icon
    }));
});
Password.displayName = 'Password';
Password.defaultProps = {
    visibilityToggle: true
};
var _default = Password;
},
"../../node_modules/@arco-design/web-react/es/Input/search.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _input = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/input.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconSearch/index.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _index3 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLoading/index.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var Search = _index.default.forwardRef(function(props, ref) {
    var _a;
    var getPrefixCls = (0, _index.useContext)(_index3.ConfigContext).getPrefixCls;
    var _b = __read((0, _useMergeValue.default)('', {
        defaultValue: 'defaultValue' in props ? (0, _input.formatValue)(props.defaultValue, props.maxLength) : undefined,
        value: 'value' in props ? (0, _input.formatValue)(props.value, props.maxLength) : undefined
    }), 2), value = _b[0], setValue = _b[1];
    var className = props.className, style = props.style, placeholder = props.placeholder, disabled = props.disabled, searchButton = props.searchButton, loading = props.loading, defaultValue = props.defaultValue, rest = __rest(props, [
        "className",
        "style",
        "placeholder",
        "disabled",
        "searchButton",
        "loading",
        "defaultValue"
    ]);
    var prefixCls = getPrefixCls('input-search');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-button"] = searchButton, _a), className);
    var onSearch = function(e) {
        !disabled && props.onSearch && props.onSearch(value);
        props.onPressEnter && props.onPressEnter(e);
    };
    return _index.default.createElement(_input.default, __assign({}, (0, _omit.default)(rest, [
        'onSearch'
    ]), {
        disabled: disabled,
        className: classNames,
        style: style,
        ref: ref,
        placeholder: placeholder,
        addAfter: searchButton ? _index.default.createElement(_index1.default, {
            disabled: disabled,
            size: rest.size,
            className: prefixCls + "-btn",
            type: "primary",
            onClick: onSearch,
            loading: loading,
            loadingFixedWidth: true,
            icon: searchButton === true && !loading && _index.default.createElement(_index2.default, null)
        }, searchButton !== true && searchButton) : null,
        suffix: !searchButton && (loading ? _index.default.createElement(_index4.default, null) : _index.default.createElement(_index2.default, {
            onClick: onSearch
        })),
        onChange: function(value, e) {
            setValue(value);
            props.onChange && props.onChange(value, e);
        },
        defaultValue: defaultValue,
        onPressEnter: onSearch
    }));
});
Search.displayName = 'Search';
var _default = Search;
},
"../../node_modules/@arco-design/web-react/es/Input/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Input/textarea.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _autoSizeTextAreaHeight = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/autoSizeTextAreaHeight.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _input = __webpack_require__("../../node_modules/@arco-design/web-react/es/Input/input.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js"));
var _iconhover = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/icon-hover.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _useIsomorphicLayoutEffect = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useIsomorphicLayoutEffect.js"));
var _useComposition = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/useComposition.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var TextArea = function(props, ref) {
    var _a, _b, _c;
    var className = props.className, style = props.style, wrapperStyle = props.wrapperStyle, placeholder = props.placeholder, disabled = props.disabled, error = props.error, propMaxLength = props.maxLength, showWordLimit = props.showWordLimit, allowClear = props.allowClear, onChange = props.onChange, onClear = props.onClear, onKeyDown = props.onKeyDown, onPressEnter = props.onPressEnter, rest = __rest(props, [
        "className",
        "style",
        "wrapperStyle",
        "placeholder",
        "disabled",
        "error",
        "maxLength",
        "showWordLimit",
        "allowClear",
        "onChange",
        "onClear",
        "onKeyDown",
        "onPressEnter"
    ]);
    var wordLimitMaxLength = (0, _is.isObject)(propMaxLength) ? propMaxLength.length : propMaxLength;
    var maxLength = (0, _is.isObject)(propMaxLength) ? propMaxLength.errorOnly ? undefined : propMaxLength.length : propMaxLength;
    var textareaRef = (0, _index.useRef)();
    var _d = __read((0, _index.useState)({}), 2), textAreaStyle = _d[0], setTextAreaStyle = _d[1];
    var _e = __read((0, _useMergeValue.default)('', {
        defaultValue: 'defaultValue' in props ? (0, _input.formatValue)(props.defaultValue, maxLength) : undefined,
        value: 'value' in props ? (0, _input.formatValue)(props.value, maxLength) : undefined
    }), 2), value = _e[0], setValue = _e[1];
    var _f = (0, _useComposition.default)({
        value: value,
        maxLength: maxLength,
        onChange: onChange,
        onKeyDown: onKeyDown,
        onPressEnter: onPressEnter,
        beforeTriggerValueChangeCallback: function(v) {
            if (!('value' in props) && (maxLength === undefined || v.length <= maxLength)) setValue(v);
        }
    }), compositionValue = _f.compositionValue, compositionHandler = _f.compositionHandler, valueChangeHandler = _f.valueChangeHandler, keyDownHandler = _f.keyDownHandler, triggerValueChangeCallback = _f.triggerValueChangeCallback;
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('textarea');
    if (disabled) textAreaStyle.resize = 'none';
    var onFocus = function() {
        if (textareaRef.current && textareaRef.current.focus) {
            if (textareaRef.current.setSelectionRange) {
                var caretPos = textareaRef.current.textContent.length;
                textareaRef.current.setSelectionRange(caretPos, caretPos);
            }
            textareaRef.current.focus();
        }
    };
    var resizeTextAreaHeight = function() {
        var textAreaStyle = (0, _autoSizeTextAreaHeight.default)(props.autoSize, textareaRef.current);
        if (textAreaStyle) setTextAreaStyle(textAreaStyle);
    };
    var handleClearClick = function(e) {
        e.stopPropagation();
        onFocus();
        triggerValueChangeCallback('', e);
        onClear && onClear();
    };
    (0, _useIsomorphicLayoutEffect.default)(function() {
        resizeTextAreaHeight();
    }, [
        value
    ]);
    (0, _index.useImperativeHandle)(ref, function() {
        return {
            dom: textareaRef.current,
            focus: function() {
                onFocus();
            },
            blur: function() {
                textareaRef.current && textareaRef.current.blur && textareaRef.current.blur();
            }
        };
    }, []);
    var valueLength = value ? value.length : 0;
    var withWrapper = wordLimitMaxLength && showWordLimit || allowClear;
    var lengthError = (0, _index.useMemo)(function() {
        if (!maxLength && wordLimitMaxLength) return valueLength > wordLimitMaxLength;
        return false;
    }, [
        valueLength,
        wordLimitMaxLength,
        maxLength
    ]);
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-error"] = error || lengthError, _a[prefixCls + "-disabled"] = disabled, _a), className);
    var TextAreaElement = _index.default.createElement("textarea", __assign({}, (0, _omit.default)(rest, [
        'autoSize',
        'defaultValue'
    ]), {
        maxLength: maxLength,
        ref: textareaRef,
        style: __assign(__assign({}, style), textAreaStyle),
        className: classNames,
        placeholder: placeholder,
        disabled: disabled,
        value: compositionValue || value || '',
        onChange: valueChangeHandler,
        onKeyDown: keyDownHandler,
        onCompositionStart: compositionHandler,
        onCompositionUpdate: compositionHandler,
        onCompositionEnd: compositionHandler
    }));
    if (withWrapper) {
        var showClearIcon = !disabled && allowClear && value;
        return _index.default.createElement("div", {
            className: (0, _classNames.default)(prefixCls + "-wrapper", (_b = {}, _b[prefixCls + "-clear-wrapper"] = allowClear, _b)),
            style: wrapperStyle
        }, TextAreaElement, showClearIcon ? _index.default.createElement(_iconhover.default, {
            className: prefixCls + "-clear-icon"
        }, _index.default.createElement(_index2.default, {
            onClick: handleClearClick,
            onMouseDown: function(e) {
                e.preventDefault();
            }
        })) : null, wordLimitMaxLength && showWordLimit && _index.default.createElement("span", {
            className: (0, _classNames.default)(prefixCls + "-word-limit", (_c = {}, _c[prefixCls + "-word-limit-error"] = lengthError, _c))
        }, valueLength, "/", wordLimitMaxLength));
    }
    return TextAreaElement;
};
var TextAreaRef = _index.default.forwardRef(TextArea);
TextAreaRef.displayName = 'TextArea';
var _default = TextAreaRef;
},
"../../node_modules/@arco-design/web-react/es/Input/useComposition.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useComposition;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _keycode = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/keycode.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function useComposition(_a) {
    var value = _a.value, maxLength = _a.maxLength, onChange = _a.onChange, onKeyDown = _a.onKeyDown, onPressEnter = _a.onPressEnter, beforeTriggerValueChangeCallback = _a.beforeTriggerValueChangeCallback;
    var refIsComposition = (0, _index.useRef)(false);
    var _b = __read((0, _index.useState)(''), 2), compositionValue = _b[0], setCompositionValue = _b[1];
    var triggerValueChangeCallback = function(newValue, e) {
        if (beforeTriggerValueChangeCallback) beforeTriggerValueChangeCallback(newValue);
        if (onChange && newValue !== value && (maxLength === undefined || newValue.length <= maxLength)) onChange(newValue, e);
    };
    return {
        compositionValue: compositionValue,
        triggerValueChangeCallback: triggerValueChangeCallback,
        compositionHandler: function(e) {
            refIsComposition.current = e.type !== 'compositionend';
            if (!refIsComposition.current) {
                setCompositionValue(undefined);
                triggerValueChangeCallback(e.target.value, e);
            }
        },
        valueChangeHandler: function(e) {
            var newValue = e.target.value;
            if (!refIsComposition.current) {
                compositionValue && setCompositionValue(undefined);
                triggerValueChangeCallback(newValue, e);
            } else {
                refIsComposition.current = false;
                setCompositionValue(newValue);
            }
        },
        keyDownHandler: function(e) {
            var keyCode = e.keyCode || e.which;
            if (!refIsComposition.current) {
                onKeyDown && onKeyDown(e);
                if (keyCode === _keycode.Enter.code) onPressEnter && onPressEnter(e);
            }
        }
    };
}
},
"../../node_modules/@arco-design/web-react/es/InputNumber/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _indexes = __webpack_require__.ir(__webpack_require__("../../node_modules/number-precision/build/index.es.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconUp/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDown/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconPlus/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconMinus/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _keycode = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/keycode.js");
var _index5 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index6 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/index.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/InputNumber/utils.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
_indexes.default.enableBoundaryChecking(false);
var AUTO_CHANGE_INTERVAL = 200;
var AUTO_CHANGE_START_DELAY = 1000;
var defaultProps = {
    max: Infinity,
    min: -Infinity,
    step: 1,
    mode: 'embed',
    parser: function(input) {
        return input.replace(/[^\w\.-]+/g, '');
    }
};
function InputNumber(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index5.ConfigContext), getPrefixCls = _b.getPrefixCls, ctxSize = _b.size, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.InputNumber);
    var className = props.className, style = props.style, defaultValue = props.defaultValue, disabled = props.disabled, error = props.error, readOnly = props.readOnly, placeholder = props.placeholder, hideControl = props.hideControl, suffix = props.suffix, prefix = props.prefix, icons = props.icons, mode = props.mode, size = props.size, step = props.step, precision = props.precision, min = props.min, max = props.max, parser = props.parser, formatter = props.formatter, onBlur = props.onBlur, onFocus = props.onFocus, onChange = props.onChange, onKeyDown = props.onKeyDown, rest = __rest(props, [
        "className",
        "style",
        "defaultValue",
        "disabled",
        "error",
        "readOnly",
        "placeholder",
        "hideControl",
        "suffix",
        "prefix",
        "icons",
        "mode",
        "size",
        "step",
        "precision",
        "min",
        "max",
        "parser",
        "formatter",
        "onBlur",
        "onFocus",
        "onChange",
        "onKeyDown"
    ]);
    var prefixCls = getPrefixCls('input-number');
    var mergedSize = size || ctxSize;
    var mergedPrecision = function() {
        if ((0, _is.isNumber)(precision)) {
            var decimal = ("" + step).split('.')[1];
            var stepPrecision = decimal && decimal.length || 0;
            return Math.max(stepPrecision, precision);
        }
        return null;
    }();
    var _c = __read((0, _index.useState)('defaultValue' in props ? defaultValue : undefined), 2), innerValue = _c[0], setInnerValue = _c[1];
    var value = function() {
        var mergedValue = 'value' in props ? props.value : innerValue;
        return typeof mergedValue === 'string' && mergedValue !== '' ? +mergedValue : mergedValue;
    }();
    var _d = __read((0, _index.useState)(''), 2), inputValue = _d[0], setInputValue = _d[1];
    var _e = __read((0, _index.useState)(false), 2), isOutOfRange = _e[0], setIsOutOfRange = _e[1];
    var _f = __read((0, _index.useState)(false), 2), isUserInputting = _f[0], setIsUserInputting = _f[1];
    var isEmptyValue = value === '' || value === undefined || value === null;
    var refAutoTimer = (0, _index.useRef)(null);
    var refInput = (0, _index.useRef)(null);
    var refHasOperateSincePropValueChanged = (0, _index.useRef)(false);
    (0, _index.useImperativeHandle)(ref, function() {
        return refInput.current;
    }, []);
    var setValue = function(newVal) {
        setInnerValue(newVal);
        var newValue = (0, _is.isNumber)(+newVal) ? +newVal : undefined;
        if (newValue !== value) onChange && onChange(newValue);
    };
    var stop = function() {
        refAutoTimer.current && clearTimeout(refAutoTimer.current);
        refAutoTimer.current = null;
    };
    var getLegalValue = (0, _index.useCallback)(function(changedValue) {
        var finalValue = Number(changedValue);
        if (!changedValue && changedValue !== 0) finalValue = undefined;
        else if (!(0, _is.isNumber)(finalValue)) finalValue = changedValue === '-' ? changedValue : '';
        if (finalValue < min) finalValue = min;
        if (finalValue > max) finalValue = max;
        return (0, _is.isNumber)(finalValue) ? (0, _is.isNumber)(mergedPrecision) ? Number((0, _utils.toFixed)(finalValue, mergedPrecision)) : finalValue : undefined;
    }, [
        min,
        max,
        mergedPrecision
    ]);
    (0, _index.useEffect)(function() {
        return function() {
            return stop();
        };
    }, []);
    (0, _index.useEffect)(function() {
        refHasOperateSincePropValueChanged.current = false;
    }, [
        props.value
    ]);
    (0, _index.useEffect)(function() {
        var _isOutOfRange = (0, _is.isNumber)(min) && value < min || (0, _is.isNumber)(max) && value > max;
        if (_isOutOfRange && refHasOperateSincePropValueChanged.current) setValue(getLegalValue(value));
        setIsOutOfRange(_isOutOfRange);
    }, [
        min,
        max,
        value,
        getLegalValue
    ]);
    var handleArrowKey = function(event, method, needRepeat) {
        if (needRepeat === void 0) needRepeat = false;
        event.persist();
        event.preventDefault();
        setIsUserInputting(false);
        if (disabled) return;
        var finalValue = min === -Infinity ? 0 : min;
        if (!isEmptyValue) finalValue = _indexes.default[method](value, step);
        setValue(getLegalValue(finalValue));
        refInput.current && refInput.current.focus();
        if (needRepeat) {
            var isFirstRepeat = refAutoTimer.current === null;
            refAutoTimer.current = setTimeout(function() {
                return event.target.dispatchEvent(event.nativeEvent);
            }, isFirstRepeat ? AUTO_CHANGE_START_DELAY : AUTO_CHANGE_INTERVAL);
        }
    };
    var getDisplayInputValue = function() {
        var _value;
        if (isUserInputting) _value = inputValue;
        else if ((0, _is.isNumber)(value) && (0, _is.isNumber)(mergedPrecision)) _value = (0, _utils.toFixed)(value, mergedPrecision);
        else if (value == null) _value = '';
        else _value = (0, _utils.toSafeString)(value);
        return formatter ? formatter(_value) : _value;
    };
    var inputEventHandlers = {
        onChange: function(value) {
            setIsUserInputting(true);
            var targetValue = value.trim().replace(/。/g, '.');
            targetValue = parser ? parser(targetValue) : targetValue;
            if ((0, _is.isNumber)(+targetValue) || targetValue === '-' || !targetValue || targetValue === '.') {
                var formatValue = getLegalValue(targetValue);
                setInputValue(targetValue);
                setValue(formatValue);
            }
        },
        onKeyDown: function(e) {
            e.stopPropagation();
            var key = e.key;
            if (key === _keycode.ArrowDown.key) handleArrowKey(e, 'minus');
            else if (key === _keycode.ArrowUp.key) handleArrowKey(e, 'plus');
            stop();
            onKeyDown && onKeyDown(e);
        },
        onFocus: function(e) {
            var _a, _b;
            refHasOperateSincePropValueChanged.current = true;
            setInputValue((_b = (_a = refInput.current) === null || _a === void 0 ? void 0 : _a.dom) === null || _b === void 0 ? void 0 : _b.value);
            onFocus && onFocus(e);
        },
        onBlur: function(e) {
            setValue(getLegalValue(value));
            setIsUserInputting(false);
            onBlur && onBlur(e);
        }
    };
    var getControlButtonEventsHandlers = function(method) {
        return readOnly ? {} : {
            onMouseDown: function(e) {
                return handleArrowKey(e, method, true);
            },
            onMouseLeave: stop,
            onMouseUp: stop
        };
    };
    var shouldRenderButton = !hideControl && mode === 'button';
    var shouldRenderLayer = !hideControl && !readOnly && mode === 'embed';
    var renderStepButton = function(method, icon) {
        var _a;
        return _index.default.createElement("div", __assign({
            className: (0, _classNames.default)(prefixCls + "-step-button", (_a = {}, _a[prefixCls + "-step-button-disabled"] = disabled || (method === 'plus' ? +value >= +max : +value <= +min), _a))
        }, getControlButtonEventsHandlers(method)), icon);
    };
    return _index.default.createElement(_index6.default, __assign({
        role: "spinbutton",
        "aria-valuemax": max,
        "aria-valuemin": min,
        "aria-valuenow": value
    }, (0, _omit.default)(rest, [
        'allowClear'
    ]), inputEventHandlers, {
        style: style,
        className: (0, _classNames.default)(prefixCls, prefixCls + "-mode-" + mode, prefixCls + "-size-" + mergedSize, (_a = {}, _a[prefixCls + "-readonly"] = readOnly, _a[prefixCls + "-illegal-value"] = !isEmptyValue && isOutOfRange, _a), className),
        ref: refInput,
        size: mergedSize,
        error: error,
        disabled: disabled,
        readOnly: readOnly,
        value: getDisplayInputValue(),
        placeholder: placeholder,
        prefix: prefix && _index.default.createElement("div", {
            className: prefixCls + "-prefix"
        }, prefix),
        suffix: _index.default.createElement(_index.default.Fragment, null, shouldRenderLayer && _index.default.createElement("div", {
            className: prefixCls + "-step-layer"
        }, renderStepButton('plus', icons && icons.up ? icons.up : _index.default.createElement(_index1.default, null)), renderStepButton('minus', icons && icons.down ? icons.down : _index.default.createElement(_index2.default, null))), suffix && _index.default.createElement("div", {
            className: prefixCls + "-suffix"
        }, suffix)),
        addBefore: shouldRenderButton && renderStepButton('minus', icons && icons.minus ? icons.minus : _index.default.createElement(_index4.default, null)),
        addAfter: shouldRenderButton && renderStepButton('plus', icons && icons.plus ? icons.plus : _index.default.createElement(_index3.default, null))
    }));
}
var InputNumberComponent = _index.default.forwardRef(InputNumber);
InputNumberComponent.displayName = 'InputNumber';
var _default = InputNumberComponent;
},
"../../node_modules/@arco-design/web-react/es/InputNumber/utils.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    toFixed: function() {
        return toFixed;
    },
    toSafeString: function() {
        return toSafeString;
    }
});
var _indexes = __webpack_require__.ir(__webpack_require__("../../node_modules/number-precision/build/index.es.js"));
function toFixed(number, precision) {
    var pow = Math.pow(10, precision);
    return (Math.round(number * pow) / pow).toFixed(precision);
}
function toSafeString(number) {
    var nativeNumberStr = number.toString();
    if (Number.isNaN(+number) || !nativeNumberStr.includes('e')) return nativeNumberStr;
    try {
        var isNegative = number < 0;
        var absoluteValue = Math.abs(+number);
        var digitLength_1 = _indexes.default.digitLength(absoluteValue);
        var integerNum = _indexes.default.float2Fixed(absoluteValue);
        var integerStr_1 = integerNum.toString().replace(/e\+(\d+)/i, function(_, $1) {
            return new Array(+$1).fill(0).join('');
        });
        return "" + (isNegative ? '-' : '') + (digitLength_1 === 0 ? integerStr_1 : integerStr_1.replace(new RegExp("\\d{1," + digitLength_1 + "}$"), function(match) {
            var decimalStr = ("" + new Array(digitLength_1).fill(0).join('') + match).slice(-digitLength_1);
            return (integerStr_1.length <= digitLength_1 ? 0 : '') + "." + decimalStr;
        }));
    } catch (e) {}
    return nativeNumberStr;
}
},
"../../node_modules/@arco-design/web-react/es/Layout/content.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function Content(props, ref) {
    var className = props.className, children = props.children, rest = __rest(props, [
        "className",
        "children"
    ]);
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('layout-content');
    var classNames = (0, _classNames.default)(prefixCls, className);
    return _index.default.createElement("main", __assign({
        ref: ref
    }, rest, {
        className: classNames
    }), children);
}
var contentComponent = (0, _index.forwardRef)(Content);
contentComponent.displayName = 'LayoutContent';
var _default = contentComponent;
},
"../../node_modules/@arco-design/web-react/es/Layout/footer.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function Footer(props, ref) {
    var className = props.className, children = props.children, rest = __rest(props, [
        "className",
        "children"
    ]);
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('layout-footer');
    var classNames = (0, _classNames.default)(prefixCls, className);
    return _index.default.createElement("footer", __assign({
        ref: ref
    }, rest, {
        className: classNames
    }), children);
}
var FooterComponent = (0, _index.forwardRef)(Footer);
FooterComponent.displayName = 'LayoutFooter';
var _default = FooterComponent;
},
"../../node_modules/@arco-design/web-react/es/Layout/header.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function Header(props, ref) {
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var className = props.className, children = props.children, rest = __rest(props, [
        "className",
        "children"
    ]);
    var prefixCls = getPrefixCls('layout-header');
    var classNames = (0, _classNames.default)(prefixCls, className);
    return _index.default.createElement("header", __assign({
        ref: ref
    }, rest, {
        className: classNames
    }), children);
}
var HeaderComponent = (0, _index.forwardRef)(Header);
HeaderComponent.displayName = 'LayoutHeader';
var _default = HeaderComponent;
},
"../../node_modules/@arco-design/web-react/es/Layout/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SiderContext: function() {
        return _sider.SiderContext;
    },
    default: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _sider = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Layout/sider.js"));
var _header = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Layout/header.js"));
var _footer = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Layout/footer.js"));
var _content = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Layout/content.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function Layout(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, {}, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Layout);
    var className = props.className, hasSider = props.hasSider, children = props.children, rest = __rest(props, [
        "className",
        "hasSider",
        "children"
    ]);
    var _c = __read((0, _index.useState)([]), 2), siders = _c[0], setSiders = _c[1];
    var prefixCls = getPrefixCls('layout');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-has-sider"] = typeof hasSider === 'boolean' ? hasSider : siders.length > 0, _a), className);
    return _index.default.createElement("section", __assign({
        ref: ref
    }, rest, {
        className: classNames
    }), _index.default.Children.map(children, function(child) {
        if (child && child.props && child.props.sign === 'sider') return _index.default.cloneElement(child, {
            onSiderMount: function(id) {
                return setSiders(__spreadArray(__spreadArray([], __read(siders), false), [
                    id
                ], false));
            },
            onSiderUnmount: function(id) {
                return setSiders(siders.filter(function(currentId) {
                    return currentId !== id;
                }));
            }
        });
        return child;
    }));
}
var ForwardRefLayout = (0, _index.forwardRef)(Layout);
var LayoutComponent = ForwardRefLayout;
LayoutComponent.displayName = 'Layout';
LayoutComponent.Sider = _sider.default;
LayoutComponent.Header = _header.default;
LayoutComponent.Footer = _footer.default;
LayoutComponent.Content = _content.default;
var _default = LayoutComponent;
},
"../../node_modules/@arco-design/web-react/es/Layout/sider.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    SiderContext: function() {
        return SiderContext;
    },
    default: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLeft/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconRight/index.js"));
var _index3 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/ResizeBox/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _responsiveObserve = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/responsiveObserve.js"));
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var SiderContext = (0, _index.createContext)({
    siderCollapsed: false,
    collapsedWidth: 64
});
var generateId = function() {
    var i = 0;
    return function(prefix) {
        if (prefix === void 0) prefix = '';
        i += 1;
        return "" + prefix + i;
    };
}();
function Sider(props, ref) {
    var _a;
    var _b;
    var children = props.children, className = props.className, style = props.style, _c = props.theme, theme = _c === void 0 ? 'light' : _c, trigger = props.trigger, reverseArrow = props.reverseArrow, _d = props.collapsedWidth, collapsedWidth = _d === void 0 ? 48 : _d, _e = props.width, width = _e === void 0 ? 200 : _e, collapsible = props.collapsible, resizeDirections = props.resizeDirections, onSiderMount = props.onSiderMount, onSiderUnmount = props.onSiderUnmount, breakpoint = props.breakpoint, onBreakpoint = props.onBreakpoint, onCollapse = props.onCollapse, _f = props.resizeBoxProps, resizeBoxProps = _f === void 0 ? {} : _f;
    var uniqueId = generateId('arco-sider-');
    var getPrefixCls = (0, _index.useContext)(_index3.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('layout-sider');
    var _g = __read((0, _useMergeValue.default)(false, {
        value: props.collapsed
    }), 2), collapsed = _g[0], setCollapsed = _g[1];
    var propsWidth = (0, _is.isNumber)(width) ? width + "px" : String(width);
    var _h = __read((0, _index.useState)(propsWidth), 2), siderWidth = _h[0], setSiderWidth = _h[1];
    var refResponsiveHandlerToken = (0, _index.useRef)(null);
    var refStateForResponsiveHandler = (0, _index.useRef)(null);
    refStateForResponsiveHandler.current = {
        breakpoint: breakpoint,
        collapsed: collapsed,
        onCollapse: onCollapse,
        onBreakpoint: onBreakpoint
    };
    (0, _index.useEffect)(function() {
        onSiderMount && onSiderMount(uniqueId);
        if (collapsible && breakpoint in _responsiveObserve.responsiveMap) refResponsiveHandlerToken.current = _responsiveObserve.default.subscribe(function(screens, breakpointChecked) {
            var _a = refStateForResponsiveHandler.current, breakpoint = _a.breakpoint, collapsed = _a.collapsed, onCollapse = _a.onCollapse, onBreakpoint = _a.onBreakpoint;
            if (!breakpointChecked || breakpointChecked === breakpoint) {
                var nextCollapsed = !screens[breakpoint];
                if (nextCollapsed !== collapsed) {
                    setCollapsed(nextCollapsed);
                    onCollapse && onCollapse(nextCollapsed, 'responsive');
                }
                onBreakpoint && onBreakpoint(nextCollapsed);
            }
        });
        return function() {
            onSiderUnmount && onSiderUnmount(uniqueId);
            if (refResponsiveHandlerToken.current) _responsiveObserve.default.unsubscribe(refResponsiveHandlerToken.current);
        };
    }, []);
    (0, _index.useEffect)(function() {
        var _collapsedWidth = (0, _is.isNumber)(collapsedWidth) ? collapsedWidth + "px" : String(collapsedWidth);
        setSiderWidth(collapsed ? _collapsedWidth : propsWidth);
    }, [
        collapsed,
        propsWidth,
        collapsedWidth
    ]);
    var resizable = resizeDirections && (0, _is.isArray)(resizeDirections) || ((_b = resizeBoxProps.directions) === null || _b === void 0 ? void 0 : _b.length);
    var TagName = resizable ? _index4.default : 'aside';
    var renderTrigger = function() {
        var _a;
        var triggerIcon = trigger || (collapsed ? reverseArrow ? _index.default.createElement(_index1.default, null) : _index.default.createElement(_index2.default, null) : reverseArrow ? _index.default.createElement(_index2.default, null) : _index.default.createElement(_index1.default, null));
        return collapsible && trigger !== null ? _index.default.createElement("div", {
            style: {
                width: siderWidth
            },
            className: (0, _classNames.default)(prefixCls + "-trigger", (_a = {}, _a[prefixCls + "-trigger-light"] = theme === 'light', _a)),
            onClick: function() {
                setCollapsed(!collapsed);
                onCollapse && onCollapse(!collapsed, 'clickTrigger');
            }
        }, triggerIcon) : null;
    };
    var resizeProps = (0, _index.useMemo)(function() {
        if (resizable) return __assign(__assign({
            component: 'aside',
            onMoving: function(_, _a) {
                var currentWidth = _a.width;
                setSiderWidth(currentWidth);
            }
        }, resizeBoxProps), {
            width: siderWidth,
            directions: resizeDirections
        });
        return {};
    }, [
        resizable,
        resizeDirections,
        siderWidth,
        resizeBoxProps
    ]);
    return _index.default.createElement(SiderContext.Provider, {
        value: {
            siderCollapsed: collapsed,
            collapsedWidth: collapsedWidth
        }
    }, _index.default.createElement(TagName, __assign({
        ref: ref,
        style: __assign({
            width: siderWidth
        }, style),
        className: (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-light"] = theme === 'light', _a[prefixCls + "-has-trigger"] = trigger !== null && collapsible, _a[prefixCls + "-collapsed"] = collapsed, _a), className)
    }, resizeProps), _index.default.createElement("div", {
        className: prefixCls + "-children"
    }, children), renderTrigger()));
}
var SiderComponent = (0, _index.forwardRef)(Sider);
SiderComponent.defaultProps = {
    sign: 'sider'
};
SiderComponent.displayName = 'LayoutSider';
var _default = SiderComponent;
},
"../../node_modules/@arco-design/web-react/es/Link/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLink/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultProps = {
    hoverable: true
};
function Link(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Link);
    var className = props.className, style = props.style, children = props.children, icon = props.icon, status = props.status, disabled = props.disabled, hoverable = props.hoverable, rest = __rest(props, [
        "className",
        "style",
        "children",
        "icon",
        "status",
        "disabled",
        "hoverable"
    ]);
    var prefixCls = getPrefixCls('link');
    var TagWrapper = 'href' in props ? 'a' : 'span';
    return _index.default.createElement(TagWrapper, __assign({
        className: (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-disabled"] = disabled, _a[prefixCls + "-is-" + status] = status, _a[prefixCls + "-with-icon"] = icon, _a[prefixCls + "-hoverless"] = !hoverable, _a), className),
        ref: ref
    }, rest, {
        style: style,
        onClick: function(e) {
            if (disabled) {
                e.preventDefault();
                e.stopPropagation();
            } else props.onClick && props.onClick(e);
        }
    }), icon ? _index.default.createElement("span", {
        className: prefixCls + "-icon"
    }, icon === true ? _index.default.createElement(_index1.default, null) : icon) : null, children);
}
var LinkRef = (0, _index.forwardRef)(Link);
LinkRef.displayName = 'Link';
var _default = LinkRef;
},
"../../node_modules/@arco-design/web-react/es/Link/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Link/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Menu/context.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var MenuContext = (0, _index.createContext)({});
var _default = MenuContext;
},
"../../node_modules/@arco-design/web-react/es/Menu/hotkey.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useHotkeyListener: function() {
        return useHotkeyListener;
    },
    useHotkeyHandler: function() {
        return useHotkeyHandler;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var _useIsFirstRender = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useIsFirstRender.js"));
var _keycode = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/keycode.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var INITIAL_HOTKEY_INFO = {
    type: null,
    update: false,
    activeKeyPath: []
};
var useHotkeyListener = function(_a) {
    var menuInfoMap = _a.menuInfoMap, openKeys = _a.openKeys, selectedKeys = _a.selectedKeys, needPause = _a.needPause;
    var _b = __read((0, _index.useState)(INITIAL_HOTKEY_INFO), 2), hotkeyInfo = _b[0], setHokeyInfo = _b[1];
    return {
        reset: function(activeKey) {
            var _a;
            var keyPath = activeKey && ((_a = menuInfoMap[activeKey]) === null || _a === void 0 ? void 0 : _a.keyPath);
            setHokeyInfo(__assign(__assign({}, INITIAL_HOTKEY_INFO), {
                activeKeyPath: keyPath || []
            }));
        },
        hotkeyInfo: hotkeyInfo,
        listener: function(event) {
            if (typeof needPause === 'function' && needPause()) return;
            var keyCode = event.keyCode || event.which;
            var activeKey = hotkeyInfo.activeKeyPath[0] || selectedKeys && selectedKeys[0];
            if (keyCode === _keycode.ArrowUp.code || keyCode === _keycode.ArrowDown.code) event.preventDefault();
            if (!menuInfoMap[activeKey]) {
                if ([
                    _keycode.ArrowUp.code,
                    _keycode.ArrowDown.code,
                    _keycode.ArrowLeft.code,
                    _keycode.ArrowRight.code
                ].indexOf(keyCode) > -1) {
                    var activeKey_1 = Object.keys(menuInfoMap)[0];
                    setHokeyInfo(__assign(__assign({}, hotkeyInfo), {
                        update: false,
                        activeKeyPath: menuInfoMap[activeKey_1].keyPath
                    }));
                }
                return;
            }
            var walkSiblings = function(reverse) {
                var getKeyNext = function(base) {
                    var _a = menuInfoMap[base], firstChild = _a.firstChild, next = _a.next, keyPath = _a.keyPath;
                    var getParentNext = function(keyPath) {
                        var parent = keyPath[1] && menuInfoMap[keyPath[1]];
                        if (parent) return parent.next || getParentNext(parent.keyPath);
                    };
                    return firstChild && openKeys.indexOf(base) > -1 ? firstChild : next || getParentNext(keyPath);
                };
                var getKeyPrev = function(base) {
                    var result = null;
                    var _a = menuInfoMap[base], prev = _a.prev, keyPath = _a.keyPath;
                    if (prev) {
                        result = prev;
                        var info = menuInfoMap[prev];
                        while(info.lastChild && openKeys.indexOf(result) > -1){
                            result = info.lastChild;
                            info = menuInfoMap[info.lastChild];
                        }
                    } else result = keyPath[1];
                    return result;
                };
                var getNewActiveKey = reverse ? getKeyPrev : getKeyNext;
                var newActiveKey = getNewActiveKey(activeKey);
                var newActiveItemInfo = menuInfoMap[newActiveKey];
                while(newActiveItemInfo && newActiveItemInfo.disabled){
                    newActiveKey = getNewActiveKey(newActiveKey);
                    newActiveItemInfo = menuInfoMap[newActiveKey];
                }
                if (newActiveItemInfo) setHokeyInfo({
                    type: 'sibling',
                    update: false,
                    activeKeyPath: newActiveItemInfo.keyPath
                });
            };
            var walkGenerations = function(reverse) {
                var activeItemInfo = menuInfoMap[activeKey];
                if (activeItemInfo) {
                    var newActiveKey = reverse ? activeItemInfo.keyPath[1] : activeItemInfo.firstChild;
                    var newActiveItemInfo = menuInfoMap[newActiveKey];
                    if (newActiveItemInfo) setHokeyInfo({
                        type: 'generation',
                        update: true,
                        activeKeyPath: newActiveItemInfo.keyPath
                    });
                }
            };
            switch(keyCode){
                case _keycode.ArrowUp.code:
                    walkSiblings(true);
                    break;
                case _keycode.ArrowDown.code:
                    walkSiblings();
                    break;
                case _keycode.ArrowLeft.code:
                    walkGenerations(true);
                    break;
                case _keycode.ArrowRight.code:
                    walkGenerations();
                    break;
                case _keycode.Enter.code:
                    setHokeyInfo(__assign(__assign({}, hotkeyInfo), {
                        type: 'enter',
                        update: true
                    }));
                    break;
                case _keycode.Esc.code:
                    setHokeyInfo(INITIAL_HOTKEY_INFO);
                    break;
                default:
            }
        }
    };
};
var useHotkeyHandler = function(key, handler) {
    var hotkeyInfo = (0, _index.useContext)(_context.default).hotkeyInfo;
    var isFirstRender = (0, _useIsFirstRender.default)();
    var isActive = key && key === hotkeyInfo.activeKeyPath[0];
    (0, _index.useEffect)(function() {
        if (!isFirstRender && hotkeyInfo.update) handler(isActive, hotkeyInfo.type);
    }, [
        hotkeyInfo
    ]);
    return isActive;
};
},
"../../node_modules/@arco-design/web-react/es/Menu/indent.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return MenuIndent;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function MenuIndent(props) {
    var prefixCls = props.prefixCls, levelIndent = props.levelIndent;
    var collapse = (0, _index.useContext)(_context.default).collapse;
    var level = props.level - 1;
    return !collapse && level > 0 ? _index.default.createElement("span", null, __spreadArray([], __read(new Array(level)), false).map(function(_, index) {
        return _index.default.createElement("span", {
            key: index,
            className: prefixCls + "-indent",
            style: {
                width: levelIndent
            }
        });
    })) : null;
}
},
"../../node_modules/@arco-design/web-react/es/Menu/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _item = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/item.js"));
var _itemgroup = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/item-group.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/sub-menu/index.js"));
var _overflowwrap = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/overflow-wrap.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/util.js");
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index3 = __webpack_require__("../../node_modules/@arco-design/web-react/es/Layout/index.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconMenuFold/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconMenuUnfold/index.js"));
var _useForceUpdate = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useForceUpdate.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var _hotkey = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/hotkey.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var globalMenuIndex = 0;
var DEFAULT_THEME = 'light';
var defaultProps = {
    mode: 'vertical',
    selectable: true,
    ellipsis: true
};
function Menu(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Menu);
    var style = props.style, children = props.children, className = props.className, menuPrefixCls = props.prefixCls, mode = props.mode, propTheme = props.theme, icons = props.icons, levelIndent = props.levelIndent, propCollapse = props.collapse, inDropdown = props.inDropdown, selectable = props.selectable, triggerProps = props.triggerProps, tooltipProps = props.tooltipProps, ellipsis = props.ellipsis, accordion = props.accordion, autoOpen = props.autoOpen, autoScrollIntoView = props.autoScrollIntoView, scrollConfig = props.scrollConfig, hasCollapseButton = props.hasCollapseButton, defaultOpenKeys = props.defaultOpenKeys, defaultSelectedKeys = props.defaultSelectedKeys, propOpenKeys = props.openKeys, propSelectedKeys = props.selectedKeys, onClickSubMenu = props.onClickSubMenu, onClickMenuItem = props.onClickMenuItem, onCollapseChange = props.onCollapseChange, rest = __rest(props, [
        "style",
        "children",
        "className",
        "prefixCls",
        "mode",
        "theme",
        "icons",
        "levelIndent",
        "collapse",
        "inDropdown",
        "selectable",
        "triggerProps",
        "tooltipProps",
        "ellipsis",
        "accordion",
        "autoOpen",
        "autoScrollIntoView",
        "scrollConfig",
        "hasCollapseButton",
        "defaultOpenKeys",
        "defaultSelectedKeys",
        "openKeys",
        "selectedKeys",
        "onClickSubMenu",
        "onClickMenuItem",
        "onCollapseChange"
    ]);
    var _c = __read((0, _useMergeValue.default)([], {
        defaultValue: defaultOpenKeys,
        value: propOpenKeys
    }), 2), openKeys = _c[0], setOpenKeys = _c[1];
    var _d = __read((0, _useMergeValue.default)([], {
        defaultValue: defaultSelectedKeys,
        value: propSelectedKeys
    }), 2), selectedKeys = _d[0], setSelectedKeys = _d[1];
    var _e = __read((0, _useMergeValue.default)(false, {
        value: propCollapse
    }), 2), collapse = _e[0], setCollapse = _e[1];
    var menuContext = (0, _index.useContext)(_context.default);
    var siderCollapsed = (0, _index.useContext)(_index3.SiderContext).siderCollapsed;
    var prefixCls = menuPrefixCls || getPrefixCls('menu');
    var mergedCollapse = siderCollapsed || collapse || inDropdown || mode === 'popButton';
    var theme = propTheme || menuContext.theme || DEFAULT_THEME;
    var refSubMenuKeys = (0, _index.useRef)([]);
    var refPrevSubMenuKeys = (0, _index.useRef)([]);
    var forceUpdate = (0, _useForceUpdate.default)();
    var menuInfoMap = (0, _index.useMemo)(function() {
        return (0, _util.generateInfoMap)(children);
    }, [
        children
    ]);
    var instanceId = (0, _index.useMemo)(function() {
        if (rest.id) return rest.id;
        var id = prefixCls + "-" + globalMenuIndex;
        globalMenuIndex++;
        return id;
    }, [
        rest.id
    ]);
    var _f = (0, _hotkey.useHotkeyListener)({
        openKeys: openKeys,
        selectedKeys: selectedKeys,
        menuInfoMap: menuInfoMap,
        needPause: function() {
            return mergedCollapse;
        }
    }), hotkeyInfo = _f.hotkeyInfo, hotkeyListener = _f.listener, resetHotkeyInfo = _f.reset;
    (0, _index.useEffect)(function() {
        var validOpenKeys = openKeys.filter(function(key) {
            return refSubMenuKeys.current.indexOf(key) !== -1;
        });
        if (autoOpen) {
            var keysAdded = refSubMenuKeys.current.filter(function(key) {
                return refPrevSubMenuKeys.current.indexOf(key) === -1;
            });
            validOpenKeys = openKeys.concat(keysAdded);
        }
        setOpenKeys(accordion ? validOpenKeys.slice(0, 1) : validOpenKeys);
        refPrevSubMenuKeys.current = refSubMenuKeys.current.slice();
    }, [
        refSubMenuKeys.current.toString()
    ]);
    var mergedHasCollapseButton = mode !== 'horizontal' && mode !== 'popButton' && !inDropdown && hasCollapseButton;
    var renderChildren = function() {
        var childrenList = (0, _util.processChildren)(children, {
            level: 1
        });
        var collapseIcon = collapse ? icons && icons.collapseActive || _index.default.createElement(_index5.default, null) : icons && icons.collapseDefault || _index.default.createElement(_index4.default, null);
        return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement("div", {
            className: prefixCls + "-inner"
        }, mode === 'horizontal' && ellipsis !== false ? _index.default.createElement(_overflowwrap.default, null, childrenList) : childrenList), mergedHasCollapseButton && _index.default.createElement("div", {
            tabIndex: 0,
            role: "button",
            "aria-controls": instanceId,
            "aria-expanded": !collapse,
            className: prefixCls + "-collapse-button",
            onClick: function() {
                var newCollapse = !collapse;
                setCollapse(newCollapse);
                onCollapseChange && onCollapseChange(newCollapse);
            }
        }, collapseIcon));
    };
    var usedStyle = __assign({}, style);
    if (mergedCollapse && !inDropdown) delete usedStyle.width;
    return _index.default.createElement("div", __assign({
        id: mergedHasCollapseButton ? instanceId : undefined,
        role: "menu",
        tabIndex: 1
    }, (0, _omit.default)(rest, [
        'isMenu'
    ]), {
        ref: ref,
        style: usedStyle,
        className: (0, _classNames.default)(prefixCls, prefixCls + "-" + theme, prefixCls + "-" + (mode === 'horizontal' ? 'horizontal' : 'vertical'), (_a = {}, _a[prefixCls + "-collapse"] = mergedCollapse, _a[prefixCls + "-pop"] = mode === 'pop' || mergedCollapse, _a[prefixCls + "-pop-button"] = mode === 'popButton', _a), className),
        onKeyDown: hotkeyListener
    }), _index.default.createElement(_context.default.Provider, {
        value: {
            mode: mode,
            theme: theme,
            collapse: mergedCollapse,
            levelIndent: levelIndent,
            inDropdown: inDropdown,
            selectedKeys: selectedKeys,
            openKeys: openKeys,
            icons: icons,
            triggerProps: triggerProps,
            tooltipProps: tooltipProps,
            autoScrollIntoView: autoScrollIntoView,
            scrollConfig: scrollConfig,
            id: instanceId,
            prefixCls: prefixCls,
            hotkeyInfo: 'hotkeyInfo' in menuContext ? menuContext.hotkeyInfo : hotkeyInfo,
            resetHotkeyInfo: resetHotkeyInfo,
            collectInlineMenuKeys: function(key, unmount) {
                if (unmount) refSubMenuKeys.current = refSubMenuKeys.current.filter(function(x) {
                    return x !== key;
                });
                else refSubMenuKeys.current.push(key);
                forceUpdate();
            },
            onClickMenuItem: function(key, event) {
                var _a;
                selectable && setSelectedKeys([
                    key
                ]);
                onClickMenuItem && onClickMenuItem(key, event, (_a = menuInfoMap[key]) === null || _a === void 0 ? void 0 : _a.keyPath);
            },
            onClickSubMenu: function(key, level, type) {
                var _a;
                var newOpenKeys = __spreadArray([], __read(openKeys), false);
                if (type === 'inline') {
                    if ((openKeys === null || openKeys === void 0 ? void 0 : openKeys.indexOf(key)) > -1) {
                        if (accordion && level === 1) newOpenKeys = [];
                        else newOpenKeys = openKeys.filter(function(item) {
                            return item !== key;
                        });
                    } else if (accordion && level === 1) newOpenKeys = [
                        key
                    ];
                    else newOpenKeys = openKeys.concat([
                        key
                    ]);
                }
                setOpenKeys(newOpenKeys);
                onClickSubMenu && onClickSubMenu(key, newOpenKeys, (_a = menuInfoMap[key]) === null || _a === void 0 ? void 0 : _a.keyPath);
            }
        }
    }, renderChildren()));
}
var ForwardRefMenu = (0, _index.forwardRef)(Menu);
var MenuComponent = ForwardRefMenu;
MenuComponent.displayName = 'Menu';
MenuComponent.Item = _item.default;
MenuComponent.SubMenu = _index1.default;
MenuComponent.ItemGroup = _itemgroup.default;
MenuComponent.defaultProps = {
    isMenu: true
};
var _default = MenuComponent;
},
"../../node_modules/@arco-design/web-react/es/Menu/item-group.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/util.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var _indent = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/indent.js"));
function ItemGroup(props, ref) {
    var children = props.children, title = props.title, level = props.level, className = props.className, style = props.style;
    var _a = (0, _index.useContext)(_context.default), prefixCls = _a.prefixCls, levelIndent = _a.levelIndent;
    var childrenLevel = level === 1 ? level + 1 : level;
    var childrenList = (0, _util.processChildren)(children, {
        level: childrenLevel
    });
    return _index.default.createElement("div", {
        ref: ref,
        className: (0, _classNames.default)(prefixCls + "-group", className),
        style: style
    }, _index.default.createElement("div", {
        className: prefixCls + "-group-title"
    }, _index.default.createElement(_indent.default, {
        level: level,
        prefixCls: prefixCls,
        levelIndent: levelIndent
    }), _index.default.createElement("span", null, title)), childrenList);
}
var ForwardRefItemGroup = (0, _index.forwardRef)(ItemGroup);
var ItemGroupComponent = ForwardRefItemGroup;
ItemGroupComponent.displayName = 'MenuItemGroup';
ItemGroupComponent.menuType = 'MenuGroup';
var _default = ItemGroupComponent;
},
"../../node_modules/@arco-design/web-react/es/Menu/item.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/scroll-into-view-if-needed/es/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/index.js"));
var _useIsFirstRender = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useIsFirstRender.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var _indent = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/indent.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _hotkey = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/hotkey.js");
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/util.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function Item(props, ref) {
    var _a;
    var _key = props._key, children = props.children, level = props.level, disabled = props.disabled, className = props.className, style = props.style, _b = props.wrapper, WrapperTagName = _b === void 0 ? 'div' : _b, onClick = props.onClick, rest = __rest(props, [
        "_key",
        "children",
        "level",
        "disabled",
        "className",
        "style",
        "wrapper",
        "onClick"
    ]);
    var _c = (0, _index.useContext)(_context.default), prefixCls = _c.prefixCls, mode = _c.mode, collapse = _c.collapse, inDropdown = _c.inDropdown, levelIndent = _c.levelIndent, selectedKeys = _c.selectedKeys, autoScrollIntoView = _c.autoScrollIntoView, scrollConfig = _c.scrollConfig, tooltipProps = _c.tooltipProps, resetHotkeyInfo = _c.resetHotkeyInfo, onClickMenuItem = _c.onClickMenuItem;
    var refElement = (0, _index.useRef)(null);
    var isFirstRender = (0, _useIsFirstRender.default)();
    var needTextIndent = mode === 'vertical' && level > 1;
    var needTooltip = collapse && !inDropdown && level === 1;
    var isSelected = selectedKeys && ~selectedKeys.indexOf(_key);
    var isActive = (0, _hotkey.useHotkeyHandler)(_key, function(isActive, type) {
        if (isActive && type === 'enter') {
            onClickMenuItem(_key, null);
            resetHotkeyInfo();
        }
    });
    (0, _index.useEffect)(function() {
        var shouldScroll = isActive || isSelected && autoScrollIntoView;
        if (refElement.current && shouldScroll) setTimeout(function() {
            (0, _index1.default)(refElement.current, __assign({
                behavior: 'smooth',
                block: 'start',
                scrollMode: 'if-needed',
                boundary: document.body
            }, scrollConfig));
        }, isFirstRender ? 500 : 0);
    }, [
        isActive,
        isSelected,
        autoScrollIntoView
    ]);
    var itemElement = _index.default.createElement(WrapperTagName, __assign({
        role: "menuitem",
        ref: function(_ref) {
            ref = _ref;
            refElement.current = ref;
        },
        style: style,
        className: (0, _classNames.default)(prefixCls + "-item", (_a = {}, _a[prefixCls + "-disabled"] = disabled, _a[prefixCls + "-active"] = isActive, _a[prefixCls + "-selected"] = isSelected, _a[prefixCls + "-item-indented"] = needTextIndent && !collapse, _a), className),
        onClick: function(event) {
            if (!disabled) {
                onClickMenuItem(_key, event);
                onClick && onClick(event);
                resetHotkeyInfo();
            }
        }
    }, (0, _omit.default)(rest, [
        'key',
        '_key'
    ].concat(_util.PROPS_NEED_TO_BE_PASSED_IN_SUBMENU))), needTextIndent && !collapse ? _index.default.createElement(_index.default.Fragment, null, _index.default.createElement(_indent.default, {
        prefixCls: prefixCls,
        levelIndent: levelIndent,
        level: level
    }), _index.default.createElement("span", {
        className: prefixCls + "-item-inner",
        style: {
            display: 'block'
        }
    }, children)) : children, isSelected && mode === 'horizontal' ? _index.default.createElement("div", {
        className: prefixCls + "-selected-label"
    }) : null);
    return needTooltip ? _index.default.createElement(_index2.default, __assign({
        trigger: "hover",
        content: _index.default.createElement("span", null, children),
        position: "right",
        triggerProps: __assign({
            className: prefixCls + "-item-tooltip"
        }, (tooltipProps === null || tooltipProps === void 0 ? void 0 : tooltipProps.triggerProps) || {})
    }, (0, _omit.default)(tooltipProps, [
        'triggerProps'
    ])), itemElement) : itemElement;
}
var ForwardRefItem = (0, _index.forwardRef)(Item);
var ItemComponent = ForwardRefItem;
ItemComponent.displayName = 'MenuItem';
ItemComponent.menuType = 'MenuItem';
var _default = ItemComponent;
},
"../../node_modules/@arco-design/web-react/es/Menu/overflow-wrap.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _ResizeObserveres = __webpack_require__.ir(__webpack_require__("../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/sub-menu/index.js"));
var _style = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/style.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var OVERFLOW_THRESHOLD = 10;
function getNodeWidth(node) {
    return node && +node.getBoundingClientRect().width.toFixed(2);
}
function translatePxToNumber(str) {
    var result = Number(str.replace('px', ''));
    return isNaN(result) ? 0 : result;
}
var OverflowWrap = function(props) {
    var children = props.children;
    var prefixCls = (0, _index.useContext)(_context.default).prefixCls;
    var refUl = (0, _index.useRef)(null);
    var refResizeObserver = (0, _index.useRef)(null);
    var _a = __read((0, _index.useState)(null), 2), lastVisibleIndex = _a[0], setLastVisibleIndex = _a[1];
    var overflowSubMenuClass = prefixCls + "-overflow-sub-menu";
    var overflowMenuItemClass = prefixCls + "-overflow-hidden-menu-item";
    var overflowSubMenuMirrorClass = prefixCls + "-overflow-sub-menu-mirror";
    (0, _index.useEffect)(function() {
        var ulElement = refUl.current;
        computeLastVisibleIndex();
        refResizeObserver.current = new _ResizeObserveres.default(function(entries) {
            entries.forEach(computeLastVisibleIndex);
        });
        refResizeObserver.current.observe(ulElement);
        return function() {
            if (refResizeObserver.current) refResizeObserver.current.disconnect();
        };
    }, [
        children
    ]);
    function computeLastVisibleIndex() {
        if (!refUl.current) return;
        var ulElement = refUl.current;
        var maxWidth = getNodeWidth(ulElement) - OVERFLOW_THRESHOLD;
        var childNodeList = [].slice.call(ulElement.children);
        var menuItemIndex = 0;
        var currentItemRight = 0;
        var overflowSubMenuWidth = 0;
        for(var i = 0; i < childNodeList.length; i++){
            var node = childNodeList[i];
            var classNames = node.className.split(' ');
            var isOverflowSubMenu = classNames.indexOf(overflowSubMenuClass) > -1;
            var isOverflowSubMenuMirror = classNames.indexOf(overflowSubMenuMirrorClass) > -1;
            if (isOverflowSubMenu) continue;
            var nodeWidth = getNodeWidth(node) + translatePxToNumber((0, _style.getStyle)(node, 'marginLeft')) + translatePxToNumber((0, _style.getStyle)(node, 'marginRight'));
            if (isOverflowSubMenuMirror) {
                overflowSubMenuWidth = nodeWidth;
                continue;
            }
            currentItemRight += nodeWidth;
            if (currentItemRight > maxWidth) {
                setLastVisibleIndex(menuItemIndex - (currentItemRight - nodeWidth + overflowSubMenuWidth <= maxWidth ? 1 : 2));
                return;
            }
            menuItemIndex++;
        }
        setLastVisibleIndex(null);
    }
    var renderOverflowSubMenu = function(children, isMirror) {
        if (isMirror === void 0) isMirror = false;
        return _index.default.createElement(_index1.default, __assign({
            title: _index.default.createElement("span", null, "\u00B7\u00B7\u00B7"),
            key: "arco-menu-overflow-sub-menu" + (isMirror ? '-mirror' : ''),
            className: isMirror ? overflowSubMenuMirrorClass : overflowSubMenuClass
        }, props, {
            children: children
        }));
    };
    var renderChildren = function() {
        var overflowSubMenu = null;
        var overflowSubMenuMirror = renderOverflowSubMenu(null, true);
        var originMenuItems = _index.default.Children.map(children, function(child, index) {
            var item = child;
            if (lastVisibleIndex !== null) {
                if (index > lastVisibleIndex) item = _index.default.cloneElement(child, {
                    className: overflowMenuItemClass
                });
                if (index === lastVisibleIndex + 1) {
                    var overflowedItems = _index.default.Children.toArray(children).slice(lastVisibleIndex + 1).map(function(child) {
                        return _index.default.cloneElement(child, {
                            key: child.props._key
                        });
                    });
                    overflowSubMenu = renderOverflowSubMenu(overflowedItems);
                }
            }
            return item;
        });
        return __spreadArray(__spreadArray([
            overflowSubMenuMirror
        ], __read(originMenuItems), false), [
            overflowSubMenu
        ], false);
    };
    return _index.default.createElement("div", {
        className: prefixCls + "-overflow-wrap",
        ref: refUl
    }, renderChildren());
};
var _default = OverflowWrap;
},
"../../node_modules/@arco-design/web-react/es/Menu/sub-menu/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _inline = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/sub-menu/inline.js"));
var _pop = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/sub-menu/pop.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function SubMenu(props, ref) {
    var children = props.children, popup = props.popup, level = props.level;
    var _a = (0, _index.useContext)(_context.default), mode = _a.mode, collapse = _a.collapse, inDropdown = _a.inDropdown, collectInlineMenuKeys = _a.collectInlineMenuKeys;
    var forcePopup = !!(typeof popup === 'function' ? popup(level) : popup);
    var mergedPopup = forcePopup || collapse || inDropdown || mode !== 'vertical';
    var MergedMenu = mergedPopup ? _pop.default : _inline.default;
    (0, _index.useEffect)(function() {
        collectInlineMenuKeys(props._key);
        return function() {
            collectInlineMenuKeys(props._key, true);
        };
    }, []);
    return _index.default.createElement(MergedMenu, __assign({
        forwardedRef: ref
    }, props), children);
}
var ForwardRefSubMenu = (0, _index.forwardRef)(SubMenu);
var SubMenuComponent = ForwardRefSubMenu;
SubMenuComponent.displayName = 'SubMenu';
SubMenuComponent.menuType = 'SubMenu';
var _default = SubMenuComponent;
},
"../../node_modules/@arco-design/web-react/es/Menu/sub-menu/inline.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__("../../node_modules/react-transition-group/esm/index.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _useStateWithPromise = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useStateWithPromise.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDown/index.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/util.js");
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var _indent = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/indent.js"));
var _hotkey = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/hotkey.js");
var _pick = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pick.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var globalInlineSubMenuIndex = 0;
var SubMenuInline = function(props) {
    var _a;
    var _key = props._key, children = props.children, style = props.style, className = props.className, title = props.title, level = props.level, forwardedRef = props.forwardedRef, selectable = props.selectable, rest = __rest(props, [
        "_key",
        "children",
        "style",
        "className",
        "title",
        "level",
        "forwardedRef",
        "selectable"
    ]);
    var _b = (0, _index.useContext)(_context.default), menuId = _b.id, prefixCls = _b.prefixCls, levelIndent = _b.levelIndent, _c = _b.openKeys, openKeys = _c === void 0 ? [] : _c, _d = _b.selectedKeys, selectedKeys = _d === void 0 ? [] : _d, icons = _b.icons, onClickSubMenu = _b.onClickSubMenu, onClickMenuItem = _b.onClickMenuItem;
    var baseClassName = prefixCls + "-inline";
    var isOpen = (openKeys === null || openKeys === void 0 ? void 0 : openKeys.indexOf(_key)) > -1;
    var isSelected = selectable && selectedKeys.indexOf(props._key) > -1 || (0, _util.isChildrenSelected)(children, selectedKeys);
    var _e = __read((0, _useStateWithPromise.default)(isOpen ? 'auto' : 0), 2), height = _e[0], setHeight = _e[1];
    var subMenuClickHandler = function(event) {
        onClickSubMenu(_key, level, 'inline');
        selectable && onClickMenuItem(_key, event);
    };
    var isActive = (0, _hotkey.useHotkeyHandler)(_key, function(isActive, type) {
        return isActive && type === 'enter' && subMenuClickHandler(null);
    });
    var instanceId = (0, _index.useMemo)(function() {
        var id = menuId + "-submenu-inline-" + globalInlineSubMenuIndex;
        globalInlineSubMenuIndex++;
        return id;
    }, []);
    var childrenList = (0, _util.processChildren)(children, __assign(__assign({}, (0, _pick.default)(rest, _util.PROPS_NEED_TO_BE_PASSED_IN_SUBMENU)), {
        level: level + 1,
        selectable: selectable
    }));
    var header = _index.default.createElement("div", {
        "aria-expanded": isOpen,
        "aria-controls": instanceId,
        className: (0, _classNames.default)(baseClassName + "-header", (_a = {}, _a[prefixCls + "-active"] = isActive, _a[prefixCls + "-selected"] = isSelected, _a)),
        onClick: subMenuClickHandler
    }, _index.default.createElement(_indent.default, {
        level: level,
        prefixCls: prefixCls,
        levelIndent: levelIndent
    }), _index.default.createElement("span", null, title), _index.default.createElement("span", {
        className: prefixCls + "-icon-suffix " + (isOpen ? 'is-open' : '')
    }, icons && icons.horizontalArrowDown ? icons.horizontalArrowDown : _index.default.createElement(_index2.default, null)));
    var content = _index.default.createElement("div", {
        id: instanceId,
        className: (0, _classNames.default)(baseClassName + "-content"),
        style: {
            height: height
        }
    }, childrenList);
    return _index.default.createElement("div", {
        ref: forwardedRef,
        className: (0, _classNames.default)(baseClassName, className),
        style: style
    }, header, _index.default.createElement(_index1.CSSTransition, {
        in: isOpen,
        timeout: 200,
        classNames: baseClassName,
        unmountOnExit: false,
        onEnter: function(element) {
            setHeight(0).then(function() {
                setHeight(element.scrollHeight);
            });
        },
        onEntered: function() {
            setHeight('auto');
        },
        onExit: function(element) {
            setHeight(element.scrollHeight).then(function() {
                setHeight(0);
            });
        }
    }, content));
};
var _default = SubMenuInline;
},
"../../node_modules/@arco-design/web-react/es/Menu/sub-menu/pop.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconRight/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDown/index.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/util.js");
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Dropdown/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/index.js"));
var _indent = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/indent.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/context.js"));
var _hotkey = __webpack_require__("../../node_modules/@arco-design/web-react/es/Menu/hotkey.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var globalPopSubMenuIndex = 0;
var SubMenuPop = function(props) {
    var _a;
    var _key = props._key, children = props.children, style = props.style, className = props.className, title = props.title, level = props.level, selectable = props.selectable, forwardedRef = props.forwardedRef, propTriggerProps = props.triggerProps;
    var _b = (0, _index.useContext)(_context.default), menuId = _b.id, prefixCls = _b.prefixCls, mode = _b.mode, inDropdown = _b.inDropdown, levelIndent = _b.levelIndent, hotkeyInfo = _b.hotkeyInfo, _c = _b.selectedKeys, selectedKeys = _c === void 0 ? [] : _c, icons = _b.icons, contextTriggerProps = _b.triggerProps, onClickSubMenu = _b.onClickSubMenu, onClickMenuItem = _b.onClickMenuItem;
    var triggerProps = __assign(__assign({}, contextTriggerProps), propTriggerProps);
    var _d = __read((0, _index.useState)(false), 2), popupVisible = _d[0], setPopupVisible = _d[1];
    var baseClassName = prefixCls + "-pop";
    var isSelected = selectable && selectedKeys.indexOf(props._key) > -1;
    var needPopOnBottom = mode === 'horizontal' && !inDropdown;
    var isActive = (0, _hotkey.useHotkeyHandler)(_key, function() {
        setPopupVisible(hotkeyInfo.activeKeyPath.indexOf(_key) > 0);
    });
    var instanceId = (0, _index.useMemo)(function() {
        var id = menuId + "-submenu-pop-" + globalPopSubMenuIndex;
        globalPopSubMenuIndex++;
        return id;
    }, []);
    var renderSuffix = function() {
        var MergedIconRight = icons && icons.popArrowRight ? icons.popArrowRight : _index.default.createElement(_index1.default, null);
        var MergedIconDown = icons && icons.horizontalArrowDown ? icons.horizontalArrowDown : _index.default.createElement(_index2.default, null);
        return _index.default.createElement("span", {
            className: prefixCls + "-icon-suffix"
        }, needPopOnBottom ? MergedIconDown : MergedIconRight);
    };
    var hasSelectedStatus = (0, _util.isChildrenSelected)(children, selectedKeys) || isSelected;
    return _index.default.createElement(_index3.default, {
        trigger: "hover",
        onVisibleChange: function(visible) {
            return setPopupVisible(visible);
        },
        droplist: _index.default.createElement(_index4.default, {
            id: instanceId,
            selectedKeys: selectedKeys,
            onClickMenuItem: function(key, event) {
                onClickMenuItem(key, event);
                setPopupVisible(false);
            }
        }, children),
        triggerProps: __assign({
            position: needPopOnBottom ? 'bl' : 'rt',
            popupVisible: popupVisible,
            showArrow: true,
            autoAlignPopupMinWidth: true,
            classNames: 'fadeIn',
            duration: 100,
            mouseEnterDelay: 50,
            mouseLeaveDelay: 50,
            className: (0, _classNames.default)(baseClassName + "-trigger", triggerProps && triggerProps.className)
        }, (0, _omit.default)(triggerProps, [
            'className'
        ]))
    }, _index.default.createElement("div", {
        "aria-haspopup": true,
        "aria-expanded": popupVisible,
        "aria-controls": instanceId,
        ref: forwardedRef,
        style: style,
        className: (0, _classNames.default)(baseClassName, baseClassName + "-header", (_a = {}, _a[prefixCls + "-active"] = isActive, _a[prefixCls + "-selected"] = hasSelectedStatus, _a), className),
        onClick: function(event) {
            onClickSubMenu(_key, level, 'pop');
            selectable && onClickMenuItem(_key, event);
        }
    }, _index.default.createElement(_indent.default, {
        prefixCls: prefixCls,
        levelIndent: levelIndent,
        level: level
    }), title, renderSuffix(), hasSelectedStatus && mode === 'horizontal' ? _index.default.createElement("div", {
        className: prefixCls + "-selected-label"
    }) : null));
};
var _default = SubMenuPop;
},
"../../node_modules/@arco-design/web-react/es/Menu/util.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    PROPS_NEED_TO_BE_PASSED_IN_SUBMENU: function() {
        return PROPS_NEED_TO_BE_PASSED_IN_SUBMENU;
    },
    generateInfoMap: function() {
        return generateInfoMap;
    },
    processChildren: function() {
        return processChildren;
    },
    isChildrenSelected: function() {
        return isChildrenSelected;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var PROPS_NEED_TO_BE_PASSED_IN_SUBMENU = [
    'popup',
    'triggerProps',
    'selectable'
];
var flatMenuGroup = function(children) {
    var validMenuItems = [];
    _index.default.Children.forEach(children, function(item) {
        var _a;
        var menuType = (_a = item === null || item === void 0 ? void 0 : item.type) === null || _a === void 0 ? void 0 : _a.menuType;
        if (menuType === 'MenuItem' || menuType === 'SubMenu') validMenuItems.push(item);
        else if (menuType === 'MenuGroup') validMenuItems = validMenuItems.concat(flatMenuGroup(item.props.children));
    });
    return validMenuItems;
};
var generateInfoMap = function(children, keyPath, result) {
    if (keyPath === void 0) keyPath = [];
    if (result === void 0) result = {};
    var validChildrenList = flatMenuGroup(children);
    validChildrenList.forEach(function(item, index) {
        var _a;
        var _b, _c;
        var key = item.key;
        var menuType = item.type.menuType;
        var _keyPath = __spreadArray([
            key
        ], __read(keyPath), false);
        var info = {
            keyPath: [],
            prev: ((_b = validChildrenList[index - 1]) === null || _b === void 0 ? void 0 : _b.key) || null,
            next: ((_c = validChildrenList[index + 1]) === null || _c === void 0 ? void 0 : _c.key) || null
        };
        if (index === 0 || index === validChildrenList.length - 1) {
            var parentKey = _keyPath[1];
            var propertyName = index === 0 ? 'firstChild' : 'lastChild';
            if (parentKey) result[parentKey] = __assign(__assign({}, result[parentKey]), (_a = {}, _a[propertyName] = key, _a));
        }
        switch(menuType){
            case 'SubMenu':
                info.keyPath = _keyPath;
                generateInfoMap(item.props.children, _keyPath, result);
                break;
            case 'MenuItem':
                info.keyPath = _keyPath;
                info.disabled = item.props.disabled;
                break;
            default:
                break;
        }
        result[key] = __assign(__assign({}, result[key]), info);
    });
    return result;
};
var processChildren = function(children, props) {
    return _index.default.Children.map(children, function(item, index) {
        if (!item || !item.props) return item;
        var isHTMLElement = typeof item.type === 'string';
        var isMenuSubComponent = item.type && item.type.menuType;
        if (!isMenuSubComponent && item.props.children) {
            var _props = isHTMLElement ? {} : props;
            return _index.default.cloneElement(item, __assign(__assign({}, _props), {
                _key: item.key,
                children: processChildren(item.props.children, props)
            }));
        }
        return isHTMLElement ? item : _index.default.cloneElement(item, __assign(__assign(__assign({}, props), item.props), {
            _key: item.key || "$menu-" + index
        }));
    });
};
function isChildrenSelected(children, keys) {
    var find = false;
    function loop(_children) {
        if (!_children || find) return;
        _index.default.Children.forEach(_children, function(c) {
            if (c && c.props && c.type && !find) {
                var menuType = c.type.menuType;
                var selectable = c.props.selectable;
                if (menuType === 'MenuItem') find = keys.indexOf(c.key) !== -1;
                else if (menuType === 'SubMenu' && selectable) find = keys.indexOf(c.key) !== -1;
                if (!find && c.props.children) loop(c.props.children);
            }
        });
    }
    loop(children);
    return find;
}
},
"../../node_modules/@arco-design/web-react/es/Message/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react-dom/index.js"));
var _index2 = __webpack_require__("../../node_modules/react-transition-group/esm/index.js");
var _notification = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/notification.js"));
var _notice = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/notice.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var messageTypes = [
    'info',
    'success',
    'error',
    'warning',
    'loading',
    'normal'
];
var messageInstance = {};
var maxCount;
var prefixCls;
var duration;
var container;
function addInstance(noticeProps) {
    var _noticeProps = __assign({
        position: 'top',
        duration: duration
    }, noticeProps);
    var position = _noticeProps.position, transitionClassNames = _noticeProps.transitionClassNames;
    var id;
    if (messageInstance[position]) {
        var notices = messageInstance[position].state.notices;
        if (notices.length >= maxCount) {
            var updated = notices[0];
            id = updated.id;
            notices.shift();
            messageInstance[position].add(__assign(__assign({}, _noticeProps), {
                id: id
            }));
        } else id = messageInstance[position].add(_noticeProps);
    } else {
        var div = document.createElement('div');
        (container || document.body).appendChild(div);
        _index1.default.render(_index.default.createElement(Message, {
            transitionClassNames: transitionClassNames,
            ref: function(instance) {
                messageInstance[position] = instance;
                id = messageInstance[position].add(_noticeProps);
            }
        }), div);
    }
    var result = function() {
        if (messageInstance[position]) messageInstance[position].remove(id);
    };
    return result;
}
var Message = function(_super) {
    __extends(Message, _super);
    function Message() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.remove = function(id) {
            var noticeItem = _this.state.notices.find(function(item) {
                return item.id === id;
            });
            if (noticeItem) _this.update(__assign(__assign({}, noticeItem), {
                style: __assign(__assign({}, noticeItem.style), {
                    opacity: 0
                })
            }));
            setTimeout(function() {
                _super.prototype.remove.call(_this, id);
            }, 100);
        };
        return _this;
    }
    Message.prototype.render = function() {
        var _this = this;
        var transitionClassNames = this.props.transitionClassNames;
        var _a = this.state, notices = _a.notices, position = _a.position;
        var prefixClsMessage = prefixCls ? prefixCls + "-message" : 'arco-message';
        var classNames = (0, _classNames.default)(prefixClsMessage + "-wrapper", prefixClsMessage + "-wrapper-" + position);
        return _index.default.createElement("div", {
            className: classNames
        }, _index.default.createElement(_index2.TransitionGroup, {
            component: null
        }, notices.map(function(notice) {
            return _index.default.createElement(_index2.CSSTransition, {
                key: notice.id,
                timeout: {
                    enter: 100,
                    exit: 300
                },
                classNames: transitionClassNames || "fadeMessage",
                onExit: function(e) {
                    e.style.height = e.scrollHeight + "px";
                },
                onExiting: function(e) {
                    e.style.height = 0;
                },
                onExited: function(e) {
                    e.style.height = 0;
                    notice.onClose && notice.onClose();
                }
            }, _index.default.createElement(_notice.default, __assign({}, notice, {
                prefixCls: prefixClsMessage,
                iconPrefix: prefixCls,
                onClose: _this.remove,
                noticeType: "message"
            })));
        })));
    };
    Message.config = function(options) {
        if (options === void 0) options = {};
        if (options.maxCount) maxCount = options.maxCount;
        if (options.prefixCls) prefixCls = options.prefixCls;
        if (options.duration) duration = options.duration;
        if (options.getContainer && options.getContainer() !== container) {
            container = options.getContainer();
            Object.keys(messageInstance).forEach(function(notice) {
                return messageInstance[notice].clear();
            });
            messageInstance = {};
        }
    };
    Message.clear = function() {
        Object.keys(messageInstance).forEach(function(ins) {
            messageInstance[ins].clear();
        });
    };
    Message.addInstance = addInstance;
    return Message;
}(_notification.default);
messageTypes.forEach(function(type) {
    Message[type] = function(noticeProps) {
        var props = typeof noticeProps === 'string' ? {
            content: noticeProps
        } : noticeProps;
        return addInstance(__assign(__assign({}, props), {
            type: type
        }));
    };
});
var _default = Message;
},
"../../node_modules/@arco-design/web-react/es/Modal/config.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    setConfigProviderProps: function() {
        return setConfigProviderProps;
    },
    getConfigProviderProps: function() {
        return getConfigProviderProps;
    },
    setModalConfig: function() {
        return setModalConfig;
    },
    getModalConfig: function() {
        return getModalConfig;
    },
    destroyList: function() {
        return destroyList;
    }
});
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var configProvider = {};
function setConfigProviderProps(configProviderProps) {
    configProvider = __assign({}, configProviderProps);
}
function getConfigProviderProps() {
    return configProvider;
}
var modalConfig = {
    simple: true
};
var setModalConfig = function(config) {
    modalConfig = __assign(__assign({}, modalConfig), config);
};
var getModalConfig = function() {
    return modalConfig;
};
var destroyList = [];
},
"../../node_modules/@arco-design/web-react/es/Notification/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react-dom/index.js"));
var _index2 = __webpack_require__("../../node_modules/react-transition-group/esm/index.js");
var _notification = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/notification.js"));
var _notice = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/notice.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var notificationTypes = [
    'info',
    'success',
    'error',
    'warning',
    'normal'
];
var notificationInstance = {};
var maxCount;
var prefixCls;
var duration;
var container;
var Notification = function(_super) {
    __extends(Notification, _super);
    function Notification() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.remove = function(id) {
            var noticeItem = _this.state.notices.find(function(item) {
                return item.id === id;
            });
            if (noticeItem) _this.update(__assign(__assign({}, noticeItem), {
                style: __assign(__assign({}, noticeItem.style), {
                    opacity: 0
                })
            }));
            setTimeout(function() {
                _super.prototype.remove.call(_this, id);
            }, 200);
        };
        return _this;
    }
    Notification.prototype.render = function() {
        var _this = this;
        var _a = this.state, notices = _a.notices, _b = _a.position, position = _b === void 0 ? 'topRight' : _b;
        var prefixClsNotification = prefixCls ? prefixCls + "-notification" : 'arco-notification';
        var transitionClass;
        if (position === 'topLeft' || position === 'bottomLeft') transitionClass = 'slideNoticeLeft';
        else transitionClass = 'slideNoticeRight';
        var classNames = (0, _classNames.default)(prefixClsNotification + "-wrapper", prefixClsNotification + "-wrapper-" + position);
        return _index.default.createElement("div", {
            className: classNames
        }, _index.default.createElement(_index2.TransitionGroup, {
            component: null
        }, notices.map(function(notice) {
            return _index.default.createElement(_index2.CSSTransition, {
                key: notice.id,
                timeout: {
                    enter: 400,
                    exit: 300
                },
                classNames: transitionClass,
                onExit: function(e) {
                    e.style.height = e.scrollHeight + "px";
                },
                onExiting: function(e) {
                    e.style.height = 0;
                },
                onExited: function(e) {
                    e.style.height = 0;
                    notice.onClose && notice.onClose();
                }
            }, _index.default.createElement(_notice.default, __assign({}, notice, {
                onClose: _this.remove,
                prefixCls: prefixClsNotification,
                iconPrefix: prefixCls,
                noticeType: "notification"
            })));
        })));
    };
    Notification.config = function(options) {
        if (options === void 0) options = {};
        if (options.maxCount) maxCount = options.maxCount;
        if (options.prefixCls) prefixCls = options.prefixCls;
        if ((0, _is.isNumber)(options.duration)) duration = options.duration;
        if (options.getContainer && options.getContainer() !== container) {
            container = options.getContainer();
            Object.keys(notificationInstance).forEach(function(notice) {
                return notificationInstance[notice].clear();
            });
            notificationInstance = {};
        }
    };
    Notification.clear = function() {
        Object.keys(notificationInstance).forEach(function(ins) {
            notificationInstance[ins].clear();
        });
    };
    Notification.remove = function(id) {
        Object.keys(notificationInstance).forEach(function(ins) {
            notificationInstance[ins].remove(id);
        });
    };
    Notification.addInstance = function(noticeProps) {
        var _a = noticeProps.position, position = _a === void 0 ? 'topRight' : _a;
        var _noticeProps = __assign({
            duration: duration
        }, noticeProps);
        if (notificationInstance[position]) {
            var notices = notificationInstance[position].state.notices;
            if (notices.length >= maxCount) {
                var updated = notices[0];
                notices.shift();
                notificationInstance[position].add(__assign(__assign({}, _noticeProps), {
                    id: updated.id
                }));
            } else notificationInstance[position].add(_noticeProps);
            return notificationInstance[position];
        }
        var div = document.createElement('div');
        var instance = null;
        (container || document.body).appendChild(div);
        _index1.default.render(_index.default.createElement(Notification, {
            ref: function(ref) {
                notificationInstance[position] = ref;
                notificationInstance[position].add(_noticeProps);
                instance = notificationInstance[position];
                return instance;
            }
        }), div);
    };
    return Notification;
}(_notification.default);
notificationTypes.forEach(function(type) {
    Notification[type] = function(noticeProps) {
        return Notification.addInstance(__assign(__assign({}, noticeProps), {
            type: type
        }));
    };
});
var _default = Notification;
},
"../../node_modules/@arco-design/web-react/es/Popover/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/index.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultProps = {
    position: 'top',
    trigger: 'hover',
    unmountOnExit: true
};
function Popover(baseProps, ref) {
    var _a = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _a.getPrefixCls, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Popover);
    var style = props.style, className = props.className, children = props.children, position = props.position, getPopupContainer = props.getPopupContainer, trigger = props.trigger, defaultPopupVisible = props.defaultPopupVisible, popupVisible = props.popupVisible, triggerProps = props.triggerProps, unmountOnExit = props.unmountOnExit, onVisibleChange = props.onVisibleChange, content = props.content, title = props.title, rest = __rest(props, [
        "style",
        "className",
        "children",
        "position",
        "getPopupContainer",
        "trigger",
        "defaultPopupVisible",
        "popupVisible",
        "triggerProps",
        "unmountOnExit",
        "onVisibleChange",
        "content",
        "title"
    ]);
    var prefixCls = getPrefixCls('popover');
    return _index.default.createElement(_index1.default, __assign({}, rest, {
        ref: ref,
        style: __assign({
            maxWidth: 350
        }, style),
        className: className,
        prefixCls: prefixCls,
        getPopupContainer: getPopupContainer,
        position: position,
        trigger: trigger,
        content: _index.default.createElement("div", {
            className: prefixCls + "-inner"
        }, title ? _index.default.createElement("div", {
            className: prefixCls + "-title"
        }, title) : null, _index.default.createElement("div", {
            className: prefixCls + "-inner-content"
        }, content)),
        popupHoverStay: true,
        unmountOnExit: unmountOnExit,
        triggerProps: triggerProps,
        defaultPopupVisible: defaultPopupVisible,
        onVisibleChange: onVisibleChange || (triggerProps ? triggerProps.onVisibleChange : undefined),
        childrenPrefix: prefixCls
    }, 'popupVisible' in props ? {
        popupVisible: popupVisible
    } : {}), typeof children === 'string' ? _index.default.createElement("span", null, children) : children);
}
var PopoverComponent = (0, _index.forwardRef)(Popover);
PopoverComponent.displayName = 'Popover';
var _default = PopoverComponent;
},
"../../node_modules/@arco-design/web-react/es/Popover/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Popover/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Rate/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _indexes = __webpack_require__.ir(__webpack_require__("../../node_modules/number-precision/build/index.es.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconStarFill/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconFaceMehFill/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconFaceSmileFill/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconFaceFrownFill/index.js"));
var _index5 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index6 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/index.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
_indexes.default.enableBoundaryChecking(false);
var defaultProps = {
    character: _index.default.createElement(_index1.default, null),
    count: 5
};
function Rate(baseProps, ref) {
    var _a;
    var _this = this;
    var _b = (0, _index.useContext)(_index5.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Rate);
    var _c = props.style, style = _c === void 0 ? {} : _c, className = props.className, defaultValue = props.defaultValue, character = props.character, count = props.count, propValue = props.value, tooltips = props.tooltips, allowHalf = props.allowHalf, allowClear = props.allowClear, readonly = props.readonly, disabled = props.disabled, grading = props.grading, onChange = props.onChange, onHoverChange = props.onHoverChange, restProps = __rest(props, [
        "style",
        "className",
        "defaultValue",
        "character",
        "count",
        "value",
        "tooltips",
        "allowHalf",
        "allowClear",
        "readonly",
        "disabled",
        "grading",
        "onChange",
        "onHoverChange"
    ]);
    var _d = __read((0, _index.useState)(defaultValue || propValue || 0), 2), value = _d[0], setValue = _d[1];
    var _e = __read((0, _index.useState)(0), 2), hoverIndex = _e[0], setHoverIndex = _e[1];
    var _f = __read((0, _index.useState)(), 2), animation = _f[0], setAnimation = _f[1];
    var prefixCls = getPrefixCls('rate');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-readonly"] = readonly, _a[prefixCls + "-disabled"] = disabled, _a), className);
    var mergedValue = 'value' in props ? propValue : value;
    var resetHoverIndex = function() {
        if (hoverIndex) {
            setHoverIndex(0);
            onHoverChange && onHoverChange(0);
        }
    };
    var onMouseEnter = function(index, isHalf) {
        var newHoverIndex = isHalf && allowHalf ? index + 0.5 : index + 1;
        if (newHoverIndex !== hoverIndex) {
            setHoverIndex(newHoverIndex);
            onHoverChange && onHoverChange(newHoverIndex);
        }
    };
    var onClick = function(index, isHalf) {
        var newValue = isHalf && allowHalf ? index + 0.5 : index + 1;
        setAnimation(true);
        if (newValue !== mergedValue) {
            setValue(newValue);
            onChange && onChange(newValue);
        } else if (allowClear) {
            setValue(0);
            onChange && onChange(0);
            resetHoverIndex();
        }
    };
    var renderCharacter = function(index) {
        var _a;
        var fixedValue = allowHalf ? _indexes.default.times(+_indexes.default.divide(mergedValue || 0, 0.5).toFixed(0), 0.5) : Math.round(mergedValue);
        var _usedIndex = hoverIndex || fixedValue;
        var _usedCharacter = typeof character === 'function' ? character(index) : character;
        if (grading) {
            if (_usedIndex <= 2) _usedCharacter = _index.default.createElement(_index4.default, null);
            else if (_usedIndex <= 3) _usedCharacter = _index.default.createElement(_index2.default, null);
            else _usedCharacter = _index.default.createElement(_index3.default, null);
            if (_usedIndex <= index) _usedCharacter = _index.default.createElement(_index2.default, null);
        }
        var classNames = (0, _classNames.default)(prefixCls + "-character", (_a = {}, _a[prefixCls + "-character-half"] = allowHalf && index + 0.5 === _usedIndex, _a[prefixCls + "-character-full"] = index + 1 <= _usedIndex, _a[prefixCls + "-character-scale"] = animation && index + 1 < mergedValue, _a));
        var leftProps = readonly || disabled ? {} : {
            onMouseEnter: onMouseEnter.bind(_this, index, true),
            onClick: onClick.bind(_this, index, true)
        };
        var rightProps = readonly || disabled ? {} : {
            onMouseEnter: onMouseEnter.bind(_this, index, false),
            onClick: onClick.bind(_this, index, false)
        };
        var tooltip = tooltips && tooltips[index];
        var CharacterWrapper = tooltip ? _index6.default : _index.default.Fragment;
        var tooltipProps = tooltip ? {
            content: tooltip
        } : {};
        function getAriaProps(isHalf) {
            return {
                role: 'radio',
                'aria-checked': index + (isHalf ? 0.5 : 1) <= _usedIndex,
                'aria-setsize': count,
                'aria-posinset': index + (isHalf ? 0.5 : 1)
            };
        }
        return _index.default.createElement(CharacterWrapper, __assign({
            key: index
        }, tooltipProps), _index.default.createElement("div", __assign({
            className: classNames,
            style: animation ? {
                animationDelay: 50 * index + "ms"
            } : {},
            onAnimationEnd: function() {
                if (animation && index + 1 >= mergedValue - 1) setAnimation(false);
            }
        }, !allowHalf ? getAriaProps() : {}), _index.default.createElement("div", __assign({
            className: prefixCls + "-character-left"
        }, leftProps, allowHalf ? getAriaProps(true) : {}), _usedCharacter), _index.default.createElement("div", __assign({
            className: prefixCls + "-character-right"
        }, rightProps, allowHalf ? getAriaProps() : {}), _usedCharacter)));
    };
    return _index.default.createElement("div", __assign({
        ref: ref
    }, (0, _omit.default)(restProps, [
        'error'
    ]), {
        style: style,
        className: classNames,
        onMouseLeave: resetHoverIndex
    }), _index.default.createElement("div", {
        className: prefixCls + "-inner"
    }, Array.apply(null, Array(grading ? 5 : count)).map(function(_, index) {
        return renderCharacter(index);
    })));
}
var RateComponent = _index.default.forwardRef(Rate);
RateComponent.displayName = 'Rate';
var _default = RateComponent;
},
"../../node_modules/@arco-design/web-react/es/Rate/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Rate/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/ResizeBox/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _resizetrigger = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/ResizeBox/resize-trigger.js"));
var _split = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/ResizeBox/split.js"));
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var _splitgroup = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/ResizeBox/split-group.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var DIRECTION_LEFT = 'left';
var DIRECTION_RIGHT = 'right';
var DIRECTION_TOP = 'top';
var DIRECTION_BOTTOM = 'bottom';
var allDirections = [
    DIRECTION_LEFT,
    DIRECTION_RIGHT,
    DIRECTION_TOP,
    DIRECTION_BOTTOM
];
var defaultProps = {
    component: 'div',
    directions: [
        'right'
    ],
    resizeIcons: {},
    resizeTriggers: {}
};
function ResizeBox(baseProps, ref) {
    var _a = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _a.getPrefixCls, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.ResizeBox);
    var style = props.style, className = props.className, component = props.component, directions = props.directions, resizeIcons = props.resizeIcons, children = props.children, resizeTriggers = props.resizeTriggers, propWidth = props.width, propHeight = props.height;
    var prefixCls = getPrefixCls('resizebox');
    var classNames = (0, _classNames.default)(prefixCls, className);
    var _b = __read((0, _index.useState)({}), 2), paddingStyles = _b[0], setPaddingStyles = _b[1];
    var _c = __read((0, _useMergeValue.default)(undefined, {
        value: propWidth
    }), 2), width = _c[0], setWidth = _c[1];
    var _d = __read((0, _useMergeValue.default)(undefined, {
        value: propHeight
    }), 2), height = _d[0], setHeight = _d[1];
    var recordRef = (0, _index.useRef)({
        startX: 0,
        startY: 0,
        startWidth: 0,
        startHeight: 0,
        direction: DIRECTION_RIGHT,
        moving: false,
        padding: {
            top: 0,
            bottom: 0,
            left: 0,
            right: 0
        }
    });
    var wrapperRef = (0, _index.useRef)();
    (0, _index.useImperativeHandle)(ref, function() {
        return wrapperRef.current;
    }, []);
    function getIsHorizontal(direction) {
        return [
            DIRECTION_TOP,
            DIRECTION_BOTTOM
        ].indexOf(direction) > -1;
    }
    function getRealSize(clientSize, padding) {
        if (clientSize === 0) return 0;
        var res = clientSize - padding;
        return res <= 0 ? 0 : res;
    }
    function onTriggerMouseDown(direction, e) {
        var _a, _b;
        props.onMovingStart && props.onMovingStart();
        recordRef.current.moving = true;
        recordRef.current.startX = e.pageX;
        recordRef.current.startY = e.pageY;
        recordRef.current.direction = direction;
        var _c = recordRef.current.padding, top = _c.top, left = _c.left, right = _c.right, bottom = _c.bottom;
        recordRef.current.startWidth = getRealSize((_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.clientWidth, left + right);
        recordRef.current.startHeight = getRealSize((_b = wrapperRef.current) === null || _b === void 0 ? void 0 : _b.clientHeight, top + bottom);
        (0, _dom.on)(window, 'mousemove', moving);
        (0, _dom.on)(window, 'touchmove', moving);
        (0, _dom.on)(window, 'mouseup', moveEnd);
        (0, _dom.on)(window, 'touchend', moveEnd);
        (0, _dom.on)(window, 'contextmenu', moveEnd);
        document.body.style.cursor = getIsHorizontal(direction) ? 'row-resize' : 'col-resize';
    }
    function moving(e) {
        if (!recordRef.current.moving) return false;
        var _a = recordRef.current, startX = _a.startX, startY = _a.startY, startWidth = _a.startWidth, startHeight = _a.startHeight;
        var newWidth = startWidth;
        var newHeight = startHeight;
        var offsetX = e.pageX - startX;
        var offsetY = e.pageY - startY;
        switch(recordRef.current.direction){
            case DIRECTION_LEFT:
                newWidth = startWidth - offsetX;
                setWidth(newWidth);
                break;
            case DIRECTION_RIGHT:
                newWidth = startWidth + offsetX;
                setWidth(newWidth);
                break;
            case DIRECTION_TOP:
                newHeight = startHeight - offsetY;
                setHeight(newHeight);
                break;
            case DIRECTION_BOTTOM:
                newHeight = startHeight + offsetY;
                setHeight(newHeight);
                break;
            default:
                break;
        }
        props.onMoving && props.onMoving(e, {
            width: newWidth,
            height: newHeight
        });
    }
    function moveEnd() {
        recordRef.current.moving = false;
        offEvents();
        document.body.style.cursor = 'default';
        props.onMovingEnd && props.onMovingEnd();
    }
    function offEvents() {
        (0, _dom.off)(window, 'mousemove', moving);
        (0, _dom.off)(window, 'touchmove', moving);
        (0, _dom.off)(window, 'mouseup', moveEnd);
        (0, _dom.off)(window, 'touchend', moveEnd);
        (0, _dom.off)(window, 'contextmenu', moveEnd);
    }
    function onTriggerResize(direction, e) {
        var isHorizontal = getIsHorizontal(direction);
        var contentRect = e[0].contentRect;
        var styleDirection = "" + direction.slice(0, 1).toUpperCase() + direction.slice(1);
        var size = contentRect[isHorizontal ? 'height' : 'width'];
        recordRef.current.padding[direction] = size;
        setPaddingStyles(function(pre) {
            var _a;
            return __assign(__assign({}, pre), (_a = {}, _a["padding" + styleDirection] = size, _a));
        });
    }
    var wrapperStyles = __assign(__assign(__assign(__assign({}, paddingStyles), style || {}), (0, _is.isNumber)(width) ? {
        width: width
    } : {}), (0, _is.isNumber)(height) ? {
        height: height
    } : {});
    var Tag = component;
    return _index.default.createElement(Tag, {
        style: wrapperStyles,
        className: classNames,
        ref: wrapperRef
    }, children, directions.map(function(direction) {
        if (allDirections.indexOf(direction) !== -1) return _index.default.createElement(_resizetrigger.default, {
            key: direction,
            className: prefixCls + "-direction-" + direction,
            direction: getIsHorizontal(direction) ? 'horizontal' : 'vertical',
            icon: resizeIcons[direction],
            onMouseDown: function(e) {
                onTriggerMouseDown(direction, e);
            },
            onResize: function(e) {
                onTriggerResize(direction, e);
            }
        }, resizeTriggers[direction]);
    }));
}
var ForwardRefResizeBox = (0, _index.forwardRef)(ResizeBox);
var ResizeBoxComponent = ForwardRefResizeBox;
ResizeBoxComponent.Split = _split.default;
ResizeBoxComponent.SplitGroup = _splitgroup.default;
ResizeBoxComponent.displayName = 'ResizeBox';
var _default = ResizeBoxComponent;
},
"../../node_modules/@arco-design/web-react/es/ResizeBox/resize-trigger.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ResizeTrigger;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _resizeObserver = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/resizeObserver.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDragDotVertical/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconDragDot/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretRight/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretLeft/index.js"));
var _index6 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretDown/index.js"));
var _index7 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretUp/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function ResizeTrigger(props) {
    var _a;
    var className = props.className, direction = props.direction, icon = props.icon, onMouseDown = props.onMouseDown, onResize = props.onResize, children = props.children, _b = props.collapsible, collapsible = _b === void 0 ? {} : _b, _c = props.resizable, resizable = _c === void 0 ? true : _c, renderChildren = props.renderChildren;
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('resizebox-trigger');
    var isHorizontal = direction === 'horizontal';
    var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-" + (isHorizontal ? 'horizontal' : 'vertical'), (_a = {}, _a[prefixCls + "-not-resizable"] = !resizable, _a), className);
    var prevCollapsedConfig = (0, _is.isObject)(collapsible.prev) ? __assign(__assign({}, collapsible.prev), {
        icon: collapsible.prev.icon || (isHorizontal ? _index.default.createElement(_index7.default, null) : _index.default.createElement(_index5.default, null))
    }) : {};
    var nextCollapsedConfig = (0, _is.isObject)(collapsible.next) ? __assign(__assign({}, collapsible.next), {
        icon: collapsible.next.icon || (isHorizontal ? _index.default.createElement(_index6.default, null) : _index.default.createElement(_index4.default, null))
    }) : {};
    var renderPrevCollapsedTrigger = function() {
        if (prevCollapsedConfig.icon && !prevCollapsedConfig.collapsed || nextCollapsedConfig.collapsed) return _index.default.createElement("span", {
            className: (0, _classNames.default)(prefixCls + "-icon", (0, _classNames.default)(prefixCls + "-prev")),
            onClick: prevCollapsedConfig.onClick
        }, prevCollapsedConfig.icon);
        return _index.default.createElement("span", {
            className: (0, _classNames.default)(prefixCls + "-icon-empty")
        });
    };
    var renderNextCollapsedTrigger = function() {
        if (nextCollapsedConfig.icon && !nextCollapsedConfig.collapsed || prevCollapsedConfig.collapsed) return _index.default.createElement("span", {
            className: (0, _classNames.default)(prefixCls + "-icon", (0, _classNames.default)(prefixCls + "-next")),
            onClick: nextCollapsedConfig.onClick
        }, nextCollapsedConfig.icon);
        return _index.default.createElement("span", {
            className: (0, _classNames.default)(prefixCls + "-icon-empty")
        });
    };
    var renderResizeTrigger = function() {
        if (resizable) return _index.default.createElement("span", {
            className: prefixCls + "-icon"
        }, icon || (isHorizontal ? _index.default.createElement(_index3.default, null) : _index.default.createElement(_index2.default, null)));
        return _index.default.createElement("span", {
            className: (0, _classNames.default)(prefixCls + "-icon-empty")
        });
    };
    var prev = renderPrevCollapsedTrigger();
    var trigger = renderResizeTrigger();
    var next = renderNextCollapsedTrigger();
    var renderIcon = function() {
        return _index.default.createElement("div", {
            className: prefixCls + "-icon-wrapper"
        }, prev, trigger, next);
    };
    if (!resizable) return _index.default.createElement("div", {
        className: classNames
    }, (0, _is.isFunction)(renderChildren) ? renderChildren(prev, trigger, next) : children || renderIcon());
    return _index.default.createElement(_resizeObserver.default, {
        onResize: onResize
    }, _index.default.createElement("div", {
        className: classNames,
        onMouseDown: onMouseDown
    }, (0, _is.isFunction)(renderChildren) ? renderChildren(prev, trigger, next) : children || renderIcon()));
}
},
"../../node_modules/@arco-design/web-react/es/ResizeBox/split-group.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _resizetrigger = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/ResizeBox/resize-trigger.js"));
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var DIRECTION_HORIZONTAL = 'horizontal';
var DIRECTION_VERTICAL = 'vertical';
function SplitGroup(props, ref) {
    var _a;
    var panes = props.panes, style = props.style, className = props.className, _b = props.component, component = _b === void 0 ? 'div' : _b, _c = props.direction, direction = _c === void 0 ? 'horizontal' : _c, icon = props.icon;
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var defaultOffset = 1 / panes.length;
    var wrapperRef = (0, _index.useRef)();
    var recordRef = (0, _index.useRef)(new Array(panes.length).fill({
        moving: false,
        startOffset: 0,
        startPosition: 0
    }));
    var paneContainers = (0, _index.useRef)([]);
    var movingIndex = (0, _index.useRef)(0);
    var prevOffsets = (0, _index.useRef)([]);
    var _d = __read((0, _index.useState)(new Array(panes.length).fill(defaultOffset)), 2), offsets = _d[0], setOffsets = _d[1];
    var _e = __read((0, _index.useState)(false), 2), isMoving = _e[0], setIsMoving = _e[1];
    var _f = __read((0, _index.useState)(new Array(panes.length).fill(0)), 2), triggerSize = _f[0], setTriggerSize = _f[1];
    var _g = __read((0, _index.useState)(new Array(Math.max(panes.length - 1, 0)).fill({
        prev: false,
        next: false
    })), 2), collapsedStatus = _g[0], setCollapsedStatus = _g[1];
    var prefixCls = getPrefixCls('resizebox-split-group');
    var isHorizontal = direction === DIRECTION_HORIZONTAL;
    var isTriggerHorizontal = !isHorizontal;
    var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-" + (isHorizontal ? DIRECTION_HORIZONTAL : DIRECTION_VERTICAL), (_a = {}, _a[prefixCls + "-moving"] = isMoving, _a), className);
    var Tag = component;
    var getInitialOffsets = function() {
        var newOffsets = [];
        panes.forEach(function(pane) {
            var size = pane.size;
            if (!(0, _is.isUndefined)(size)) newOffsets.push(formatSize(size));
            else newOffsets.push(undefined);
        });
        var noSizeArr = newOffsets.filter(function(size) {
            return !size;
        });
        var remainPercent = 1 - newOffsets.reduce(function(a, b) {
            var formatA = a || 0;
            var formatB = b || 0;
            return formatA + formatB;
        }, 0);
        var averagePercent = remainPercent / noSizeArr.length;
        newOffsets = newOffsets.map(function(size) {
            if (!(0, _is.isUndefined)(size)) return size;
            return averagePercent;
        });
        return newOffsets;
    };
    var getPaneSize = function(index) {
        var prevTriggerSize = triggerSize[index - 1] || 0;
        var currentTriggerSize = triggerSize[index];
        var baseVal = offsets[index] * 100;
        var unit = '%';
        return "calc(" + baseVal + unit + " - " + (prevTriggerSize + currentTriggerSize) / 2 + "px)";
    };
    function formatSize(size) {
        var totalPX = isHorizontal ? wrapperRef.current.offsetWidth : wrapperRef.current.offsetHeight;
        if (!size || (0, _is.isNumber)(size) && size < 0) return 0;
        var percent = (0, _is.isString)(size) ? parseFloat(size) / totalPX : size;
        return Math.min(percent, 1);
    }
    var getMinAndMax = function(index) {
        var next = Math.min(index + 1, panes.length - 1);
        var totalOffset = offsets[index] + offsets[next];
        var currentMin = formatSize(panes[index].min) || 0;
        var currentMax = formatSize(panes[index].max) || totalOffset;
        var nextMin = formatSize(panes[next].min) || 0;
        var nextMax = formatSize(panes[next].max) || totalOffset;
        currentMax = Math.min(totalOffset - nextMin, currentMax);
        nextMax = Math.min(totalOffset - currentMin, nextMax);
        return {
            currentMin: currentMin,
            currentMax: currentMax,
            nextMin: nextMin,
            nextMax: nextMax
        };
    };
    var getNewOffsets = function(startOffset, startPosition, currentPosition) {
        var current = movingIndex.current;
        var next = current + 1;
        var newOffsets = __spreadArray([], __read(offsets), false);
        var currentPercent = offsets[current];
        var nextPercent = offsets[next];
        var totalPercent = currentPercent + nextPercent;
        var _a = getMinAndMax(current), minOffset = _a.currentMin, maxOffset = _a.currentMax;
        var moveOffset = startOffset + formatSize(currentPosition - startPosition + "px");
        moveOffset = Math.max(minOffset, moveOffset);
        moveOffset = Math.min(maxOffset, moveOffset);
        newOffsets[current] = moveOffset;
        newOffsets[next] = totalPercent - moveOffset;
        return newOffsets;
    };
    function onTriggerResize(e, index) {
        var contentRect = e[0].contentRect;
        var currentSize = contentRect[isTriggerHorizontal ? 'height' : 'width'];
        var newTriggerSize = __spreadArray([], __read(triggerSize), false);
        newTriggerSize[index] = currentSize;
        setTriggerSize(newTriggerSize);
    }
    var getCollapsedConfig = function(index) {
        var collapsible = panes[index].collapsible;
        if (!(0, _is.isObject)(collapsible)) collapsible = !collapsible ? {} : {
            prev: true,
            next: true
        };
        var prev = collapsible.prev, next = collapsible.next;
        if (!prev && !next) return {};
        if (!collapsedStatus[index]) return {};
        var hasPrev = !!prev || !prev && collapsedStatus[index].next;
        var hasNext = !!next || !next && collapsedStatus[index].prev;
        return {
            hasPrev: hasPrev,
            hasNext: hasNext
        };
    };
    function onTriggerMouseDown(e, index) {
        props.onMovingStart && props.onMovingStart(index);
        movingIndex.current = index;
        var currentRecord = recordRef.current[index];
        currentRecord.moving = true;
        currentRecord.startOffset = offsets[index];
        currentRecord.startPosition = isHorizontal ? e.pageX : e.pageY;
        setIsMoving(true);
        (0, _dom.on)(window, 'mousemove', moving);
        (0, _dom.on)(window, 'touchmove', moving);
        (0, _dom.on)(window, 'mouseup', moveEnd);
        (0, _dom.on)(window, 'touchend', moveEnd);
        (0, _dom.on)(window, 'contextmenu', moveEnd);
        document.body.style.cursor = isTriggerHorizontal ? 'row-resize' : 'col-resize';
    }
    function moving(e) {
        var index = movingIndex.current;
        var currentRecord = recordRef.current[index];
        var totalPX = isHorizontal ? wrapperRef.current.offsetWidth : wrapperRef.current.offsetHeight;
        if (currentRecord.moving) {
            var newOffsets = getNewOffsets(currentRecord.startOffset, currentRecord.startPosition, isHorizontal ? e.pageX : e.pageY);
            setOffsets(newOffsets);
            prevOffsets.current = newOffsets;
            props.onMoving && props.onMoving(e, newOffsets.map(function(value) {
                return value * totalPX + "px";
            }), index);
        }
    }
    function moveEnd() {
        var index = movingIndex.current;
        recordRef.current[index].moving = false;
        setIsMoving(false);
        (0, _dom.off)(window, 'mousemove', moving);
        (0, _dom.off)(window, 'touchmove', moving);
        (0, _dom.off)(window, 'mouseup', moveEnd);
        (0, _dom.off)(window, 'touchend', moveEnd);
        (0, _dom.off)(window, 'contextmenu', moveEnd);
        document.body.style.cursor = 'default';
        props.onMovingEnd && props.onMovingEnd(index);
    }
    function handleCollapsed(e, index, status, callback) {
        var next = index + 1;
        var newOffset = __spreadArray([], __read(offsets), false);
        var currentOffset = offsets[index];
        var nextOffset = offsets[next];
        var totalOffset = currentOffset + nextOffset;
        var totalPX = isHorizontal ? wrapperRef.current.offsetWidth : wrapperRef.current.offsetHeight;
        var _a = getMinAndMax(index), currentMin = _a.currentMin, nextMin = _a.nextMin;
        var newCurrentOffset = prevOffsets.current[index];
        var newNextOffset = prevOffsets.current[next];
        var collapsed = collapsedStatus[index][status];
        if (status === 'prev') {
            if (nextOffset !== nextMin || newNextOffset === nextMin) {
                newCurrentOffset = currentMin;
                newNextOffset = totalOffset - currentMin;
                collapsed = true;
            }
        } else if (currentOffset !== currentMin || newCurrentOffset === currentMin) {
            newCurrentOffset = totalOffset - nextMin;
            newNextOffset = nextMin;
            collapsed = true;
        }
        newOffset[index] = newCurrentOffset;
        newOffset[next] = newNextOffset;
        props.onMoving && props.onMoving(e, newOffset.map(function(value) {
            return value * totalPX + "px";
        }), index);
        props.onMovingEnd && props.onMovingEnd(index);
        setOffsets(newOffset);
        if ((0, _is.isFunction)(callback)) callback(e, index, status, collapsed);
    }
    (0, _index.useEffect)(function() {
        var offsets = getInitialOffsets();
        setOffsets(offsets);
        prevOffsets.current = offsets;
    }, [
        JSON.stringify(panes.map(function(item) {
            return item.size;
        }))
    ]);
    (0, _index.useImperativeHandle)(ref, function() {
        return wrapperRef.current;
    }, []);
    (0, _index.useEffect)(function() {
        var newCollapsedStatus = [];
        offsets.forEach(function(offset, index) {
            var currentCollapsedStatus = {
                prev: false,
                next: false
            };
            var next = index + 1;
            var _a = getMinAndMax(index), currentMin = _a.currentMin, nextMin = _a.nextMin;
            if (offset === currentMin) currentCollapsedStatus.prev = true;
            else if (offsets[next] === nextMin) currentCollapsedStatus.next = true;
            newCollapsedStatus.push(currentCollapsedStatus);
        });
        setCollapsedStatus(newCollapsedStatus);
    }, [
        offsets
    ]);
    return _index.default.createElement(Tag, {
        style: style,
        className: classNames,
        ref: wrapperRef
    }, panes.map(function(pane, index) {
        var content = pane.content, disabled = pane.disabled, trigger = pane.trigger, _a = pane.resizable, resizable = _a === void 0 ? true : _a, _b = pane.collapsible, collapsible = _b === void 0 ? {} : _b;
        var _c = getCollapsedConfig(index), hasPrev = _c.hasPrev, hasNext = _c.hasNext;
        var prevConfig = (0, _is.isObject)(collapsible) && (0, _is.isObject)(collapsible.prev) ? collapsible.prev : {};
        var nextConfig = (0, _is.isObject)(collapsible) && (0, _is.isObject)(collapsible.next) ? collapsible.next : {};
        return _index.default.createElement(_index.default.Fragment, {
            key: index
        }, _index.default.createElement("div", {
            className: prefixCls + "-pane",
            style: {
                flexBasis: getPaneSize(index)
            },
            ref: function(el) {
                return paneContainers.current[index] = el;
            }
        }, content), !disabled && index !== panes.length - 1 && _index.default.createElement(_resizetrigger.default, {
            className: prefixCls + "-trigger",
            direction: isTriggerHorizontal ? DIRECTION_HORIZONTAL : DIRECTION_VERTICAL,
            icon: icon,
            onResize: function(e) {
                return onTriggerResize(e, index);
            },
            onMouseDown: function(e) {
                return onTriggerMouseDown(e, index);
            },
            collapsible: {
                prev: hasPrev ? {
                    onClick: function(e) {
                        return handleCollapsed(e, index, 'prev', prevConfig.onClick);
                    },
                    icon: prevConfig.icon,
                    collapsed: collapsedStatus[index].prev
                } : undefined,
                next: hasNext ? {
                    onClick: function(e) {
                        return handleCollapsed(e, index, 'next', nextConfig.onClick);
                    },
                    icon: nextConfig.icon,
                    collapsed: collapsedStatus[index].next
                } : undefined
            },
            resizable: resizable,
            renderChildren: trigger
        }));
    }));
}
var SplitGroupComponent = (0, _index.forwardRef)(SplitGroup);
SplitGroupComponent.displayName = 'ResizeBoxSplitGroup';
var _default = SplitGroupComponent;
},
"../../node_modules/@arco-design/web-react/es/ResizeBox/split.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _resizetrigger = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/ResizeBox/resize-trigger.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _useIsomorphicLayoutEffect = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useIsomorphicLayoutEffect.js"));
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var DIRECTION_HORIZONTAL = 'horizontal';
var DIRECTION_VERTICAL = 'vertical';
function Split(props, ref) {
    var style = props.style, className = props.className, _a = props.component, component = _a === void 0 ? 'div' : _a, _b = props.direction, direction = _b === void 0 ? 'horizontal' : _b, icon = props.icon, _c = props.size, size = _c === void 0 ? 0.5 : _c, min = props.min, max = props.max, panes = props.panes, disabled = props.disabled, trigger = props.trigger;
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('resizebox-split');
    var isHorizontal = direction.includes(DIRECTION_HORIZONTAL);
    var isReverse = direction.includes('reverse');
    var isTriggerHorizontal = !isHorizontal;
    var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-" + (isHorizontal ? DIRECTION_HORIZONTAL : DIRECTION_VERTICAL), className);
    var _d = __read(panes, 2), firstPane = _d[0], secondPane = _d[1];
    var isPxSize = typeof size === 'string';
    var _e = __read((0, _index.useState)(parseFloat(size)), 2), offset = _e[0], setOffset = _e[1];
    var _f = __read((0, _index.useState)(0), 2), triggerSize = _f[0], setTriggerSize = _f[1];
    var recordRef = (0, _index.useRef)({
        startX: 0,
        startY: 0,
        startWidth: 0,
        startHeight: 0,
        startOffset: 0,
        moving: false
    });
    var wrapperRef = (0, _index.useRef)();
    var paneContainers = (0, _index.useRef)([]);
    (0, _index.useImperativeHandle)(ref, function() {
        return wrapperRef.current;
    }, []);
    function px2percent(numerator, denominator) {
        return parseFloat(numerator) / parseFloat(denominator);
    }
    function getOffset(startSize, startOffset, startPosition, currentPosition) {
        var minOffset = min ? parseFloat(min) : 0;
        var maxOffset = max ? parseFloat(max) : isPxSize ? startSize : 1;
        var ratio = isReverse ? -1 : 1;
        var moveOffset = isPxSize ? startOffset + (currentPosition - startPosition) * ratio : px2percent(startSize * startOffset + (currentPosition - startPosition) * ratio, startSize);
        moveOffset = Math.max(moveOffset, minOffset);
        moveOffset = Math.min(moveOffset, maxOffset);
        return moveOffset;
    }
    function onTriggerMouseDown(e) {
        var _a, _b;
        props.onMovingStart && props.onMovingStart();
        recordRef.current.moving = true;
        recordRef.current.startX = e.pageX;
        recordRef.current.startY = e.pageY;
        recordRef.current.startWidth = (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;
        recordRef.current.startHeight = (_b = wrapperRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight;
        recordRef.current.startOffset = offset;
        (0, _dom.on)(window, 'mousemove', moving);
        (0, _dom.on)(window, 'touchmove', moving);
        (0, _dom.on)(window, 'mouseup', moveEnd);
        (0, _dom.on)(window, 'touchend', moveEnd);
        (0, _dom.on)(window, 'contextmenu', moveEnd);
        document.body.style.cursor = isTriggerHorizontal ? 'row-resize' : 'col-resize';
    }
    function moving(e) {
        if (recordRef.current.moving) {
            var newOffset = isHorizontal ? getOffset(recordRef.current.startWidth, recordRef.current.startOffset, recordRef.current.startX, e.pageX) : getOffset(recordRef.current.startHeight, recordRef.current.startOffset, recordRef.current.startY, e.pageY);
            setOffset(newOffset);
            props.onMoving && props.onMoving(e, isPxSize ? newOffset + "px" : newOffset);
        }
    }
    function moveEnd() {
        recordRef.current.moving = false;
        (0, _dom.off)(window, 'mousemove', moving);
        (0, _dom.off)(window, 'touchmove', moving);
        (0, _dom.off)(window, 'mouseup', moveEnd);
        (0, _dom.off)(window, 'touchend', moveEnd);
        (0, _dom.off)(window, 'contextmenu', moveEnd);
        document.body.style.cursor = 'default';
        props.onMovingEnd && props.onMovingEnd();
    }
    function onTriggerResize(e) {
        var contentRect = e[0].contentRect;
        var newTriggerSize = contentRect[isTriggerHorizontal ? 'height' : 'width'];
        setTriggerSize(newTriggerSize);
    }
    function getFirstPaneSize() {
        var unit = isPxSize ? 'px' : '%';
        if (!offset) return "0" + unit;
        var baseVal = isPxSize ? offset : offset * 100;
        return "calc(" + baseVal + unit + " - " + triggerSize / 2 + "px)";
    }
    (0, _index.useEffect)(function() {
        props.onPaneResize && props.onPaneResize(paneContainers.current);
    }, [
        offset,
        triggerSize
    ]);
    (0, _useIsomorphicLayoutEffect.default)(function() {
        var newOffset = parseFloat(size);
        if (offset !== newOffset) setOffset(newOffset);
    }, [
        size
    ]);
    var Tag = component;
    var firstPaneNode = _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls + "-pane", 'first-pane'),
        style: {
            flexBasis: getFirstPaneSize()
        },
        ref: function(el) {
            paneContainers.current[0] = el;
        }
    }, firstPane);
    var secondPaneNode = _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls + "-pane", 'second-pane'),
        ref: function(el) {
            paneContainers.current[1] = el;
        }
    }, secondPane);
    return _index.default.createElement(Tag, {
        style: style,
        className: classNames,
        ref: wrapperRef
    }, isReverse ? secondPaneNode : firstPaneNode, !disabled && _index.default.createElement(_resizetrigger.default, {
        className: prefixCls + "-trigger",
        direction: isTriggerHorizontal ? DIRECTION_HORIZONTAL : DIRECTION_VERTICAL,
        icon: icon,
        onMouseDown: onTriggerMouseDown,
        onResize: onTriggerResize
    }, trigger), isReverse ? firstPaneNode : secondPaneNode);
}
var SplitComponent = (0, _index.forwardRef)(Split);
SplitComponent.displayName = 'ResizeBoxSplit';
var _default = SplitComponent;
},
"../../node_modules/@arco-design/web-react/es/Skeleton/image.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return image;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
function image(props) {
    var _a;
    var style = props.style, _b = props.shape, shape = _b === void 0 ? 'square' : _b, size = props.size, _c = props.position, position = _c === void 0 ? 'left' : _c, className = props.className, prefixCls = props.prefixCls;
    var classNames = (0, _classNames.default)(prefixCls + "-image", (_a = {}, _a[prefixCls + "-image-" + position] = position, _a[prefixCls + "-image-" + shape] = shape, _a[prefixCls + "-image-" + size] = size, _a), className);
    return _index.default.createElement("div", {
        className: classNames,
        style: style
    });
}
},
"../../node_modules/@arco-design/web-react/es/Skeleton/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _text = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Skeleton/text.js"));
var _image = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Skeleton/image.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function getComponentProps(prop) {
    return (0, _is.isObject)(prop) ? prop : {};
}
var defaultProps = {
    text: true,
    loading: true
};
function Skeleton(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Skeleton);
    var style = props.style, className = props.className, animation = props.animation, loading = props.loading, image = props.image, text = props.text, children = props.children;
    var imageProps = getComponentProps(image);
    var textProps = getComponentProps(text);
    var prefixCls = getPrefixCls('skeleton');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-animate"] = animation, _a), className);
    function renderImage() {
        return image && _index.default.createElement("div", {
            className: prefixCls + "-header"
        }, _index.default.createElement(_image.default, __assign({
            prefixCls: prefixCls
        }, imageProps)));
    }
    function renderText() {
        return text && _index.default.createElement("div", {
            className: prefixCls + "-content"
        }, _index.default.createElement(_text.default, __assign({
            prefixCls: prefixCls
        }, textProps)));
    }
    return _index.default.createElement(_index.default.Fragment, null, loading ? _index.default.createElement("div", {
        className: classNames,
        style: style,
        ref: ref
    }, imageProps.position !== 'right' && renderImage(), renderText(), imageProps.position === 'right' && renderImage()) : children);
}
var SkeletonComponent = (0, _index.forwardRef)(Skeleton);
SkeletonComponent.displayName = 'Skeleton';
var _default = SkeletonComponent;
},
"../../node_modules/@arco-design/web-react/es/Skeleton/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Skeleton/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Skeleton/text.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return text;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
function text(props) {
    var style = props.style, _a = props.width, width = _a === void 0 ? '60%' : _a, _b = props.rows, rows = _b === void 0 ? 3 : _b, className = props.className, prefixCls = props.prefixCls;
    var classNames = (0, _classNames.default)(prefixCls + "-text", className);
    var nodes = [];
    function getTextWidth(index) {
        if ((0, _is.isArray)(width)) return width[index];
        if (rows - 1 === index) return width;
        return undefined;
    }
    for(var i = 0; i < rows; i++)nodes.push(_index.default.createElement("li", {
        className: prefixCls + "-text-row",
        key: i,
        style: {
            width: getTextWidth(i)
        }
    }));
    return _index.default.createElement("ul", {
        className: classNames,
        style: style
    }, nodes);
}
},
"../../node_modules/@arco-design/web-react/es/Slider/button.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/index.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var SliderButton = function(props) {
    var _a;
    var style = props.style, disabled = props.disabled, prefixCls = props.prefixCls, value = props.value, vertical = props.vertical, tooltipVisible = props.tooltipVisible, tooltipPosition = props.tooltipPosition, formatTooltip = props.formatTooltip, getTooltipContainer = props.getTooltipContainer, onMoving = props.onMoving, onMoveEnd = props.onMoveEnd, onMoveBegin = props.onMoveBegin;
    var _b = __read((0, _index.useState)(false), 2), isActive = _b[0], setIsActive = _b[1];
    var _c = __read((0, _useMergeValue.default)(false, {
        value: tooltipVisible
    }), 2), popupVisible = _c[0], setPopupVisible = _c[1];
    var getPrefixCls = (0, _index.useContext)(_index2.ConfigContext).getPrefixCls;
    var position = (0, _index.useMemo)(function() {
        return tooltipPosition || (vertical ? 'right' : 'top');
    }, [
        tooltipPosition,
        vertical
    ]);
    var delayTimer = (0, _index.useRef)(null);
    var inButtonOrPopup = (0, _index.useRef)(false);
    var isDragging = (0, _index.useRef)(false);
    var tooltip = (0, _index.useRef)(null);
    function handleMouseDown(e) {
        e.stopPropagation();
        if (disabled) return;
        moveStart(e);
        setIsActive(true);
        (0, _dom.on)(window, 'mousemove', moving);
        (0, _dom.on)(window, 'touchmove', moving);
        (0, _dom.on)(window, 'mouseup', moveEnd);
        (0, _dom.on)(window, 'touchend', moveEnd);
        (0, _dom.on)(window, 'contextmenu', moveEnd);
    }
    function handleMouseEnter() {
        inButtonOrPopup.current = true;
        clearDelayTimer();
        if (!popupVisible) delayTimer.current = setTimeout(function() {
            updatePopupVisible(true);
        }, 50);
    }
    function handleMouseLeave() {
        inButtonOrPopup.current = false;
        if (!isDragging.current) {
            clearDelayTimer();
            delayTimer.current = setTimeout(function() {
                updatePopupVisible(false);
            }, 200);
        }
    }
    function moveStart(e) {
        e.preventDefault();
        var activeElement = document.activeElement;
        activeElement && activeElement.blur && activeElement.blur();
        (0, _is.isFunction)(onMoveBegin) && onMoveBegin();
    }
    function moving(e) {
        isDragging.current = true;
        if (e.type === 'touchstart') {
            e.clientY = e.touches[0].clientY;
            e.clientX = e.touches[0].clientX;
        }
        (0, _is.isFunction)(onMoving) && onMoving(e.clientX, e.clientY);
    }
    function moveEnd() {
        isDragging.current = false;
        setIsActive(false);
        offEvents();
        updatePopupVisible(inButtonOrPopup.current);
        (0, _is.isFunction)(onMoveEnd) && onMoveEnd();
    }
    function offEvents() {
        clearDelayTimer();
        (0, _dom.off)(window, 'mousemove', moving);
        (0, _dom.off)(window, 'touchmove', moving);
        (0, _dom.off)(window, 'mouseup', moveEnd);
        (0, _dom.off)(window, 'touchend', moveEnd);
        (0, _dom.off)(window, 'contextmenu', moveEnd);
    }
    function clearDelayTimer() {
        if (delayTimer.current) {
            clearTimeout(delayTimer.current);
            delayTimer.current = null;
        }
    }
    function updatePopupVisible(value) {
        if (isDragging.current) return;
        var newPopupVisible = 'tooltipVisible' in props ? tooltipVisible : value;
        setPopupVisible(newPopupVisible);
    }
    function handlePopupMouseEnter() {
        inButtonOrPopup.current = true;
        clearDelayTimer();
    }
    var tooltipText = (0, _index.useMemo)(function() {
        return (0, _is.isFunction)(formatTooltip) ? formatTooltip(value) : value;
    }, [
        formatTooltip,
        value
    ]);
    function renderTooltipContent(position) {
        var tooltipPrefixCls = getPrefixCls('tooltip');
        return _index.default.createElement("div", {
            className: (0, _classNames.default)(tooltipPrefixCls + "-content", tooltipPrefixCls + "-content-" + position),
            onMouseLeave: handleMouseLeave,
            onMouseEnter: handlePopupMouseEnter,
            onClick: function(e) {
                e.stopPropagation();
            }
        }, _index.default.createElement("div", {
            className: tooltipPrefixCls + "-content-inner"
        }, tooltipText));
    }
    (0, _index.useEffect)(function() {
        tooltip && tooltip.current && tooltip.current.updatePopupPosition();
    }, [
        value
    ]);
    return _index.default.createElement(_index1.default, {
        style: {
            maxWidth: 350
        },
        classNames: "zoomInFadeOut",
        duration: {
            enter: 300,
            exit: 100
        },
        showArrow: true,
        popupAlign: {
            left: 12,
            right: 12,
            top: 12,
            bottom: 12
        },
        ref: tooltip,
        popup: function() {
            return renderTooltipContent(position);
        },
        popupVisible: popupVisible,
        disabled: tooltipVisible === false,
        getPopupContainer: getTooltipContainer,
        position: position,
        childrenPrefix: getPrefixCls('tooltip')
    }, _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls + "-button", (_a = {}, _a[prefixCls + "-button-active"] = isActive, _a)),
        onMouseDown: handleMouseDown,
        onMouseEnter: handleMouseEnter,
        onMouseLeave: handleMouseLeave,
        style: style,
        role: "slider",
        "aria-valuemax": props.maxValue,
        "aria-valuemin": props.minValue,
        "aria-valuenow": value,
        "aria-disabled": !!disabled,
        tabIndex: 0,
        "aria-valuetext": (0, _is.isString)(tooltipText) || (0, _is.isNumber)(tooltipText) ? String(tooltipText) : undefined
    }));
};
var _default = (0, _index.memo)(SliderButton);
},
"../../node_modules/@arco-design/web-react/es/Slider/dots.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/utils.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Dots = function(props) {
    var _a = props.data, data = _a === void 0 ? [] : _a, _b = props.value, value = _b === void 0 ? [] : _b, vertical = props.vertical, prefixCls = props.prefixCls, reverse = props.reverse, intervalConfigs = props.intervalConfigs;
    if (!data.length) return null;
    return _index.default.createElement("div", {
        className: prefixCls + "-dots"
    }, data.map(function(_a) {
        var _b, _c, _d;
        var key = _a.key, content = _a.content;
        var offset = (0, _utils.formatPercent)((0, _utils.getIntervalOffset)(+key, intervalConfigs));
        return _index.default.createElement("div", {
            className: prefixCls + "-dot-wrapper",
            key: key,
            style: __assign({}, vertical ? (_b = {}, _b[reverse ? 'top' : 'bottom'] = offset, _b) : (_c = {}, _c[reverse ? 'right' : 'left'] = offset, _c)),
            onMouseDown: function(e) {
                e.stopPropagation();
                (0, _is.isFunction)(props.onMouseDown) && props.onMouseDown(parseFloat(key));
            }
        }, (0, _is.isObject)(content) && content.dot ? content.dot : _index.default.createElement("div", {
            className: (0, _classNames.default)(prefixCls + "-dot", (_d = {}, _d[prefixCls + "-dot-active"] = (0, _utils.valueInRange)(key, value), _d))
        }));
    }));
};
var _default = (0, _index.memo)(Dots);
},
"../../node_modules/@arco-design/web-react/es/Slider/hooks/useInterval.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/utils.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function getIntervals(nums) {
    if (nums.length < 2) return [];
    var result = [];
    for(var i = 1; i < nums.length; i++){
        var begin = nums[i - 1];
        var end = nums[i];
        result.push([
            begin,
            end
        ]);
    }
    return result;
}
function useInterval(props) {
    var _a = props.marks, marks = _a === void 0 ? {} : _a, getIntervalConfig = props.getIntervalConfig, max = props.max, min = props.min;
    var _b = (0, _index.useMemo)(function() {
        var markKeys = Object.keys(marks).filter(function(key) {
            return (0, _is.isNumber)(+key) && +key >= min && +key <= max;
        }).sort(function(a, b) {
            return +a > +b ? 1 : -1;
        });
        var markList = markKeys.map(function(key) {
            return {
                key: key,
                content: marks[key]
            };
        });
        var markValues = markKeys.map(function(key) {
            return +key;
        });
        if (markValues.length === 0) markValues = [
            min,
            max
        ];
        else {
            if (markValues[0] > min) {
                markValues.unshift(min);
                markList.unshift({
                    key: "" + min,
                    content: ''
                });
            }
            if (markValues.slice(-1)[0] < max) {
                markValues.push(max);
                markList.push({
                    key: "" + max,
                    content: ''
                });
            }
        }
        var markIntervals = getIntervals(markValues);
        return {
            markIntervals: markIntervals,
            markList: markList
        };
    }, [
        marks,
        min,
        max
    ]), markIntervals = _b.markIntervals, markList = _b.markList;
    if (!(0, _is.isFunction)(getIntervalConfig)) return {
        intervalConfigs: [
            {
                begin: min,
                end: max,
                step: props.step,
                beginOffset: 0,
                endOffset: 1,
                width: 1
            }
        ],
        markList: markList
    };
    var getStepAndWidth = function(_a, index) {
        var _b = __read(_a, 2), begin = _b[0], end = _b[1];
        var config = {
            step: props.step,
            width: 0
        };
        var customConfig = getIntervalConfig([
            begin,
            end
        ], index) || {};
        var step = customConfig.step;
        var width = (0, _utils.rateToFloat)(customConfig.width);
        if ((0, _is.isNumber)(step) && step) config.step = step;
        if ((0, _is.isNumber)(width) && width) config.width = width;
        return config;
    };
    var getIntervalConfigs = function() {
        var remainWidth = 1;
        var remainLen = max - min;
        var stepAndWidthConfig = markIntervals.map(function(_a, index) {
            var _b = __read(_a, 2), begin = _b[0], end = _b[1];
            var stepAndWidth = getStepAndWidth([
                begin,
                end
            ], index);
            var width = stepAndWidth.width;
            if (width) {
                width = Math.min(remainWidth, width);
                var len = end - begin;
                remainLen -= len;
                remainWidth -= width;
            }
            return {
                width: width,
                step: stepAndWidth.step
            };
        });
        if (stepAndWidthConfig.every(function(_a) {
            var width = _a.width;
            return width;
        }) && remainWidth) {
            var lastIntervalConfig = stepAndWidthConfig[markIntervals.length - 1];
            lastIntervalConfig.width += remainWidth;
        }
        var allConfigs = [];
        markIntervals.forEach(function(_a, index) {
            var _b = __read(_a, 2), begin = _b[0], end = _b[1];
            var _c = stepAndWidthConfig[index], step = _c.step, width = _c.width;
            var config = {
                begin: begin,
                end: end,
                step: step,
                beginOffset: 0,
                endOffset: 0,
                width: width
            };
            if (!config.width) config.width = remainWidth * ((end - begin) / remainLen);
            var prevIndex = allConfigs.length - 1;
            if (allConfigs[prevIndex]) config.beginOffset = allConfigs[prevIndex].endOffset;
            config.endOffset = Math.min(1, config.beginOffset + config.width);
            allConfigs.push(config);
        });
        return allConfigs;
    };
    var intervalConfigs = getIntervalConfigs();
    return {
        intervalConfigs: intervalConfigs,
        markList: markList
    };
}
var _default = useInterval;
},
"../../node_modules/@arco-design/web-react/es/Slider/hooks/useLegalValue.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useLegalValue;
    }
});
var _indexes = __webpack_require__("../../node_modules/number-precision/build/index.es.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/utils.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function useLegalValue(props) {
    var isRange = props.isRange, min = props.min, max = props.max, onlyMarkValue = props.onlyMarkValue, intervalConfigs = props.intervalConfigs, marks = props.marks;
    function getPrecisionValue(val) {
        var _a = intervalConfigs.find(function(config) {
            return val >= config.begin && val <= config.end;
        }), begin = _a.begin, step = _a.step;
        var offsetVal = val - begin;
        var stepNum = Math.round(offsetVal / step);
        var precision = (0, _utils.getPrecision)(step);
        var currentIntervalPrecision = parseFloat((0, _indexes.times)(step, stepNum).toFixed(precision));
        return (0, _indexes.plus)(begin, currentIntervalPrecision);
    }
    function getMarkValue(val) {
        if (!(0, _is.isObject)(marks) || (0, _is.isEmptyObject)(marks)) {
            console.warn('marks must be an object when onlyMarkValue is true');
            return min;
        }
        if (marks[val]) return val;
        var keys = Object.keys(marks);
        var diffs = keys.map(function(x) {
            return Math.abs(val - parseFloat(x));
        });
        var minIndex = diffs.indexOf(Math.min.apply(null, diffs));
        return parseFloat(keys[minIndex]);
    }
    function getLegalValue(val) {
        if ((0, _is.isUndefined)(val)) return min;
        if (val <= min) return min;
        if (val >= max) return max;
        if (onlyMarkValue) return getMarkValue(val);
        return getPrecisionValue(val);
    }
    function isLegalValue(val) {
        return getLegalValue(val) === val;
    }
    function getLegalRangeValue(val) {
        var _a = __read([
            min,
            min
        ], 2), beginVal = _a[0], endVal = _a[1];
        if (isRange) {
            if ((0, _is.isArray)(val)) {
                beginVal = getLegalValue(val[0]);
                endVal = getLegalValue(val[1]);
            } else console.error('value must be an array when range is true');
        } else if ((0, _is.isNumber)(val)) endVal = getLegalValue(val);
        else console.error('value must be a number when range is false');
        return [
            beginVal,
            endVal
        ];
    }
    return {
        getLegalRangeValue: getLegalRangeValue,
        getLegalValue: getLegalValue,
        isLegalValue: isLegalValue
    };
}
},
"../../node_modules/@arco-design/web-react/es/Slider/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _indexes = __webpack_require__("../../node_modules/number-precision/build/index.es.js");
var _button = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/button.js"));
var _marks = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/marks.js"));
var _dots = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/dots.js"));
var _input = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/input.js"));
var _ticks = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/ticks.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/utils.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _useMergeValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js"));
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _useLegalValue = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/hooks/useLegalValue.js"));
var _useInterval = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/hooks/useInterval.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var _useUpdate = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useUpdate.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function isSameOrder(firstNums, secondNums) {
    var diff1 = firstNums[0] - firstNums[1];
    var diff2 = secondNums[0] - secondNums[1];
    return diff1 <= 0 === diff2 <= 0;
}
var defaultProps = {
    max: 100,
    min: 0,
    step: 1
};
function Slider(baseProps, ref) {
    var _a, _b, _c;
    var _d = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _d.getPrefixCls, componentConfig = _d.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Slider);
    var className = props.className, style = props.style, tooltipVisible = props.tooltipVisible, tooltipPosition = props.tooltipPosition, disabled = props.disabled, min = props.min, max = props.max, propRange = props.range, step = props.step, showTicks = props.showTicks, marks = props.marks, onlyMarkValue = props.onlyMarkValue, vertical = props.vertical, showInput = props.showInput, reverse = props.reverse, getIntervalConfig = props.getIntervalConfig;
    var range = !!propRange;
    var rangeConfig = (0, _is.isObject)(propRange) ? __assign({}, propRange) : {
        draggableBar: false
    };
    var _e = (0, _useInterval.default)({
        min: min,
        max: max,
        onlyMarkValue: onlyMarkValue,
        step: step,
        marks: marks,
        getIntervalConfig: getIntervalConfig
    }), intervalConfigs = _e.intervalConfigs, markList = _e.markList;
    var _f = (0, _useLegalValue.default)({
        isRange: range,
        min: min,
        max: max,
        onlyMarkValue: onlyMarkValue,
        step: step,
        intervalConfigs: intervalConfigs,
        marks: marks
    }), getLegalValue = _f.getLegalValue, getLegalRangeValue = _f.getLegalRangeValue, isLegalValue = _f.isLegalValue;
    var _g = __read((0, _useMergeValue.default)(range ? [
        min,
        min
    ] : min, {
        defaultValue: props.defaultValue,
        value: props.value
    }), 2), value = _g[0], setValue = _g[1];
    var curVal = getLegalRangeValue(value);
    var lastVal = (0, _index.useRef)(curVal);
    var _h = __read(curVal, 2), beginVal = _h[0], endVal = _h[1];
    (0, _useUpdate.default)(function() {
        lastVal.current = getLegalRangeValue(value);
    }, [
        value,
        getLegalRangeValue
    ]);
    if (!isSameOrder(curVal, lastVal.current)) _a = __read([
        endVal,
        beginVal
    ], 2), beginVal = _a[0], endVal = _a[1];
    var beginOffset = (0, _utils.getIntervalOffset)(beginVal, intervalConfigs);
    var endOffset = (0, _utils.getIntervalOffset)(endVal, intervalConfigs);
    var isShowInput = showInput && !onlyMarkValue;
    var extraInputProps = (0, _index.useMemo)(function() {
        if (isShowInput && ((0, _is.isArray)(showInput) || (0, _is.isObject)(showInput))) return (0, _is.isArray)(showInput) ? __spreadArray([], __read(showInput), false) : [
            __assign({}, showInput),
            __assign({}, showInput)
        ];
        return [];
    }, [
        isShowInput,
        showInput
    ]);
    var prefixCls = getPrefixCls('slider');
    var roadRef = (0, _index.useRef)(null);
    var position = (0, _index.useRef)({
        left: 0,
        height: 0,
        top: 0,
        width: 0
    });
    var isDragging = (0, _index.useRef)(false);
    var barStartDragVal = (0, _index.useRef)(0);
    function getEmitParams(_a) {
        var _b;
        var _c = __read(_a, 2), beginVal = _c[0], endVal = _c[1];
        if (beginVal > endVal) _b = __read([
            endVal,
            beginVal
        ], 2), beginVal = _b[0], endVal = _b[1];
        return range ? [
            beginVal,
            endVal
        ] : endVal;
    }
    function updateValue(val) {
        var _a = __read(val, 2), newBeginVal = _a[0], newEndVal = _a[1];
        newBeginVal = getLegalValue(newBeginVal);
        newEndVal = getLegalValue(newEndVal);
        lastVal.current = [
            newBeginVal,
            newEndVal
        ];
        var emitParams = getEmitParams([
            newBeginVal,
            newEndVal
        ]);
        setValue(emitParams);
        return emitParams;
    }
    function onChange(val) {
        var emitParams = updateValue(val);
        if ((0, _is.isFunction)(props.onChange)) props.onChange(emitParams);
    }
    function onMouseUp() {
        if ((0, _is.isFunction)(props.onAfterChange)) {
            var emitParams = getEmitParams(lastVal.current);
            props.onAfterChange(emitParams);
        }
    }
    function inRange(val) {
        var _a;
        var _b = __read([
            beginVal,
            endVal
        ], 2), range1 = _b[0], range2 = _b[1];
        if (range1 > range2) _a = __read([
            range2,
            range1
        ], 2), range1 = _a[0], range2 = _a[1];
        if (range) return val >= range1 && val <= range2;
        return val <= range2;
    }
    function getValueByCoords(x, y) {
        var _a = position.current, left = _a.left, top = _a.top, width = _a.width, height = _a.height;
        var roadLength = width;
        var diff = reverse ? left + width - x : x - left;
        if (vertical) {
            roadLength = height;
            diff = reverse ? y - top : top + height - y;
        }
        if (roadLength <= 0) return 0;
        var offset = Math.max((0, _indexes.divide)(diff, roadLength), 0);
        offset = Math.min(1, offset);
        var currentInterval = intervalConfigs.find(function(config) {
            return offset >= config.beginOffset && offset <= config.endOffset;
        });
        var begin = currentInterval.begin, beginOffset = currentInterval.beginOffset, currentStep = currentInterval.step, endOffset = currentInterval.endOffset, end = currentInterval.end;
        var currentValueOffset = offset - beginOffset;
        var currentIntervalOffset = endOffset - beginOffset;
        var valueInInterval = currentValueOffset / currentIntervalOffset * (end - begin);
        var stepNum = Math.round(valueInInterval / currentStep);
        return (0, _indexes.plus)(begin, (0, _indexes.times)(stepNum, currentStep));
    }
    function getBarStyle(offsets) {
        var _a, _b, _c;
        var _d = __read(offsets, 2), begin = _d[0], end = _d[1];
        if (begin > end) _a = __read([
            end,
            begin
        ], 2), begin = _a[0], end = _a[1];
        var beginOffset = (0, _utils.formatPercent)(begin);
        var endOffset = (0, _utils.formatPercent)(1 - end);
        return vertical ? (_b = {}, _b[reverse ? 'top' : 'bottom'] = beginOffset, _b[reverse ? 'bottom' : 'top'] = endOffset, _b) : (_c = {}, _c[reverse ? 'right' : 'left'] = beginOffset, _c[reverse ? 'left' : 'right'] = endOffset, _c);
    }
    function getBtnStyle(offset) {
        var _a, _b;
        return vertical ? (_a = {}, _a[reverse ? 'top' : 'bottom'] = (0, _utils.formatPercent)(offset), _a) : (_b = {}, _b[reverse ? 'right' : 'left'] = (0, _utils.formatPercent)(offset), _b);
    }
    function getTooltipProps() {
        var tooltipProps = {
            getTooltipContainer: props.getTooltipContainer,
            formatTooltip: props.formatTooltip
        };
        if ('tooltipPosition' in props) tooltipProps.tooltipPosition = tooltipPosition;
        if ('tooltipVisible' in props) tooltipProps.tooltipVisible = tooltipVisible;
        return tooltipProps;
    }
    function getPosition() {
        position.current = roadRef.current.getBoundingClientRect();
    }
    function onRoadMouseDown(e) {
        getPosition();
        var val = getValueByCoords(e.clientX, e.clientY);
        if (rangeConfig.draggableBar && inRange(val)) {
            barStartDragVal.current = getLegalValue(val);
            (0, _dom.on)(window, 'mousemove', onBarMouseMove);
            (0, _dom.on)(window, 'mouseup', onBarMouseUp);
        } else handleJumpClick(val);
    }
    function handleJumpClick(val) {
        if (disabled) return;
        var value = getLegalValue(val);
        if (range && endVal - value > value - beginVal) onChange([
            value,
            endVal
        ]);
        else onChange([
            beginVal,
            value
        ]);
        onMouseUp();
    }
    function handleInputChange(val) {
        onChange(val);
        onMouseUp();
    }
    function handleBeginMove(x, y) {
        isDragging.current = true;
        onChange([
            getValueByCoords(x, y),
            endVal
        ]);
    }
    function handleEndMove(x, y) {
        isDragging.current = true;
        onChange([
            beginVal,
            getValueByCoords(x, y)
        ]);
    }
    function handleMoveEnd() {
        isDragging.current = false;
        onMouseUp();
    }
    function onBarMouseMove(e) {
        var newVal = getLegalValue(getValueByCoords(e.clientX, e.clientY));
        var offsetVal = newVal - barStartDragVal.current;
        var newBeginVal = beginVal + offsetVal;
        var newEndVal = endVal + offsetVal;
        if (isLegalValue(newBeginVal) && isLegalValue(newEndVal)) onChange([
            newBeginVal,
            newEndVal
        ]);
    }
    function onBarMouseUp() {
        (0, _dom.off)(window, 'mousemove', onBarMouseMove);
        (0, _dom.off)(window, 'mouseup', onBarMouseUp);
        onMouseUp();
    }
    return _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls, (_b = {}, _b[prefixCls + "-vertical"] = vertical, _b[prefixCls + "-with-marks"] = marks, _b[prefixCls + "-reverse"] = reverse, _b), className),
        style: style,
        ref: ref
    }, _index.default.createElement("div", {
        className: prefixCls + "-wrapper"
    }, _index.default.createElement("div", {
        ref: roadRef,
        className: (0, _classNames.default)(prefixCls + "-road", (_c = {}, _c[prefixCls + "-road-disabled"] = disabled, _c[prefixCls + "-road-vertical"] = vertical, _c)),
        onMouseDown: onRoadMouseDown
    }, _index.default.createElement("div", {
        className: prefixCls + "-bar",
        style: getBarStyle([
            beginOffset,
            endOffset
        ])
    }), showTicks && _index.default.createElement(_ticks.default, {
        intervalConfigs: intervalConfigs,
        min: min,
        max: max,
        value: [
            beginVal,
            endVal
        ],
        prefixCls: prefixCls,
        vertical: vertical,
        reverse: reverse
    }), _index.default.createElement(_dots.default, {
        data: markList,
        intervalConfigs: intervalConfigs,
        value: [
            beginVal,
            endVal
        ],
        vertical: vertical,
        prefixCls: prefixCls,
        reverse: reverse,
        onMouseDown: handleJumpClick
    }), _index.default.createElement(_marks.default, {
        data: markList,
        intervalConfigs: intervalConfigs,
        vertical: vertical,
        prefixCls: prefixCls,
        reverse: reverse,
        onMouseDown: handleJumpClick
    }), range && _index.default.createElement(_button.default, __assign({
        style: getBtnStyle(beginOffset),
        disabled: disabled,
        prefixCls: prefixCls,
        value: beginVal,
        maxValue: max,
        minValue: min,
        vertical: vertical
    }, getTooltipProps(), {
        onMoveBegin: getPosition,
        onMoving: handleBeginMove,
        onMoveEnd: handleMoveEnd
    })), _index.default.createElement(_button.default, __assign({
        style: getBtnStyle(endOffset),
        disabled: disabled,
        prefixCls: prefixCls,
        value: endVal,
        maxValue: max,
        minValue: min,
        vertical: vertical
    }, getTooltipProps(), {
        onMoveBegin: getPosition,
        onMoving: handleEndMove,
        onMoveEnd: handleMoveEnd
    }))), isShowInput && _index.default.createElement(_input.default, {
        min: min,
        max: max,
        step: step,
        value: [
            beginVal,
            endVal
        ],
        range: range,
        disabled: disabled,
        prefixCls: prefixCls,
        onChange: handleInputChange,
        extra: extraInputProps
    })));
}
var SliderComponent = (0, _index.forwardRef)(Slider);
SliderComponent.displayName = 'Slider';
var _default = (0, _index.memo)(SliderComponent);
},
"../../node_modules/@arco-design/web-react/es/Slider/input.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/InputNumber/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var Input = function(props) {
    var _a;
    var value = props.value, range = props.range, min = props.min, max = props.max, step = props.step, disabled = props.disabled, prefixCls = props.prefixCls, onChange = props.onChange, _b = props.extra, extra = _b === void 0 ? [] : _b;
    var baseProps = {
        min: min,
        max: max,
        step: step,
        disabled: disabled
    };
    var _c = __read((0, _index.useState)(value), 2), innerValue = _c[0], setInnerValue = _c[1];
    var beginExtraProps = extra[0];
    var endExtraProps = range ? extra[1] : extra[0];
    (0, _index.useEffect)(function() {
        setInnerValue(value);
    }, [
        value
    ]);
    var handleChange = function(val) {
        onChange === null || onChange === void 0 || onChange(val);
    };
    var handleBlur = function() {
        setInnerValue(__spreadArray([], __read(value), false).sort(function(a, b) {
            return a - b;
        }));
    };
    return _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls + "-input", (_a = {}, _a[prefixCls + "-input-group"] = range, _a)),
        onBlur: handleBlur
    }, range && [
        _index.default.createElement(_index1.default, __assign({}, __assign(__assign({
            hideControl: true
        }, beginExtraProps), baseProps), {
            value: innerValue[0],
            key: 0,
            onChange: function(val) {
                handleChange([
                    val,
                    innerValue[1]
                ]);
                (beginExtraProps === null || beginExtraProps === void 0 ? void 0 : beginExtraProps.onChange) && (beginExtraProps === null || beginExtraProps === void 0 || beginExtraProps.onChange(val));
            }
        })),
        _index.default.createElement("div", {
            key: 1,
            className: prefixCls + "-input-range"
        }, _index.default.createElement("span", {
            className: prefixCls + "-input-range-content"
        }))
    ], _index.default.createElement(_index1.default, __assign({}, __assign(__assign({
        hideControl: true
    }, endExtraProps), baseProps), {
        key: 2,
        value: innerValue[1],
        onChange: function(val) {
            handleChange([
                innerValue[0],
                val
            ]);
            (endExtraProps === null || endExtraProps === void 0 ? void 0 : endExtraProps.onChange) && (endExtraProps === null || endExtraProps === void 0 || endExtraProps.onChange(val));
        }
    })));
};
var _default = (0, _index.memo)(Input);
},
"../../node_modules/@arco-design/web-react/es/Slider/marks.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/utils.js");
var Marks = function(props) {
    var _a = props.data, data = _a === void 0 ? [] : _a, vertical = props.vertical, prefixCls = props.prefixCls, reverse = props.reverse, intervalConfigs = props.intervalConfigs;
    if (!data.length) return null;
    return _index.default.createElement("div", {
        className: prefixCls + "-marks"
    }, data.map(function(_a) {
        var _b, _c;
        var key = _a.key, content = _a.content;
        var offset = (0, _utils.formatPercent)((0, _utils.getIntervalOffset)(+key, intervalConfigs));
        var dom = null;
        if ((0, _is.isObject)(content) && (0, _utils.isNotEmpty)(content.text)) dom = content.text;
        else if ((0, _utils.isNotEmpty)(content)) dom = content;
        return (0, _utils.isNotEmpty)(dom) && _index.default.createElement("div", {
            className: prefixCls + "-marks-text",
            "aria-hidden": true,
            key: key,
            style: vertical ? (_b = {}, _b[reverse ? 'top' : 'bottom'] = offset, _b) : (_c = {}, _c[reverse ? 'right' : 'left'] = offset, _c),
            onMouseDown: function(e) {
                e.stopPropagation();
                (0, _is.isFunction)(props.onMouseDown) && props.onMouseDown(parseFloat(key));
            }
        }, dom);
    }));
};
var _default = (0, _index.memo)(Marks);
},
"../../node_modules/@arco-design/web-react/es/Slider/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/InputNumber/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Slider/ticks.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _indexes = __webpack_require__("../../node_modules/number-precision/build/index.es.js");
var _utils = __webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/utils.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _default = (0, _index.memo)(function Ticks(props) {
    var min = props.min, max = props.max, value = props.value, prefixCls = props.prefixCls, vertical = props.vertical, reverse = props.reverse, intervalConfigs = props.intervalConfigs;
    var stepsMap = new Map();
    var getCurrentSteps = function(interval) {
        var step = interval.step, begin = interval.begin, end = interval.end;
        var stepsLength = Math.floor((end - begin) / step);
        for(var i = 0; i <= stepsLength; i++){
            var stepVal = (0, _indexes.plus)(i * step, begin);
            if (stepVal <= min || stepVal >= max) continue;
            var offset = (0, _utils.formatPercent)((0, _utils.getIntervalOffset)(stepVal, intervalConfigs));
            stepsMap.set(offset, {
                offset: offset,
                isActive: (0, _utils.valueInRange)(stepVal, value)
            });
        }
    };
    var steps = (0, _index.useMemo)(function() {
        stepsMap.clear();
        intervalConfigs.forEach(function(interval) {
            return getCurrentSteps(interval);
        });
        return Array.from(stepsMap.values());
    }, [
        intervalConfigs
    ]);
    return _index.default.createElement("div", {
        className: prefixCls + "-ticks"
    }, steps.map(function(item, index) {
        var _a, _b, _c;
        return _index.default.createElement("div", {
            key: index,
            className: (0, _classNames.default)(prefixCls + "-tick", (_a = {}, _a[prefixCls + "-tick-active"] = item.isActive, _a)),
            style: vertical ? (_b = {}, _b[reverse ? 'top' : 'bottom'] = item.offset, _b) : (_c = {}, _c[reverse ? 'right' : 'left'] = item.offset, _c)
        });
    }));
});
},
"../../node_modules/@arco-design/web-react/es/Slider/utils.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getPrecision: function() {
        return getPrecision;
    },
    formatPercent: function() {
        return formatPercent;
    },
    getOffset: function() {
        return getOffset;
    },
    valueInRange: function() {
        return valueInRange;
    },
    isNotEmpty: function() {
        return isNotEmpty;
    },
    rateToFloat: function() {
        return rateToFloat;
    },
    getIntervalOffset: function() {
        return getIntervalOffset;
    }
});
var _indexes = __webpack_require__("../../node_modules/number-precision/build/index.es.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function getPrecision(val) {
    var decimal = ("" + val).split('.')[1];
    return decimal && decimal.length || 0;
}
function formatPercent(val) {
    return val * 100 + "%";
}
function getOffset(val, range) {
    var value = Number(val);
    if (range && !isNaN(value)) {
        var _a = __read(range, 2), min = _a[0], max = _a[1];
        return (0, _indexes.divide)((0, _indexes.minus)(value, min), (0, _indexes.minus)(max, min));
    }
    return 0;
}
function valueInRange(val, range) {
    var value = Number(val);
    range.sort(function(a, b) {
        return a - b;
    });
    return value >= range[0] && value <= range[1];
}
function isNotEmpty(val) {
    return val || val === 0;
}
function rateToFloat(val) {
    var rate = parseFloat(val);
    var fixedRate = rate > 1 ? (rate / 100).toFixed(2) : rate;
    var floatRate = parseFloat(fixedRate);
    if (!isNaN(floatRate) && floatRate >= 0 && floatRate <= 1) return floatRate;
    return undefined;
}
function getIntervalOffset(val, intervalConfig) {
    var currentInterval = intervalConfig.find(function(config) {
        return val >= config.begin && val <= config.end;
    });
    if (currentInterval) {
        var beginOffset = currentInterval.beginOffset, begin = currentInterval.begin, end = currentInterval.end, endOffset = currentInterval.endOffset;
        var offsetInInterval = getOffset(val, [
            begin,
            end
        ]);
        var intervalOffset = (0, _indexes.minus)(endOffset, beginOffset);
        var offset = (0, _indexes.times)(offsetInInterval, intervalOffset);
        return (0, _indexes.plus)(beginOffset, offset);
    }
}
},
"../../node_modules/@arco-design/web-react/es/Space/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultProps = {
    size: 'small',
    direction: 'horizontal'
};
function Space(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Space);
    var className = props.className, style = props.style, children = props.children, size = props.size, direction = props.direction, align = props.align, wrap = props.wrap, split = props.split, rest = __rest(props, [
        "className",
        "style",
        "children",
        "size",
        "direction",
        "align",
        "wrap",
        "split"
    ]);
    var prefixCls = getPrefixCls('space');
    var innerAlign = align || (direction === 'horizontal' ? 'center' : '');
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-" + direction] = direction, _a[prefixCls + "-align-" + innerAlign] = innerAlign, _a[prefixCls + "-wrap"] = wrap, _a), className);
    function getMargin(size) {
        if ((0, _is.isNumber)(size)) return size;
        switch(size){
            case 'mini':
                return 4;
            case 'small':
                return 8;
            case 'medium':
                return 16;
            case 'large':
                return 24;
            default:
                return 8;
        }
    }
    var childrenList = _index.default.Children.toArray(children);
    function getMarginStyle(index) {
        var _a;
        var isLastOne = childrenList.length === index + 1;
        if (typeof size === 'string' || typeof size === 'number') {
            var margin = getMargin(size);
            if (wrap) return isLastOne ? {
                marginBottom: margin
            } : {
                marginRight: margin,
                marginBottom: margin
            };
            return !isLastOne ? (_a = {}, _a[direction === 'vertical' ? 'marginBottom' : 'marginRight'] = margin, _a) : {};
        }
        if ((0, _is.isArray)(size)) {
            var marginRight = getMargin(size[0]);
            var marginBottom = getMargin(size[1]);
            if (wrap) return isLastOne ? {
                marginBottom: marginBottom
            } : {
                marginRight: marginRight,
                marginBottom: marginBottom
            };
            if (direction === 'vertical') return {
                marginBottom: marginBottom
            };
            return {
                marginRight: marginRight
            };
        }
    }
    return _index.default.createElement("div", __assign({
        ref: ref,
        className: classNames,
        style: style
    }, rest), childrenList.map(function(child, index) {
        var shouldRenderSplit = split !== undefined && split !== null && index > 0;
        return _index.default.createElement(_index.Fragment, {
            key: index
        }, shouldRenderSplit && _index.default.createElement("div", {
            className: prefixCls + "-item-split"
        }, split), _index.default.createElement("div", {
            className: prefixCls + "-item",
            style: getMarginStyle(index)
        }, child));
    }));
}
var SpaceComponent = (0, _index.forwardRef)(Space);
SpaceComponent.displayName = 'Space';
var _default = SpaceComponent;
},
"../../node_modules/@arco-design/web-react/es/Space/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Space/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Statistic/countdown.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _dayjsmin = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/dayjs.min.js"));
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/Statistic/util.js");
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function Countdown(props, ref) {
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var className = props.className, style = props.style, title = props.title, styleValue = props.styleValue, value = props.value, start = props.start, format = props.format, onFinish = props.onFinish;
    var dayjsValue = (0, _dayjs.getDayjsValue)(value, format) || (0, _dayjsmin.default)();
    var now = (0, _dayjs.getDayjsValue)(props.now, format);
    var prefixCls = getPrefixCls('statistic');
    var _a = __read((0, _index.useState)((0, _util.getDateString)(Math.max(dayjsValue.diff(now, 'millisecond'), 0), format)), 2), valueShow = _a[0], setValueShow = _a[1];
    var timerRef = (0, _index.useRef)(null);
    var stopTimer = function() {
        clearInterval(timerRef.current);
        timerRef.current = null;
    };
    var startTimer = function() {
        timerRef.current = setInterval(function() {
            var _value = dayjsValue.diff((0, _dayjs.getNow)(), 'millisecond');
            if (_value <= 0) {
                stopTimer();
                onFinish && onFinish();
            }
            var valueShow = (0, _util.getDateString)(Math.max(_value, 0), format);
            setValueShow(valueShow);
        }, 1000 / 30);
    };
    (0, _index.useEffect)(function() {
        if (!timerRef.current && start) {
            if (dayjsValue.valueOf() >= Date.now()) startTimer();
        }
        return function() {
            stopTimer();
        };
    }, [
        props.start
    ]);
    return _index.default.createElement("div", {
        ref: ref,
        className: (0, _classNames.default)("" + prefixCls, prefixCls + "-countdown", className),
        style: style
    }, title && _index.default.createElement("div", {
        className: prefixCls + "-title"
    }, title), _index.default.createElement("div", {
        className: prefixCls + "-content"
    }, _index.default.createElement("div", {
        className: prefixCls + "-value",
        style: styleValue
    }, valueShow)));
}
var CountdownComponent = (0, _index.forwardRef)(Countdown);
CountdownComponent.displayName = 'StatisticCountdown';
CountdownComponent.defaultProps = {
    format: 'HH:mm:ss',
    start: true
};
var _default = CountdownComponent;
},
"../../node_modules/@arco-design/web-react/es/Statistic/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _btweenes = __webpack_require__.ir(__webpack_require__("../../node_modules/b-tween/dist/b-tween.es.js"));
var _dayjsmin = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/dayjs.min.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _countdown = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Statistic/countdown.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Skeleton/index.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var defaultProps = {
    countFrom: 0,
    countDuration: 2000
};
function Statistic(baseProps, ref) {
    var _a = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _a.getPrefixCls, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Statistic);
    var className = props.className, style = props.style, title = props.title, extra = props.extra, groupSeparator = props.groupSeparator, precision = props.precision, prefix = props.prefix, suffix = props.suffix, format = props.format, styleValue = props.styleValue, loading = props.loading;
    var tween = (0, _index.useRef)();
    var _b = __read((0, _index.useState)('value' in props ? props.value : undefined), 2), value = _b[0], setValue = _b[1];
    var prefixCls = getPrefixCls('statistic');
    var countUp = function(from, to) {
        if (from === void 0) from = props.countFrom;
        if (to === void 0) to = props.value;
        var countDuration = props.countDuration;
        if (from !== to) {
            tween.current = new _btweenes.default({
                from: {
                    value: from
                },
                to: {
                    value: to
                },
                duration: countDuration,
                easing: 'quartOut',
                onUpdate: function(keys) {
                    setValue(keys.value.toFixed(precision));
                },
                onFinish: function() {
                    setValue(to);
                }
            });
            tween.current.start();
        }
    };
    (0, _index.useEffect)(function() {
        if (props.countUp) {
            if (tween.current) tween.current.stop();
            if (value !== props.value) countUp(Number(value), props.value);
            else countUp();
        } else setValue(props.value);
        return function() {
            tween.current && tween.current.stop();
            tween.current = null;
        };
    }, [
        props.value
    ]);
    (0, _index.useImperativeHandle)(ref, function() {
        return {
            countUp: countUp
        };
    });
    var _c = (0, _index.useMemo)(function() {
        var _value = value;
        if (format) _value = (0, _dayjsmin.default)(value).format(format);
        if ((0, _is.isNumber)(precision) && precision >= 0) _value = Number(value).toFixed(precision);
        var int = String(_value).split('.')[0];
        var decimal = String(_value).split('.')[1];
        if (groupSeparator && (0, _is.isNumber)(Number(value))) int = Number(int).toLocaleString('en-US');
        return {
            int: int,
            decimal: decimal
        };
    }, [
        format,
        groupSeparator,
        precision,
        value
    ]), int = _c.int, decimal = _c.decimal;
    return _index.default.createElement("div", {
        className: (0, _classNames.default)("" + prefixCls, className),
        style: style
    }, title && _index.default.createElement("div", {
        className: prefixCls + "-title"
    }, title), _index.default.createElement("div", {
        className: prefixCls + "-content"
    }, _index.default.createElement(_index2.default, {
        animation: true,
        loading: !!loading,
        text: {
            rows: 1,
            width: '100%'
        }
    }, _index.default.createElement("div", {
        className: prefixCls + "-value",
        style: styleValue
    }, !(0, _is.isNumber)(Number(value)) ? value : _index.default.createElement("span", {
        className: prefixCls + "-value-int"
    }, _index.default.createElement("span", {
        className: prefixCls + "-value-prefix"
    }, prefix), int), decimal !== undefined || suffix ? _index.default.createElement("span", {
        className: prefixCls + "-value-decimal"
    }, (0, _is.isNumber)(Number(value)) && decimal !== undefined && "." + decimal, suffix && _index.default.createElement("span", {
        className: prefixCls + "-value-suffix"
    }, suffix)) : null)), extra && _index.default.createElement("div", {
        className: prefixCls + "-extra"
    }, extra)));
}
var ForwardRefStatistic = (0, _index.forwardRef)(Statistic);
var StatisticComponent = ForwardRefStatistic;
StatisticComponent.displayName = 'Statistic';
StatisticComponent.Countdown = _countdown.default;
var _default = StatisticComponent;
},
"../../node_modules/@arco-design/web-react/es/Statistic/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Skeleton/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Statistic/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Statistic/util.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getDateString", {
    enumerable: true,
    get: function() {
        return getDateString;
    }
});
var _pad = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pad.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var units = [
    [
        'Y',
        31536000000
    ],
    [
        'M',
        2592000000
    ],
    [
        'D',
        86400000
    ],
    [
        'H',
        3600000
    ],
    [
        'm',
        60000
    ],
    [
        's',
        1000
    ],
    [
        'S',
        1
    ]
];
function getDateString(millisecond, format) {
    var leftMillisecond = millisecond;
    return units.reduce(function(current, _a) {
        var _b = __read(_a, 2), name = _b[0], unit = _b[1];
        if (current.indexOf(name) !== -1) {
            var value_1 = Math.floor(leftMillisecond / unit);
            leftMillisecond -= value_1 * unit;
            return current.replace(new RegExp(name + "+", 'g'), function(match) {
                var len = match.length;
                return (0, _pad.padStart)(value_1.toString(), len, '0');
            });
        }
        return current;
    }, format);
}
},
"../../node_modules/@arco-design/web-react/es/Switch/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__("../../node_modules/react-transition-group/esm/index.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLoading/index.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var defaultProps = {
    type: 'circle'
};
function Switch(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _b.getPrefixCls, ctxSize = _b.size, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Switch);
    var className = props.className, children = props.children, _c = props.style, style = _c === void 0 ? {} : _c, disabled = props.disabled, propSize = props.size, loading = props.loading, onChange = props.onChange, type = props.type, checkedText = props.checkedText, uncheckedText = props.uncheckedText, checkedIcon = props.checkedIcon, uncheckedIcon = props.uncheckedIcon, rest = __rest(props, [
        "className",
        "children",
        "style",
        "disabled",
        "size",
        "loading",
        "onChange",
        "type",
        "checkedText",
        "uncheckedText",
        "checkedIcon",
        "uncheckedIcon"
    ]);
    var prefixCls = getPrefixCls('switch');
    var size = propSize || ctxSize;
    var _d = __read((0, _index.useState)(props.defaultChecked), 2), checked = _d[0], setChecked = _d[1];
    var mergedChecked = 'checked' in props ? props.checked : checked;
    var onHandleClick = function(event) {
        if (loading) return;
        props.onClick && props.onClick(event);
        if (!('checked' in props)) setChecked(!mergedChecked);
        onChange && onChange(!mergedChecked, event);
    };
    var classNames = (0, _classNames.default)(prefixCls, size === 'small' ? prefixCls + "-" + size : undefined, (_a = {}, _a[prefixCls + "-type-" + type] = type, _a[prefixCls + "-checked"] = mergedChecked, _a[prefixCls + "-loading"] = loading, _a), className);
    var checkedElement = checkedText;
    var unCheckedElement = uncheckedText;
    if (children && (0, _is.isArray)(children)) {
        checkedElement = children.find(function(child) {
            return child.key === 'open';
        });
        unCheckedElement = children.find(function(child) {
            return child.key === 'close';
        });
    } else if (children && (0, _is.isObject)(children)) {
        if (children.key === 'open') checkedElement = children;
        else if (children.key === 'close') unCheckedElement = children;
    }
    var extraProps = (0, _omit.default)(rest, [
        'onChange',
        'checked',
        'error'
    ]);
    return _index.default.createElement("button", __assign({
        ref: ref,
        role: "switch",
        "aria-checked": !!mergedChecked
    }, extraProps, {
        style: style,
        className: classNames,
        disabled: disabled,
        onClick: onHandleClick,
        type: "button"
    }), _index.default.createElement("div", {
        className: prefixCls + "-dot"
    }, !loading && (checkedIcon || uncheckedIcon) && _index.default.createElement(_index1.SwitchTransition, null, _index.default.createElement(_index1.CSSTransition, {
        key: mergedChecked ? 'checked' : 'unchecked',
        classNames: "fadeIn",
        timeout: 200
    }, _index.default.createElement("span", {
        className: prefixCls + "-dot-icon"
    }, mergedChecked ? checkedIcon : uncheckedIcon))), loading && _index.default.createElement("span", {
        className: prefixCls + "-dot-icon"
    }, _index.default.createElement(_index3.default, null))), size !== 'small' && type !== 'line' && (checkedElement || unCheckedElement) && _index.default.createElement(_index.default.Fragment, null, _index.default.createElement("div", {
        className: prefixCls + "-text-holder"
    }, checkedElement && mergedChecked && checkedElement, unCheckedElement && !mergedChecked && unCheckedElement), _index.default.createElement(_index1.CSSTransition, {
        in: mergedChecked,
        classNames: "switchSlideText",
        timeout: 200
    }, _index.default.createElement("div", {
        className: prefixCls + "-text"
    }, checkedElement && mergedChecked && checkedElement, unCheckedElement && !mergedChecked && unCheckedElement))));
}
var ForwardRefSwitch = (0, _index.forwardRef)(Switch);
var SwitchComponent = ForwardRefSwitch;
SwitchComponent.__BYTE_SWITCH = true;
SwitchComponent.displayName = 'Switch';
var _default = SwitchComponent;
},
"../../node_modules/@arco-design/web-react/es/Switch/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Switch/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Tag/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLoading/index.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _index3 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _iconhover = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/icon-hover.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var COLORS = [
    'red',
    'orangered',
    'orange',
    'gold',
    'lime',
    'green',
    'cyan',
    'blue',
    'arcoblue',
    'purple',
    'pinkpurple',
    'magenta',
    'gray'
];
var defaultProps = {
    size: 'default'
};
function Tag(baseProps, ref) {
    var _a;
    var _b = (0, _index.useContext)(_index3.ConfigContext), getPrefixCls = _b.getPrefixCls, componentConfig = _b.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Tag);
    var className = props.className, style = props.style, children = props.children, color = props.color, closable = props.closable, checkable = props.checkable, defaultChecked = props.defaultChecked, size = props.size, onClose = props.onClose, onCheck = props.onCheck, icon = props.icon, closeIcon = props.closeIcon, bordered = props.bordered, rest = __rest(props, [
        "className",
        "style",
        "children",
        "color",
        "closable",
        "checkable",
        "defaultChecked",
        "size",
        "onClose",
        "onCheck",
        "icon",
        "closeIcon",
        "bordered"
    ]);
    var prefixCls = getPrefixCls('tag');
    var _c = __read((0, _index.useState)('visible' in props ? props.visible : true), 2), visible = _c[0], setVisible = _c[1];
    var _d = __read((0, _index.useState)('checked' in props ? props.checked : defaultChecked), 2), checked = _d[0], setChecked = _d[1];
    var _e = __read((0, _index.useState)(), 2), loading = _e[0], setLoading = _e[1];
    var mergedChecked = 'checked' in props ? props.checked : checked;
    var mergedVisible = 'visible' in props ? props.visible : visible;
    function onHandleClose(e) {
        var ret = onClose && onClose(e);
        if (ret && ret.then) {
            setLoading(true);
            ret.then(function() {
                setLoading(false);
                setVisible(false);
            }).catch(function() {
                setLoading(false);
            });
        } else setVisible(false);
    }
    function onHandleCheck() {
        var newChecked = !mergedChecked;
        if (!('checked' in props)) setChecked(newChecked);
        onCheck && onCheck(newChecked);
    }
    var _color = color ? COLORS.indexOf(color) !== -1 ? color : '' : '';
    var _checked = checkable ? mergedChecked : true;
    var classNames = (0, _classNames.default)(prefixCls, (_a = {}, _a[prefixCls + "-loading"] = loading, _a[prefixCls + "-hide"] = !mergedVisible, _a[prefixCls + "-" + _color] = _color, _a[prefixCls + "-checkable"] = checkable, _a[prefixCls + "-checked"] = _checked, _a[prefixCls + "-size-" + size] = size, _a[prefixCls + "-bordered"] = bordered, _a[prefixCls + "-custom-color"] = _checked && color && !_color, _a), className);
    var colorStyle = __assign({}, style);
    if (color && !_color && _checked) {
        colorStyle.backgroundColor = color;
        colorStyle.borderColor = color;
    }
    var otherProps = (0, _omit.default)(rest, [
        'visible'
    ]);
    if (checkable) otherProps.onClick = onHandleCheck;
    return _index.default.createElement("div", __assign({
        ref: ref,
        style: colorStyle,
        className: classNames
    }, otherProps), icon && _index.default.createElement("span", {
        className: prefixCls + "-icon"
    }, icon), children, closable && !loading && closeIcon !== null && _index.default.createElement(_iconhover.default, {
        prefix: prefixCls,
        className: prefixCls + "-close-btn",
        onClick: onHandleClose,
        role: "button",
        "aria-label": "Close"
    }, closeIcon !== undefined ? closeIcon : _index.default.createElement(_index1.default, null)), loading && _index.default.createElement("span", {
        className: prefixCls + "-loading-icon"
    }, _index.default.createElement(_index2.default, null)));
}
var TagComponent = (0, _index.forwardRef)(Tag);
TagComponent.displayName = 'Tag';
var _default = TagComponent;
},
"../../node_modules/@arco-design/web-react/es/Tag/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Tag/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/TimePicker/context.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _default = (0, _index.createContext)({});
},
"../../node_modules/@arco-design/web-react/es/TimePicker/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/picker/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/TimePicker/time-column.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return TimeColumn;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _debounce = __webpack_require__.ir(__webpack_require__("../../node_modules/lodash/debounce.js"));
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/util.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _usePrevious = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/usePrevious.js"));
function TimeColumn(props) {
    var prefixCls = props.prefixCls, list = props.list, value = props.value, onHandleSelect = props.onHandleSelect, unit = props.unit, popupVisible = props.popupVisible, scrollSticky = props.scrollSticky;
    var lis = (0, _index.useRef)(new Map());
    var wrapper = (0, _index.useRef)();
    var ul = (0, _index.useRef)();
    var listItemHeight = (0, _index.useRef)(0);
    var prevPopupVisible = (0, _usePrevious.default)(popupVisible);
    var prevScrollTop = (0, _index.useRef)(wrapper.current && wrapper.current.scrollTop);
    (0, _index.useEffect)(function() {
        var li = lis.current.get(value);
        if (li && popupVisible && prevPopupVisible) {
            (0, _util.scrollTo)(wrapper.current, li.offsetTop, 150);
            prevScrollTop.current = li.offsetTop;
        }
    }, [
        value
    ]);
    (0, _index.useEffect)(function() {
        if (popupVisible && popupVisible !== prevPopupVisible) {
            var li = lis.current.get(value);
            if (li) {
                (0, _util.scrollTo)(wrapper.current, li.offsetTop, 0);
                prevScrollTop.current = li.offsetTop;
            }
        }
    }, [
        popupVisible,
        prevPopupVisible
    ]);
    (0, _index.useEffect)(function() {
        if (list.length <= 1) return;
        listItemHeight.current = (ul.current.clientHeight - wrapper.current.clientHeight) / (list.length - 1);
    }, [
        list.length
    ]);
    var onScrollList = (0, _index.useCallback)((0, _debounce.default)(function() {
        var mathFunc = wrapper.current.scrollTop - prevScrollTop.current > 0 ? Math.ceil : Math.floor;
        var index = mathFunc(wrapper.current.scrollTop / listItemHeight.current);
        if (index !== value && list[index] && !list[index].disabled) onHandleSelect(list[index].value, unit);
    }, 100), [
        onHandleSelect
    ]);
    return _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls + "-list"),
        ref: wrapper,
        onWheel: scrollSticky && onScrollList
    }, _index.default.createElement("ul", {
        ref: ul
    }, list.map(function(item) {
        var _a;
        return _index.default.createElement("li", {
            key: item.value,
            className: (0, _classNames.default)(prefixCls + "-cell", (_a = {}, _a[prefixCls + "-cell-disabled"] = item.disabled, _a[prefixCls + "-cell-selected"] = item.selected, _a)),
            onClick: function() {
                return !item.disabled && onHandleSelect(item.value, unit);
            },
            ref: function(element) {
                lis.current.set(item.value, element);
            }
        }, _index.default.createElement("div", {
            className: prefixCls + "-cell-inner"
        }, item.label));
    })));
}
},
"../../node_modules/@arco-design/web-react/es/TimePicker/time-picker.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _pad = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pad.js");
var _util = __webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/util.js");
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _dayjs = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dayjs.js");
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/index.js"));
var _timecolumn = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/time-column.js"));
var _context = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/TimePicker/context.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var AMPM = [
    'am',
    'pm'
];
function isUse12Hours(props) {
    return props.use12Hours || (0, _util.getColumnsFromFormat)(props.format).use12Hours;
}
function TimePicker(props) {
    var _a = props.format, format = _a === void 0 ? 'HH:mm:ss' : _a, onSelect = props.onSelect, popupVisible = props.popupVisible, _b = props.step, step = _b === void 0 ? {} : _b, disabledHours = props.disabledHours, disabledMinutes = props.disabledMinutes, disabledSeconds = props.disabledSeconds, hideDisabledOptions = props.hideDisabledOptions, onConfirmValue = props.onConfirmValue, isRangePicker = props.isRangePicker, confirmBtnDisabled = props.confirmBtnDisabled, propsValueShow = props.valueShow, setValueShow = props.setValueShow, extra = props.extra, disableConfirm = props.disableConfirm, hideFooter = props.hideFooter, _c = props.showNowBtn, showNowBtn = _c === void 0 ? true : _c, scrollSticky = props.scrollSticky;
    var _d = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _d.getPrefixCls, locale = _d.locale;
    var prefixCls = getPrefixCls('timepicker');
    var _e = (0, _index.useContext)(_context.default), utcOffset = _e.utcOffset, timezone = _e.timezone;
    var valueShow = (0, _dayjs.getDayjsValue)(propsValueShow, format);
    var ampm = valueShow && valueShow.hour() >= 12 ? 'pm' : 'am';
    var use12Hours = isUse12Hours(props);
    var getShowList = (0, _index.useCallback)(function(type) {
        var stepHour = step.hour || 1;
        var stepMinute = step.minute || 1;
        var stepSecond = step.second || 1;
        var list = [];
        if (type === 'hour') {
            for(var i = 0; i < (use12Hours ? 12 : 24); i += stepHour)list.push(i);
            if (use12Hours) list[0] = 12;
        }
        if (type === 'minute') for(var i = 0; i < 60; i += stepMinute)list.push(i);
        if (type === 'second') for(var i = 0; i < 60; i += stepSecond)list.push(i);
        return list;
    }, [
        step.hour,
        step.minute,
        step.second,
        use12Hours
    ]);
    var HOURS = getShowList('hour');
    var MINUTES = getShowList('minute');
    var SECONDS = getShowList('second');
    var selectedHour = valueShow && valueShow.hour();
    selectedHour = use12Hours ? selectedHour > 12 ? selectedHour - 12 : selectedHour : selectedHour;
    if (use12Hours && selectedHour === 0 && ampm === 'am') selectedHour += 12;
    var selectedMinute = valueShow && valueShow.minute();
    var selectedSecond = valueShow && valueShow.second();
    var getDefaultStr = (0, _index.useCallback)(function(type) {
        switch(type){
            case 'hour':
                return typeof disabledHours === 'function' ? (0, _pad.padStart)(HOURS.find(function(h) {
                    return disabledHours().indexOf(h) === -1;
                }) || 0, 2, '0') : (0, _pad.padStart)(HOURS[0], 2, '0');
            case 'minute':
                return typeof disabledMinutes === 'function' ? (0, _pad.padStart)(MINUTES.find(function(m) {
                    return disabledMinutes(selectedHour).indexOf(m) === -1;
                }) || 0, 2, '0') : (0, _pad.padStart)(MINUTES[0], 2, '0');
            case 'second':
                return typeof disabledSeconds === 'function' ? (0, _pad.padStart)(SECONDS.find(function(s) {
                    return disabledSeconds(selectedHour, selectedMinute).indexOf(s) === -1;
                }) || 0, 2, '0') : (0, _pad.padStart)(SECONDS[0], 2, '0');
            default:
                return '00';
        }
    }, [
        HOURS,
        MINUTES,
        SECONDS,
        disabledHours,
        disabledMinutes,
        disabledSeconds,
        selectedHour,
        selectedMinute
    ]);
    function onHandleSelect(selectedValue, unit) {
        var isUpperCase = (0, _util.getColumnsFromFormat)(format).list.indexOf('A') !== -1;
        var _valueShow = valueShow || (0, _dayjs.dayjs)(getDefaultStr('hour') + ":" + getDefaultStr('minute') + ":" + getDefaultStr('second'), 'HH:mm:ss');
        var hour = _valueShow.hour();
        var minute = _valueShow.minute();
        var second = _valueShow.second();
        var selectedAmpm = isUpperCase ? ampm.toUpperCase() : ampm;
        var valueFormat = 'HH:mm:ss';
        var newValue;
        if (use12Hours) {
            if (isUpperCase) valueFormat = valueFormat + " A";
            else valueFormat = valueFormat + " a";
        }
        if (use12Hours) hour = hour > 12 ? hour - 12 : hour;
        if (unit === 'hour') newValue = (0, _dayjs.dayjs)(selectedValue + ":" + minute + ":" + second + " " + selectedAmpm, valueFormat, 'en');
        if (unit === 'minute') newValue = (0, _dayjs.dayjs)(hour + ":" + selectedValue + ":" + second + " " + selectedAmpm, valueFormat, 'en');
        if (unit === 'second') newValue = (0, _dayjs.dayjs)(hour + ":" + minute + ":" + selectedValue + " " + selectedAmpm, valueFormat, 'en');
        if (unit === 'ampm') newValue = (0, _dayjs.dayjs)(hour + ":" + minute + ":" + second + " " + (isUpperCase ? selectedValue.toUpperCase() : selectedValue), valueFormat, 'en');
        newValue = (0, _dayjs.dayjs)(newValue, valueFormat).locale(_dayjs.dayjs.locale());
        onSelect && onSelect((0, _dayjs.toLocal)(newValue, utcOffset, timezone).format(format), (0, _dayjs.toLocal)(newValue, utcOffset, timezone));
        if (!isRangePicker) {
            setValueShow && setValueShow(newValue);
            if (disableConfirm) onConfirmValue(newValue);
        }
    }
    function onConfirmTime() {
        if (valueShow) onConfirmValue(valueShow);
    }
    function onSelectNow() {
        var now = (0, _dayjs.getNow)();
        var zoneNow = (0, _dayjs.getNow)(utcOffset, timezone);
        onSelect && onSelect(now.format(format), now);
        if (disableConfirm) onConfirmValue(zoneNow);
        else setValueShow && setValueShow(zoneNow);
    }
    var baseTimeColumnProps = {
        prefixCls: prefixCls,
        onHandleSelect: onHandleSelect,
        popupVisible: popupVisible,
        scrollSticky: scrollSticky
    };
    function renderHours() {
        var hours = hideDisabledOptions && typeof disabledHours === 'function' ? HOURS.filter(function(h) {
            return disabledHours().indexOf(h) === -1;
        }) : HOURS;
        var list = hours.map(function(h) {
            return {
                label: (0, _pad.padStart)("" + h, 2, '0'),
                value: h,
                selected: selectedHour !== undefined && selectedHour === h,
                disabled: typeof disabledHours === 'function' && disabledHours().indexOf(h) !== -1
            };
        });
        return _index.default.createElement(_timecolumn.default, __assign({}, baseTimeColumnProps, {
            list: list,
            value: selectedHour,
            unit: "hour"
        }));
    }
    function renderMinutes() {
        var minutes = hideDisabledOptions && typeof disabledMinutes === 'function' ? MINUTES.filter(function(h) {
            return disabledMinutes(selectedHour).indexOf(h) === -1;
        }) : MINUTES;
        var list = minutes.map(function(m) {
            return {
                label: (0, _pad.padStart)("" + m, 2, '0'),
                value: m,
                selected: selectedHour !== undefined && selectedMinute === m,
                disabled: typeof disabledMinutes === 'function' && disabledMinutes(selectedHour).indexOf(m) !== -1
            };
        });
        return _index.default.createElement(_timecolumn.default, __assign({}, baseTimeColumnProps, {
            list: list,
            value: selectedMinute,
            unit: "minute"
        }));
    }
    function renderSeconds() {
        var seconds = hideDisabledOptions && typeof disabledSeconds === 'function' ? SECONDS.filter(function(h) {
            return disabledSeconds(selectedHour, selectedMinute).indexOf(h) === -1;
        }) : SECONDS;
        var list = seconds.map(function(s) {
            return {
                label: (0, _pad.padStart)("" + s, 2, '0'),
                value: s,
                selected: selectedHour !== undefined && selectedSecond === s,
                disabled: typeof disabledSeconds === 'function' && disabledSeconds(selectedHour, selectedMinute).indexOf(s) !== -1
            };
        });
        return _index.default.createElement(_timecolumn.default, __assign({}, baseTimeColumnProps, {
            list: list,
            value: selectedSecond,
            unit: "second"
        }));
    }
    function renderAmPm() {
        var isUpperCase = (0, _util.getColumnsFromFormat)(format).list.indexOf('A') !== -1;
        var list = AMPM.map(function(a) {
            return {
                label: isUpperCase ? a.toUpperCase() : a,
                value: a,
                selected: ampm === a
            };
        });
        return _index.default.createElement(_timecolumn.default, __assign({}, baseTimeColumnProps, {
            list: list,
            value: ampm,
            unit: "ampm"
        }));
    }
    var list = (0, _util.getColumnsFromFormat)(format).list;
    var classNames = (0, _classNames.default)(prefixCls);
    var _hideFooter = hideFooter || disableConfirm && isRangePicker || !isRangePicker && disableConfirm && !showNowBtn;
    return _index.default.createElement(_index.default.Fragment, null, _index.default.createElement("div", {
        className: classNames
    }, (list.indexOf('H') !== -1 || list.indexOf('h') !== -1) && renderHours(), list.indexOf('m') !== -1 && renderMinutes(), list.indexOf('s') !== -1 && renderSeconds(), use12Hours && renderAmPm()), extra && _index.default.createElement("div", {
        className: prefixCls + "-footer-extra-wrapper"
    }, extra), !_hideFooter && _index.default.createElement("div", {
        className: prefixCls + "-footer-btn-wrapper"
    }, !isRangePicker && showNowBtn ? _index.default.createElement(_index2.default, {
        size: "mini",
        onClick: onSelectNow
    }, locale.TimePicker.now) : _index.default.createElement("div", null), !disableConfirm && _index.default.createElement(_index2.default, {
        type: "primary",
        size: "mini",
        onClick: onConfirmTime,
        disabled: confirmBtnDisabled || !valueShow
    }, locale.TimePicker.ok)));
}
var _default = TimePicker;
},
"../../node_modules/@arco-design/web-react/es/TimePicker/util.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getColumnsFromFormat: function() {
        return getColumnsFromFormat;
    },
    scrollTo: function() {
        return scrollTo;
    }
});
var _btweenes = __webpack_require__.ir(__webpack_require__("../../node_modules/b-tween/dist/b-tween.es.js"));
function getColumnsFromFormat(format) {
    var units = [
        'H',
        'h',
        'm',
        's',
        'a',
        'A'
    ];
    var list = [];
    var use12Hours = false;
    units.forEach(function(unit) {
        if (format.indexOf(unit) !== -1) {
            list.push(unit);
            if (unit === 'a' || unit === 'A') use12Hours = true;
        }
    });
    return {
        list: list,
        use12Hours: use12Hours
    };
}
var scrollIds = new Map();
function scrollTo(element, to, duration) {
    if (scrollIds.get(element)) cancelAnimationFrame(scrollIds.get(element));
    if (duration <= 0) element.scrollTop = to;
    scrollIds.set(element, requestAnimationFrame(function() {
        var tween = new _btweenes.default({
            from: {
                scrollTop: element.scrollTop
            },
            to: {
                scrollTop: to
            },
            duration: duration,
            onUpdate: function(keys) {
                element.scrollTop = keys.scrollTop;
            },
            easing: 'quartInOut'
        });
        tween.start();
    }));
}
},
"../../node_modules/@arco-design/web-react/es/Tooltip/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/index.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _pick = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pick.js"));
var _useMergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js"));
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
var defaultProps = {
    position: 'top',
    trigger: 'hover',
    escToClose: false,
    unmountOnExit: true,
    blurToHide: true,
    popupHoverStay: true
};
function Tooltip(baseProps, ref) {
    var _a = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _a.getPrefixCls, componentConfig = _a.componentConfig;
    var props = (0, _useMergeProps.default)(baseProps, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Tooltip);
    var style = props.style, className = props.className, children = props.children, trigger = props.trigger, escToClose = props.escToClose, defaultPopupVisible = props.defaultPopupVisible, position = props.position, unmountOnExit = props.unmountOnExit, popupVisible = props.popupVisible, tooltipPrefixCls = props.prefixCls, blurToHide = props.blurToHide, popupHoverStay = props.popupHoverStay, disabled = props.disabled, onVisibleChange = props.onVisibleChange, triggerProps = props.triggerProps, childrenPrefix = props.childrenPrefix, getPopupContainer = props.getPopupContainer, content = props.content, mini = props.mini, color = props.color, rest = __rest(props, [
        "style",
        "className",
        "children",
        "trigger",
        "escToClose",
        "defaultPopupVisible",
        "position",
        "unmountOnExit",
        "popupVisible",
        "prefixCls",
        "blurToHide",
        "popupHoverStay",
        "disabled",
        "onVisibleChange",
        "triggerProps",
        "childrenPrefix",
        "getPopupContainer",
        "content",
        "mini",
        "color"
    ]);
    var refTrigger = (0, _index.useRef)();
    var updatePopupPosition = function(delay, callback) {
        if (delay === void 0) delay = 0;
        refTrigger.current && refTrigger.current.updatePopupPosition(delay, callback);
    };
    (0, _index.useImperativeHandle)(ref, function() {
        return {
            updatePopupPosition: updatePopupPosition
        };
    }, []);
    var prefixCls = tooltipPrefixCls || getPrefixCls('tooltip');
    var otherProps = __assign(__assign({}, (0, _pick.default)(rest, _index1.EventsByTriggerNeed)), triggerProps);
    var renderedContent = typeof content === 'function' ? content() : content;
    var isEmpty = function(content) {
        if (content === null || content === undefined || content === false) return true;
        if (typeof content === 'string' && content.trim() === '') return true;
        return false;
    };
    if ('popupVisible' in props) otherProps.popupVisible = popupVisible;
    else if (isEmpty(renderedContent)) otherProps.popupVisible = false;
    if (otherProps.showArrow !== false || otherProps.arrowProps) {
        otherProps.arrowProps = otherProps.arrowProps || {};
        if (color) otherProps.arrowProps.style = __assign({
            backgroundColor: color
        }, otherProps.arrowProps.style);
    }
    return _index.default.createElement(_index1.default, __assign({
        style: __assign({
            maxWidth: 350
        }, style),
        className: className,
        ref: refTrigger,
        classNames: "zoomInFadeOut",
        duration: {
            enter: 300,
            exit: 100
        },
        popup: function() {
            var _a;
            return _index.default.createElement("div", {
                style: {
                    backgroundColor: color
                },
                className: (0, _classNames.default)(prefixCls + "-content", prefixCls + "-content-" + position, (_a = {}, _a[prefixCls + "-mini"] = mini, _a)),
                role: "tooltip"
            }, _index.default.createElement("div", {
                className: prefixCls + "-content-inner"
            }, renderedContent));
        },
        position: position,
        disabled: disabled,
        trigger: trigger,
        escToClose: escToClose,
        showArrow: true,
        popupAlign: {
            left: 12,
            right: 12,
            top: 12,
            bottom: 12
        },
        mouseEnterDelay: 200,
        mouseLeaveDelay: 200,
        unmountOnExit: unmountOnExit,
        popupHoverStay: popupHoverStay,
        blurToHide: blurToHide,
        childrenPrefix: childrenPrefix || prefixCls,
        getPopupContainer: getPopupContainer,
        onVisibleChange: onVisibleChange,
        defaultPopupVisible: defaultPopupVisible
    }, otherProps), children);
}
var TooltipComponent = (0, _index.forwardRef)(Tooltip);
TooltipComponent.displayName = 'Tooltip';
var _default = TooltipComponent;
},
"../../node_modules/@arco-design/web-react/es/Tooltip/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Tooltip/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/Trigger/getPopupStyle.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function getElementPosition(element, elementRect, root) {
    if (!root || !element || _dom.isServerRendering) return {
        left: 0,
        width: 0,
        height: 0,
        top: 0
    };
    var bodyScroll = function(direction) {
        return document.documentElement[direction] || document.body[direction];
    };
    var pageScrollTop = root === document.body ? bodyScroll('scrollTop') : root.scrollTop;
    var pageScrollLeft = root === document.body ? bodyScroll('scrollLeft') : root.scrollLeft;
    var left = elementRect.left, top = elementRect.top, width = elementRect.width, height = elementRect.height;
    var rootLeft = root === document.body ? 0 : root.getBoundingClientRect().left;
    var rootTop = root === document.body ? 0 : root.getBoundingClientRect().top;
    var pTop = top + pageScrollTop - rootTop;
    var pLeft = left + pageScrollLeft - rootLeft;
    return {
        left: pLeft,
        top: pTop,
        width: width,
        height: height
    };
}
var getInsideValue = function(min, max, value) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
};
var getPopupAlign = function(propsPopupAlign, showArrow) {
    var horizontalOffset = 0;
    var verticalOffset = 0;
    var resultPopupAlign = {};
    if (!showArrow) resultPopupAlign = __assign({}, propsPopupAlign);
    else resultPopupAlign = __assign({
        left: 12,
        right: 12,
        top: 12,
        bottom: 12
    }, propsPopupAlign);
    for(var key in resultPopupAlign)if ((0, _is.isArray)(resultPopupAlign[key])) {
        var index = 0;
        if ([
            'top',
            'bottom'
        ].indexOf(key) > -1) {
            index = 1;
            horizontalOffset = resultPopupAlign[key][0];
        } else verticalOffset = resultPopupAlign[key][1];
        resultPopupAlign[key] = resultPopupAlign[key][index];
    }
    return __assign(__assign({}, resultPopupAlign), {
        horizontalOffset: horizontalOffset,
        verticalOffset: verticalOffset
    });
};
var getChildRect = function(child, mouseLocation) {
    return mouseLocation ? {
        left: mouseLocation.clientX,
        top: mouseLocation.clientY,
        width: 0,
        height: 0,
        right: mouseLocation.clientX,
        bottom: mouseLocation.clientY
    } : child.getBoundingClientRect();
};
var _default = function(props, content, child, mountContainer, mouseLocation) {
    var autoAlignPopupWidth = props.autoAlignPopupWidth, autoAlignPopupMinWidth = props.autoAlignPopupMinWidth, alignPoint = props.alignPoint, propsStyle = props.style;
    if (!child || !content || !mountContainer) return {};
    var style = {};
    var childRect = getChildRect(child, alignPoint && mouseLocation);
    var _a = getElementPosition(child, childRect, mountContainer), left = _a.left, top = _a.top, width = _a.width, height = _a.height;
    var popupAlign = getPopupAlign(props.popupAlign, props.showArrow);
    var alignLeft = popupAlign.left || 0;
    var alignRight = popupAlign.right || 0;
    var alignTop = popupAlign.top || 0;
    var alignBottom = popupAlign.bottom || 0;
    if (autoAlignPopupWidth && (propsStyle === null || propsStyle === void 0 ? void 0 : propsStyle.width) === undefined) content.style.width = child.offsetWidth + "px";
    if (autoAlignPopupMinWidth) content.style.minWidth = child.offsetWidth + "px";
    var realPosition = props.position;
    var arrowStyle = {};
    var autoPosition = function(direction) {
        var _a, _b;
        if (!props.autoFitPosition) return;
        var windowHeight = ((_a = document.documentElement) === null || _a === void 0 ? void 0 : _a.clientHeight) || window.innerHeight;
        var windowWidth = ((_b = document.documentElement) === null || _b === void 0 ? void 0 : _b.clientWidth) || window.innerWidth;
        var result = false;
        var boundnary = {
            left: left - childRect.left,
            top: top - childRect.top
        };
        var _c = style.top, styleTop = _c === void 0 ? 0 : _c, _d = style.left, styleLeft = _d === void 0 ? 0 : _d;
        if (direction === 'top' || direction === 'bottom') {
            if (boundnary.left > styleLeft && childRect.right > 12) {
                style.left = Math.max(boundnary.left, left - content.clientWidth);
                style.left = Math.max(style.left, left - content.clientWidth + 24);
            } else if (styleLeft - boundnary.left + content.clientWidth > windowWidth && windowWidth - childRect.left > 12) {
                style.left = Math.max(boundnary.left, boundnary.left + windowWidth - content.clientWidth);
                style.left = Math.max(style.left, left - content.clientWidth + 24);
            }
        }
        if (direction === 'left' || direction === 'right') {
            if (boundnary.top > styleTop && childRect.bottom > 12) {
                style.top = boundnary.top;
                style.top = Math.max(style.top, top - content.clientHeight + childRect.height / 2);
            } else if (styleTop - boundnary.top + content.clientHeight > windowHeight && windowHeight - childRect.top > 12) {
                style.top = Math.max(boundnary.top, boundnary.top + windowHeight - content.clientHeight);
                style.top = Math.max(style.top, top - content.clientHeight + childRect.height / 2);
            }
        }
        if (direction === 'top' && boundnary.top > styleTop) {
            if (childRect.top < windowHeight - childRect.bottom) {
                style.top = Math.min(top + height + (alignTop || 0), boundnary.top + windowHeight - content.clientHeight);
                result = true;
            } else style.top = boundnary.top;
        }
        if (direction === 'bottom' && styleTop - boundnary.top + content.clientHeight > windowHeight) {
            if (windowHeight - childRect.bottom < childRect.top) {
                style.top = Math.max(top - content.clientHeight - (alignBottom || 0), boundnary.top);
                result = true;
            } else style.top = boundnary.top + windowHeight - content.clientHeight;
        }
        if (direction === 'left' && boundnary.left > styleLeft) {
            if (childRect.left < windowWidth - childRect.right) {
                style.left = Math.min(width + left + alignRight, boundnary.left + windowWidth - content.clientWidth);
                result = true;
            } else style.left = boundnary.left;
        }
        if (direction === 'right' && styleLeft - boundnary.left + content.clientWidth > windowWidth) {
            if (windowWidth - childRect.right < childRect.left) {
                style.left = Math.max(left - content.clientWidth - alignLeft, boundnary.left);
                result = true;
            } else style.left = boundnary.left + windowWidth - content.clientWidth;
        }
        if (style.left < 0) style.left = 0;
        else {
            var maxLeft = mountContainer.scrollWidth - content.clientWidth;
            style.left = Math.min(maxLeft, style.left);
        }
        return result;
    };
    var horizontalOffset = popupAlign.horizontalOffset || 0;
    var verticalOffset = popupAlign.verticalOffset || 0;
    switch(props.position){
        case 'top':
            style.top = top - content.clientHeight - alignTop;
            style.left = left + width / 2 - content.clientWidth / 2;
            autoPosition('top') && (realPosition = 'bottom');
            style.left += horizontalOffset;
            var arrowLeft_1 = left - Number(style.left) + width / 2;
            arrowStyle.left = getInsideValue(12, content.clientWidth - 12, arrowLeft_1);
            break;
        case 'tl':
            style.top = top - content.clientHeight - alignTop;
            style.left = left;
            autoPosition('top') && (realPosition = 'bl');
            style.left += horizontalOffset;
            var arrowLeft = left - Number(style.left) + Math.min(width / 2, 50);
            arrowStyle.left = getInsideValue(12, content.clientWidth - 12, arrowLeft);
            break;
        case 'tr':
            style.top = -content.clientHeight + top - alignTop;
            style.left = left + width - content.clientWidth;
            autoPosition('top') && (realPosition = 'br');
            style.left += horizontalOffset;
            arrowLeft = left - Number(style.left) + Math.max(width / 2, width - 50);
            arrowStyle.left = getInsideValue(12, content.clientWidth - 12, arrowLeft);
            break;
        case 'bottom':
            style.top = height + top + alignBottom;
            style.left = left + width / 2 - content.clientWidth / 2;
            autoPosition('bottom') && (realPosition = 'top');
            style.left += horizontalOffset;
            var arrowLeft_2 = left - Number(style.left) + width / 2;
            arrowStyle.left = getInsideValue(12, content.clientWidth - 12, arrowLeft_2);
            break;
        case 'bl':
            style.top = height + top + alignBottom;
            style.left = left;
            autoPosition('bottom') && (realPosition = 'tl');
            style.left += horizontalOffset;
            arrowLeft = left - Number(style.left) + Math.min(width / 2, 50);
            arrowStyle.left = getInsideValue(12, content.clientWidth - 12, arrowLeft);
            break;
        case 'br':
            style.top = height + top + alignBottom;
            style.left = left + width - content.clientWidth;
            autoPosition('bottom') && (realPosition = 'tr');
            style.left += horizontalOffset;
            arrowLeft = left - Number(style.left) + Math.max(width / 2, width - 50);
            arrowStyle.left = getInsideValue(12, content.clientWidth - 12, arrowLeft);
            break;
        case 'left':
            style.top = top + height / 2 - content.clientHeight / 2;
            style.left = left - content.clientWidth - alignLeft;
            autoPosition('left') && (realPosition = 'right');
            style.top += verticalOffset;
            var arrowTop_1 = top - Number(style.top) + height / 2;
            arrowStyle.top = getInsideValue(12, content.clientHeight - 12, arrowTop_1);
            break;
        case 'lt':
            style.top = top;
            style.left = left - content.clientWidth - alignLeft;
            autoPosition('left') && (realPosition = 'rt');
            style.top += verticalOffset;
            var arrowTop = top - Number(style.top) + Math.min(height / 2, 50);
            arrowStyle.top = getInsideValue(12, content.clientHeight - 12, arrowTop);
            break;
        case 'lb':
            style.top = top + height - content.clientHeight;
            style.left = left - content.clientWidth - alignLeft;
            autoPosition('left') && (realPosition = 'rb');
            style.top += verticalOffset;
            arrowTop = top - Number(style.top) + Math.max(height / 2, height - 50);
            arrowStyle.top = getInsideValue(12, content.clientHeight - 12, arrowTop);
            break;
        case 'right':
            style.top = top + height / 2 - content.clientHeight / 2;
            style.left = width + left + alignRight;
            autoPosition('right') && (realPosition = 'left');
            style.top += verticalOffset;
            var arrowTop_2 = top - Number(style.top) + height / 2;
            arrowStyle.top = getInsideValue(12, content.clientHeight - 12, arrowTop_2);
            break;
        case 'rt':
            style.top = top;
            style.left = width + left + alignRight;
            autoPosition('right') && (realPosition = 'lt');
            style.top += verticalOffset;
            arrowTop = top - Number(style.top) + Math.min(height / 2, 50);
            arrowStyle.top = getInsideValue(12, content.clientHeight - 12, arrowTop);
            break;
        case 'rb':
            style.top = top + height - content.clientHeight;
            style.left = width + left + alignRight;
            autoPosition('right') && (realPosition = 'lb');
            style.top += verticalOffset;
            arrowTop = top - Number(style.top) + Math.max(height / 2, height - 50);
            arrowStyle.top = getInsideValue(12, content.clientHeight - 12, arrowTop);
            break;
        default:
            break;
    }
    return {
        style: style,
        arrowStyle: arrowStyle,
        realPosition: realPosition
    };
};
},
"../../node_modules/@arco-design/web-react/es/Trigger/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    EventsByTriggerNeed: function() {
        return EventsByTriggerNeed;
    },
    default: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__("../../node_modules/react-dom/index.js");
var _index2 = __webpack_require__("../../node_modules/react-transition-group/esm/index.js");
var _ResizeObserveres = __webpack_require__.ir(__webpack_require__("../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"));
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _keycode = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/keycode.js");
var _portal = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/portal.js"));
var _resizeObserver = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/resizeObserver.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index3 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _getPopupStyle = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/getPopupStyle.js"));
var _throttleByRaf = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/throttleByRaf.js"));
var _raf = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/raf.js");
var _mergeProps = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/mergeProps.js"));
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function getDOMPos(dom) {
    if (!dom) return {};
    var _a = dom.getBoundingClientRect(), width = _a.width, height = _a.height, left = _a.left, right = _a.right;
    return {
        width: width,
        height: height,
        left: left,
        right: right
    };
}
var EventsByTriggerNeed = [
    'onClick',
    'onMouseEnter',
    'onMouseLeave',
    'onMouseMove',
    'onFocus',
    'onBlur',
    'onContextMenu',
    'onKeyDown'
];
function splitChildrenStyle(obj, keys) {
    var picked = {};
    var omitted = __assign({}, obj);
    keys.forEach(function(key) {
        if (obj && key in obj) {
            picked[key] = obj[key];
            delete omitted[key];
        }
    });
    return {
        picked: picked,
        omitted: omitted
    };
}
var defaultProps = {
    blurToHide: true,
    clickToClose: true,
    classNames: 'fadeIn',
    trigger: 'hover',
    position: 'bottom',
    duration: 200,
    unmountOnExit: true,
    popupAlign: {},
    popupHoverStay: true,
    clickOutsideToClose: true,
    escToClose: false,
    mouseLeaveToClose: true,
    containerScrollToClose: false,
    getDocument: function() {
        return window.document;
    },
    autoFixPosition: true,
    mouseEnterDelay: 100,
    mouseLeaveDelay: 100,
    autoFitPosition: true
};
var Trigger = function(_super) {
    __extends(Trigger, _super);
    function Trigger(props, context) {
        var _this = _super.call(this, props, context) || this;
        _this.delayTimer = null;
        _this.updatePositionTimer = null;
        _this.popupOpen = false;
        _this.mousedownToHide = false;
        _this.hasPopupMouseDown = false;
        _this.unmount = false;
        _this.mouseLocation = {
            clientX: 0,
            clientY: 0
        };
        _this.observerContainer = null;
        _this.scrollElements = null;
        _this.resizeObserver = new _ResizeObserveres.default(function() {
            _this.handleUpdatePosition();
        });
        _this.childrenDom = null;
        _this.childrenDomSize = {};
        _this.getMergedProps = function(baseProps) {
            var componentConfig = _this.context.componentConfig;
            var props = (0, _mergeProps.default)(baseProps || _this.props, defaultProps, componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.Trigger);
            return props;
        };
        _this.getRootElement = function() {
            return (0, _index1.findDOMNode)(_this);
        };
        _this.isDidMount = false;
        _this.offScrollListeners = function() {
            (_this.scrollElements || []).forEach(function(item) {
                (0, _dom.off)(item, 'scroll', _this.handleScroll);
            });
            _this.scrollElements = null;
        };
        _this.offWindowResize = function() {
            _this.handleWindowResize = false;
            (0, _dom.off)(window, 'resize', _this.handleUpdatePosition);
        };
        _this.offContainerResize = function() {
            if (_this.resizeObserver && _this.observerContainer) {
                _this.resizeObserver.unobserve(_this.observerContainer);
                _this.observerContainer = null;
            }
        };
        _this.handleScroll = function() {
            var currentProps = _this.getMergedProps();
            if (currentProps.containerScrollToClose) _this.setPopupVisible(false);
            else if (currentProps.updateOnScroll) _this.handleUpdatePosition();
        };
        _this.onContainersScroll = function() {
            var _a;
            if (_this.scrollElements) return;
            _this.scrollElements = (0, _dom.getScrollElements)(_this.childrenDom, (_a = _this.popupContainer) === null || _a === void 0 ? void 0 : _a.parentNode);
            _this.scrollElements.forEach(function(item) {
                (0, _dom.on)(item, 'scroll', _this.handleScroll);
            });
        };
        _this.onContainerResize = function() {
            var _a;
            var containerParent = (_a = _this.popupContainer) === null || _a === void 0 ? void 0 : _a.parentNode;
            if (_this.resizeObserver && _this.observerContainer !== containerParent) {
                _this.offContainerResize();
                containerParent && _this.resizeObserver.observe(containerParent);
                _this.observerContainer = containerParent;
            }
        };
        _this.handleUpdatePosition = (0, _throttleByRaf.default)(function() {
            _this.updatePopupPosition();
        });
        _this.isClickTrigger = function() {
            var trigger = _this.getMergedProps().trigger;
            return [].concat(trigger).indexOf('click') > -1;
        };
        _this.isFocusTrigger = function() {
            var trigger = _this.getMergedProps().trigger;
            return [].concat(trigger).indexOf('focus') > -1;
        };
        _this.isHoverTrigger = function() {
            var trigger = _this.getMergedProps().trigger;
            return [].concat(trigger).indexOf('hover') > -1;
        };
        _this.isContextMenuTrigger = function() {
            var trigger = _this.getMergedProps().trigger;
            return [].concat(trigger).indexOf('contextMenu') > -1;
        };
        _this.isMouseLeaveToClose = function() {
            return _this.isHoverTrigger() && _this.getMergedProps().mouseLeaveToClose;
        };
        _this.isPopupHoverHide = function() {
            return _this.isHoverTrigger() && !_this.getMergedProps().popupHoverStay;
        };
        _this.isClickToHide = function() {
            return (_this.isClickTrigger() || _this.isContextMenuTrigger()) && _this.getMergedProps().clickToClose;
        };
        _this.isBlurToHide = function() {
            return _this.isFocusTrigger() && _this.getMergedProps().blurToHide;
        };
        _this.clearTimer = function() {
            if (_this.updatePositionTimer) {
                if (_this.updatePositionTimer.cancel) _this.updatePositionTimer.cancel();
                else {
                    clearTimeout(_this.updatePositionTimer);
                    _this.updatePositionTimer = null;
                }
            }
            if (_this.delayTimer) {
                clearTimeout(_this.delayTimer);
                _this.delayTimer = null;
            }
            if (_this.mouseDownTimeout) {
                clearTimeout(_this.mouseDownTimeout);
                _this.mouseDownTimeout = null;
            }
        };
        _this.offClickOutside = function() {
            if (_this.handleClickOutside) {
                var getDocument = _this.getMergedProps().getDocument;
                var root = (0, _is.isFunction)(getDocument) && getDocument();
                (0, _dom.off)(root, 'mousedown', _this.onClickOutside);
                _this.handleClickOutside = false;
            }
        };
        _this.getTransformOrigin = function(position) {
            var _a, _b;
            var content = (0, _index1.findDOMNode)(_this.triggerRef);
            if (!content) return {};
            var _c = _this.getMergedProps(), showArrow = _c.showArrow, classNames = _c.classNames;
            var top = showArrow && ((_a = _this.arrowStyle) === null || _a === void 0 ? void 0 : _a.top) || 0;
            var left = showArrow && ((_b = _this.arrowStyle) === null || _b === void 0 ? void 0 : _b.left) || 0;
            top = top ? top + "px" : '';
            left = left ? left + "px" : '';
            var transformOrigin = {
                top: (left || '50%') + " 100% 0",
                tl: (left || '15px') + " 100% 0",
                tr: (left || content.clientWidth - 15 + "px") + " 100% 0",
                bottom: (left || '50%') + " 0 0",
                bl: (left || '15px') + " 0 0",
                br: (left || content.clientWidth - 15 + "px") + " 0 0",
                left: "100% " + (top || '50%') + " 0",
                lt: "100% " + (top || '15px') + " 0",
                lb: "100% " + (top || content.clientHeight - 15 + "px") + " 0",
                right: "0 " + (top || '50%') + " 0",
                rt: "0 " + (top || '15px') + " 0",
                rb: "0 " + (top || content.clientHeight - 15 + "px") + " 0"
            };
            if (classNames && classNames.indexOf('zoom') > -1) return {
                transformOrigin: transformOrigin[position]
            };
            if (classNames === 'slideDynamicOrigin') {
                var origin_1 = '0% 0%';
                if ([
                    'top',
                    'tl',
                    'tr'
                ].indexOf(position) > -1) origin_1 = '100% 100%';
                return {
                    transformOrigin: origin_1
                };
            }
            return {};
        };
        _this.getTransformTranslate = function() {
            if (_this.getMergedProps().classNames !== 'slideDynamicOrigin') return '';
            switch(_this.realPosition){
                case 'bottom':
                case 'bl':
                case 'br':
                    return 'scaleY(0.9) translateY(-4px)';
                case 'top':
                case 'tl':
                case 'tr':
                    return 'scaleY(0.9) translateY(4px)';
                default:
                    return '';
            }
        };
        _this.getPopupStyle = function() {
            if (_this.unmount || !_this.popupContainer) return;
            var mountContainer = _this.popupContainer;
            var content = (0, _index1.findDOMNode)(_this.triggerRef);
            var child = (0, _index1.findDOMNode)(_this);
            var _a = (0, _getPopupStyle.default)(_this.getMergedProps(), content, child, mountContainer, _this.mouseLocation), style = _a.style, arrowStyle = _a.arrowStyle, realPosition = _a.realPosition;
            _this.realPosition = realPosition || _this.getMergedProps().position;
            _this.arrowStyle = arrowStyle || {};
            return __assign(__assign({}, style), _this.getTransformOrigin(_this.realPosition));
        };
        _this.showPopup = function(callback) {
            if (callback === void 0) callback = function() {};
            var popupStyle = _this.getPopupStyle();
            _this.setState({
                popupStyle: popupStyle
            }, callback);
        };
        _this.update = (0, _throttleByRaf.default)(function(callback) {
            if (_this.unmount || !_this.state.popupVisible) return;
            var popupStyle = _this.getPopupStyle();
            _this.setState({
                popupStyle: popupStyle
            }, function() {
                callback && callback();
            });
        });
        _this.updatePopupPosition = function(delay, callback) {
            if (delay === void 0) delay = 0;
            var currentVisible = _this.state.popupVisible;
            if (!currentVisible) return;
            if (delay < 4) {
                _this.updatePositionTimer = _this.update(callback);
                return;
            }
            _this.updatePositionTimer = setTimeout(function() {
                var popupStyle = _this.getPopupStyle();
                _this.setState({
                    popupStyle: popupStyle
                }, function() {
                    callback && callback();
                });
            }, delay);
        };
        _this.setPopupVisible = function(visible, delay, callback) {
            if (delay === void 0) delay = 0;
            var mergedProps = _this.getMergedProps();
            var onVisibleChange = mergedProps.onVisibleChange;
            var currentVisible = _this.state.popupVisible;
            if (visible !== currentVisible) _this.delayToDo(delay, function() {
                onVisibleChange && onVisibleChange(visible);
                if (!('popupVisible' in mergedProps)) {
                    if (visible) _this.setState({
                        popupVisible: true
                    }, function() {
                        _this.showPopup(callback);
                    });
                    else _this.setState({
                        popupVisible: false
                    }, function() {
                        callback && callback();
                    });
                } else callback && callback();
            });
            else callback && callback();
        };
        _this.delayToDo = function(delay, callback) {
            if (delay) {
                _this.clearDelayTimer();
                _this.delayTimer = setTimeout(function() {
                    callback();
                    _this.clearDelayTimer();
                }, delay);
            } else callback();
        };
        _this.onClickOutside = function(e) {
            var _a = _this.getMergedProps(), onClickOutside = _a.onClickOutside, clickOutsideToClose = _a.clickOutsideToClose;
            var triggerNode = (0, _index1.findDOMNode)(_this.triggerRef);
            var childrenDom = (0, _index1.findDOMNode)(_this);
            if (!(0, _dom.contains)(triggerNode, e.target) && !(0, _dom.contains)(childrenDom, e.target) && !_this.hasPopupMouseDown) {
                onClickOutside && onClickOutside();
                if (clickOutsideToClose) {
                    if (!_this.isBlurToHide() && !_this.isHoverTrigger()) _this.setPopupVisible(false);
                }
            }
        };
        _this.onKeyDown = function(e) {
            var keyCode = e.keyCode || e.which;
            _this.triggerPropsEvent('onKeyDown', e);
            if (keyCode === _keycode.Esc.code) _this.onPressEsc(e);
        };
        _this.onPressEsc = function(e) {
            var escToClose = _this.getMergedProps().escToClose;
            if (escToClose && e && e.key === _keycode.Esc.key && _this.state.popupVisible) _this.setPopupVisible(false);
        };
        _this.onMouseEnter = function(e) {
            var mouseEnterDelay = _this.getMergedProps().mouseEnterDelay;
            _this.triggerPropsEvent('onMouseEnter', e);
            _this.clearDelayTimer();
            _this.setPopupVisible(true, mouseEnterDelay || 0);
        };
        _this.onMouseMove = function(e) {
            _this.triggerPropsEvent('onMouseMove', e);
            _this.setMouseLocation(e);
            if (_this.state.popupVisible) _this.update();
        };
        _this.onMouseLeave = function(e) {
            var mouseLeaveDelay = _this.getMergedProps().mouseLeaveDelay;
            _this.clearDelayTimer();
            _this.triggerPropsEvent('onMouseLeave', e);
            if (_this.isMouseLeaveToClose()) {
                if (_this.state.popupVisible) _this.setPopupVisible(false, mouseLeaveDelay || 0);
            }
        };
        _this.onPopupMouseEnter = function() {
            _this.clearDelayTimer();
        };
        _this.onPopupMouseLeave = function(e) {
            _this.onMouseLeave(e);
        };
        _this.setMouseLocation = function(e) {
            if (_this.getMergedProps().alignPoint) _this.mouseLocation = {
                clientX: e.clientX,
                clientY: e.clientY
            };
        };
        _this.onContextMenu = function(e) {
            e.preventDefault();
            _this.triggerPropsEvent('onContextMenu', e);
            _this.setMouseLocation(e);
            if (!_this.state.popupVisible) _this.setPopupVisible(true, 0);
            else _this.getMergedProps().alignPoint && _this.update();
        };
        _this.hideContextMenu = function(e) {
            var popupVisible = _this.state.popupVisible;
            if (popupVisible) _this.mousedownToHide = true;
            _this.triggerPropsEvent('onClick', e);
            if (_this.isClickToHide() && popupVisible) _this.setPopupVisible(!popupVisible, 0);
        };
        _this.onClick = function(e) {
            var popupVisible = _this.state.popupVisible;
            if (popupVisible) _this.mousedownToHide = true;
            _this.triggerPropsEvent('onClick', e);
            _this.setMouseLocation(e);
            if (!_this.isClickToHide() && popupVisible) return;
            _this.setPopupVisible(!popupVisible, 0);
        };
        _this.onFocus = function(e) {
            var focusDelay = _this.getMergedProps().focusDelay;
            var onFocus = function() {
                _this.triggerPropsEvent('onFocus', e);
            };
            _this.clearDelayTimer();
            if (!_this.mousedownToHide) {
                if (_this.state.popupVisible) onFocus && onFocus();
                else _this.setPopupVisible(true, focusDelay || 0, onFocus);
            }
            _this.mousedownToHide = false;
        };
        _this.onBlur = function(e) {
            _this.setPopupVisible(false, 200, function() {
                return _this.triggerPropsEvent('onBlur', e);
            });
        };
        _this.onResize = function() {
            if (_this.getMergedProps().autoFixPosition && _this.state.popupVisible) _this.updatePopupPosition();
        };
        _this.onPopupMouseDown = function() {
            _this.hasPopupMouseDown = true;
            clearTimeout(_this.mouseDownTimeout);
            _this.mouseDownTimeout = setTimeout(function() {
                _this.hasPopupMouseDown = false;
            }, 0);
        };
        _this.getChild = function() {
            var children = _this.props.children;
            var element = children;
            var elementType = element && typeof element !== 'string' && element.type;
            var child = children;
            if ([
                'string',
                'number'
            ].indexOf(typeof children) > -1 || _index.default.Children.count(children) > 1) child = _index.default.createElement("span", null, children);
            else if (element && elementType && (elementType.__BYTE_BUTTON === true || elementType.__BYTE_CHECKBOX === true || elementType.__BYTE_SWITCH === true || elementType.__BYTE_RADIO === true || elementType === 'button') && element.props.disabled) {
                var _a = splitChildrenStyle(element.props.style, [
                    'position',
                    'left',
                    'right',
                    'top',
                    'bottom',
                    'float',
                    'display',
                    'zIndex'
                ]), picked = _a.picked, omitted = _a.omitted;
                child = _index.default.createElement("span", {
                    className: element.props.className,
                    style: __assign(__assign({
                        display: 'inline-block'
                    }, picked), {
                        cursor: 'not-allowed'
                    })
                }, _index.default.cloneElement(element, {
                    style: __assign(__assign({}, omitted), {
                        pointerEvents: 'none'
                    }),
                    className: undefined
                }));
            }
            return child || _index.default.createElement("span", null);
        };
        _this.appendToContainer = function(node) {
            (0, _raf.caf)(_this.rafId);
            if (_this.isDidMount) {
                var getGlobalPopupContainer = _this.context.getPopupContainer;
                var getPopupContainer = _this.getMergedProps().getPopupContainer;
                var gpc = getPopupContainer || getGlobalPopupContainer;
                var rootElement = _this.getRootElement();
                var parent_1 = gpc(rootElement);
                if (parent_1) {
                    parent_1.appendChild(node);
                    return;
                }
            }
            _this.rafId = (0, _raf.raf)(function() {
                _this.appendToContainer(node);
            });
        };
        _this.getContainer = function() {
            var popupContainer = document.createElement('div');
            popupContainer.style.width = '100%';
            popupContainer.style.position = 'absolute';
            popupContainer.style.top = '0';
            popupContainer.style.left = '0';
            _this.popupContainer = popupContainer;
            _this.appendToContainer(popupContainer);
            return popupContainer;
        };
        _this.triggerPropsEvent = function(eventName, e) {
            var child = _this.getChild();
            var childHandler = child && child.props && child.props[eventName];
            var props = _this.getMergedProps();
            if ((0, _is.isFunction)(childHandler)) childHandler(e);
            if ((0, _is.isFunction)(props[eventName])) props[eventName](e);
        };
        _this.triggerOriginEvent = function(eventName) {
            var child = _this.getChild();
            var childHandler = child && child.props && child.props[eventName];
            var propsHandler = _this.getMergedProps()[eventName];
            if ((0, _is.isFunction)(propsHandler) && (0, _is.isFunction)(childHandler)) return function(e) {
                childHandler(e);
                propsHandler(e);
            };
            return childHandler || propsHandler;
        };
        var mergedProps = _this.getMergedProps(props);
        var popupVisible = 'popupVisible' in mergedProps ? mergedProps.popupVisible : mergedProps.defaultPopupVisible;
        _this.popupOpen = !!popupVisible;
        _this.state = {
            popupVisible: !!popupVisible,
            popupStyle: {}
        };
        return _this;
    }
    Trigger.getDerivedStateFromProps = function(nextProps, state) {
        if ('popupVisible' in nextProps && nextProps.popupVisible !== state.popupVisible) return {
            popupVisible: nextProps.popupVisible
        };
        return null;
    };
    Trigger.prototype.componentDidMount = function() {
        this.componentDidUpdate(this.getMergedProps());
        this.isDidMount = true;
        this.childrenDom = (0, _index1.findDOMNode)(this);
        if (this.state.popupVisible) this.childrenDomSize = getDOMPos(this.childrenDom);
    };
    Trigger.prototype.componentDidUpdate = function(_prevProps) {
        var prevProps = this.getMergedProps(_prevProps);
        var currentProps = this.getMergedProps();
        if (!prevProps.popupVisible && currentProps.popupVisible) this.update();
        var popupVisible = this.state.popupVisible;
        this.popupOpen = popupVisible;
        var getDocument = currentProps.getDocument;
        if (!popupVisible) {
            this.offClickOutside();
            this.offContainerResize();
            this.offWindowResize();
            this.offScrollListeners();
            return;
        }
        var rect = getDOMPos(this.childrenDom);
        if (JSON.stringify(rect) !== JSON.stringify(this.childrenDomSize)) {
            this.updatePopupPosition();
            this.childrenDomSize = rect;
        }
        this.onContainerResize();
        if (currentProps.updateOnScroll || currentProps.containerScrollToClose) this.onContainersScroll();
        if (!this.handleWindowResize) {
            (0, _dom.on)(window, 'resize', this.handleUpdatePosition);
            this.handleWindowResize = true;
        }
        if (!this.handleClickOutside) {
            var root = (0, _is.isFunction)(getDocument) && getDocument();
            if (root) {
                (0, _dom.on)(root, 'mousedown', this.onClickOutside);
                this.handleClickOutside = true;
            }
        }
    };
    Trigger.prototype.componentWillUnmount = function() {
        this.unmount = true;
        this.offClickOutside();
        this.clearTimer();
        this.offWindowResize();
        this.offScrollListeners();
        this.offContainerResize();
        (0, _raf.caf)(this.rafId);
    };
    Trigger.prototype.clearDelayTimer = function() {
        if (this.delayTimer) {
            clearTimeout(this.delayTimer);
            this.delayTimer = null;
        }
    };
    Trigger.prototype.render = function() {
        var _a, _b;
        var _this = this;
        var _c;
        var _d = this.getMergedProps(), children = _d.children, style = _d.style, className = _d.className, arrowProps = _d.arrowProps, disabled = _d.disabled, popup = _d.popup, classNames = _d.classNames, duration = _d.duration, unmountOnExit = _d.unmountOnExit, alignPoint = _d.alignPoint, autoAlignPopupWidth = _d.autoAlignPopupWidth, position = _d.position, childrenPrefix = _d.childrenPrefix, showArrow = _d.showArrow, dropdownPopupStyle = _d.popupStyle;
        var isExistChildren = children || children === 0;
        var _e = this.context, getPrefixCls = _e.getPrefixCls, zIndex = _e.zIndex;
        var _f = this.state, popupVisible = _f.popupVisible, popupStyle = _f.popupStyle;
        if (!popup) return null;
        var mergeProps = {};
        var popupEventProps = {
            onMouseDown: this.onPopupMouseDown
        };
        if (this.isHoverTrigger() && !disabled) {
            mergeProps.onMouseEnter = this.onMouseEnter;
            mergeProps.onMouseLeave = this.onMouseLeave;
            if (alignPoint) mergeProps.onMouseMove = this.onMouseMove;
            if (!this.isPopupHoverHide()) {
                popupEventProps.onMouseEnter = this.onPopupMouseEnter;
                popupEventProps.onMouseLeave = this.onPopupMouseLeave;
            }
        } else {
            mergeProps.onMouseEnter = this.triggerOriginEvent('onMouseEnter');
            mergeProps.onMouseLeave = this.triggerOriginEvent('onMouseLeave');
        }
        if (this.isContextMenuTrigger() && !disabled) {
            mergeProps.onContextMenu = this.onContextMenu;
            mergeProps.onClick = this.hideContextMenu;
        } else mergeProps.onContextMenu = this.triggerOriginEvent('onContextMenu');
        if (this.isClickTrigger() && !disabled) mergeProps.onClick = this.onClick;
        else mergeProps.onClick = mergeProps.onClick || this.triggerOriginEvent('onClick');
        if (this.isFocusTrigger() && !disabled) {
            mergeProps.onFocus = this.onFocus;
            if (this.isBlurToHide()) mergeProps.onBlur = this.onBlur;
        } else {
            mergeProps.onFocus = this.triggerOriginEvent('onFocus');
            mergeProps.onBlur = this.triggerOriginEvent('onBlur');
        }
        if (!disabled) mergeProps.onKeyDown = this.onKeyDown;
        else mergeProps.onKeyDown = this.triggerOriginEvent('onKeyDown');
        var child = this.getChild();
        var popupChildren = _index.default.Children.only(popup());
        if (child.props.className) mergeProps.className = child.props.className;
        if (childrenPrefix && popupVisible) mergeProps.className = mergeProps.className ? mergeProps.className + " " + childrenPrefix + "-open" : childrenPrefix + "-open";
        if (this.isFocusTrigger()) mergeProps.tabIndex = disabled ? -1 : 0;
        var prefixCls = getPrefixCls('trigger');
        var popupClassName = (0, _classNames.default)(prefixCls, childrenPrefix, prefixCls + "-position-" + position, className);
        var childrenComponent = isExistChildren && _index.default.createElement(_resizeObserver.default, {
            onResize: this.onResize
        }, _index.default.cloneElement(child, __assign({}, mergeProps)));
        var portalContent = _index.default.createElement(_index2.CSSTransition, {
            in: !!popupVisible,
            timeout: duration,
            classNames: classNames,
            unmountOnExit: unmountOnExit,
            appear: true,
            mountOnEnter: true,
            onEnter: function(e) {
                e.style.display = 'initial';
                e.style.pointerEvents = 'none';
                if (classNames === 'slideDynamicOrigin') e.style.transform = _this.getTransformTranslate();
            },
            onEntering: function(e) {
                if (classNames === 'slideDynamicOrigin') e.style.transform = '';
            },
            onEntered: function(e) {
                e.style.pointerEvents = 'auto';
                _this.forceUpdate();
            },
            onExit: function(e) {
                e.style.pointerEvents = 'none';
            },
            onExited: function(e) {
                e.style.display = 'none';
                if (unmountOnExit) _this.triggerRef = null;
                _this.setState({
                    popupStyle: {}
                });
            }
        }, _index.default.createElement(_resizeObserver.default, {
            onResize: this.onResize
        }, _index.default.createElement("span", __assign({
            ref: function(node) {
                return _this.triggerRef = node;
            },
            "trigger-placement": this.realPosition,
            style: __assign(__assign(__assign({
                width: autoAlignPopupWidth && (style === null || style === void 0 ? void 0 : style.width) === undefined ? (_c = this.childrenDomSize) === null || _c === void 0 ? void 0 : _c.width : ''
            }, popupStyle), {
                position: 'absolute',
                zIndex: zIndex || ''
            }), style)
        }, popupEventProps, {
            className: popupClassName
        }), _index.default.createElement(popupChildren.type, __assign({
            ref: popupChildren.ref
        }, popupChildren.props, {
            style: __assign(__assign({}, popupChildren.props.style), dropdownPopupStyle)
        })), (showArrow || arrowProps) && _index.default.createElement("div", {
            className: (0, _classNames.default)(prefixCls + "-arrow-container", (_a = {}, _a[childrenPrefix + "-arrow-container"] = childrenPrefix, _a))
        }, _index.default.createElement("div", __assign({}, arrowProps, {
            className: (0, _classNames.default)(prefixCls + "-arrow", (_b = {}, _b[childrenPrefix + "-arrow"] = childrenPrefix, _b), arrowProps === null || arrowProps === void 0 ? void 0 : arrowProps.className),
            style: __assign(__assign({}, this.arrowStyle), arrowProps === null || arrowProps === void 0 ? void 0 : arrowProps.style)
        }))))));
        var portal = popupVisible || this.triggerRef ? _index.default.createElement(_portal.default, {
            getContainer: this.getContainer
        }, portalContent) : null;
        return isExistChildren ? _index.default.createElement(_index.default.Fragment, null, childrenComponent, portal) : portal;
    };
    Trigger.displayName = 'Trigger';
    Trigger.contextType = _index3.ConfigContext;
    return Trigger;
}(_index.PureComponent);
var _default = Trigger;
},
"../../node_modules/@arco-design/web-react/es/Trigger/portal.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react-dom/index.js"));
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var _useIsFirstRender = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/hooks/useIsFirstRender.js"));
var Portal = function(props) {
    var getContainer = props.getContainer, children = props.children;
    var containerRef = (0, _index.useRef)();
    var isFirstRender = (0, _useIsFirstRender.default)();
    if (isFirstRender && !_dom.isServerRendering) containerRef.current = getContainer();
    (0, _index.useEffect)(function() {
        return function() {
            var container = containerRef.current;
            if (container && container.parentNode) container.parentNode.removeChild(container);
        };
    }, []);
    return containerRef.current ? _index1.default.createPortal(children, containerRef.current) : null;
};
var _default = Portal;
},
"../../node_modules/@arco-design/web-react/es/Trigger/style/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/style/index.less");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Trigger/style/index.less");
},
"../../node_modules/@arco-design/web-react/es/_class/icon-hover.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return IconHover;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function IconHover(props) {
    var _a;
    var children = props.children, className = props.className, disabled = props.disabled, prefix = props.prefix, _b = props.size, size = _b === void 0 ? 'default' : _b, rest = __rest(props, [
        "children",
        "className",
        "disabled",
        "prefix",
        "size"
    ]);
    var getPrefixCls = (0, _index.useContext)(_index1.ConfigContext).getPrefixCls;
    var prefixCls = getPrefixCls('icon-hover');
    return _index.default.createElement("span", __assign({
        className: (0, _classNames.default)(prefixCls, (_a = {}, _a[prefix + "-icon-hover"] = prefix, _a[prefixCls + "-size-" + size] = size && size !== 'default', _a[prefixCls + "-disabled"] = disabled, _a), className),
        onClick: props.onClick
    }, rest), children);
}
},
"../../node_modules/@arco-design/web-react/es/_class/notice.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCheckCircleFill/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconCloseCircleFill/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconInfoCircleFill/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconExclamationCircleFill/index.js"));
var _index6 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconLoading/index.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _iconhover = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/icon-hover.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var Notice = function(_super) {
    __extends(Notice, _super);
    function Notice() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.startTimer = function() {
            var _a = _this.props, duration = _a.duration, onClose = _a.onClose, id = _a.id;
            if (duration !== 0) _this.timer = window.setTimeout(function() {
                onClose && onClose(id);
                _this.removeTimer();
            }, duration);
        };
        _this.removeTimer = function() {
            if (_this.timer) {
                window.clearTimeout(_this.timer);
                _this.timer = null;
            }
        };
        _this.onClose = function() {
            _this.props.onClose && _this.props.onClose(_this.props.id);
        };
        _this.renderIcon = function() {
            var _a = _this.props, showIcon = _a.showIcon, icon = _a.icon, type = _a.type, prefixCls = _a.prefixCls, iconPrefix = _a.iconPrefix;
            var content;
            if (icon) content = icon;
            else if (showIcon) {
                switch(type){
                    case 'info':
                        content = _index.default.createElement(_index4.default, null);
                        break;
                    case 'success':
                        content = _index.default.createElement(_index2.default, null);
                        break;
                    case 'error':
                        content = _index.default.createElement(_index3.default, null);
                        break;
                    case 'warning':
                        content = _index.default.createElement(_index5.default, null);
                        break;
                    case 'loading':
                        content = _index.default.createElement(_index6.default, null);
                        break;
                    default:
                        break;
                }
                content = _index.default.createElement(_context.IconContext.Provider, {
                    value: iconPrefix ? {
                        prefixCls: iconPrefix
                    } : {}
                }, content);
            }
            return _index.default.createElement("span", {
                className: prefixCls + "-icon"
            }, content);
        };
        _this.onMouseEnter = function() {
            _this.removeTimer();
        };
        _this.onMouseLeave = function() {
            _this.startTimer();
        };
        return _this;
    }
    Notice.prototype.componentDidMount = function() {
        this.startTimer();
    };
    Notice.prototype.componentDidUpdate = function(nextProps) {
        if (nextProps.duration !== this.props.duration || this.props.update) {
            this.removeTimer();
            this.startTimer();
        }
    };
    Notice.prototype.componentWillUnmount = function() {
        this.removeTimer();
    };
    Notice.prototype.render = function() {
        var _a;
        var _b = this.props, title = _b.title, content = _b.content, showIcon = _b.showIcon, className = _b.className, style = _b.style, type = _b.type, btn = _b.btn, icon = _b.icon, prefixCls = _b.prefixCls, closable = _b.closable, noticeType = _b.noticeType, iconPrefix = _b.iconPrefix;
        var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-" + type, (_a = {}, _a[prefixCls + "-closable"] = closable, _a), className);
        var _closable = 'closable' in this.props ? closable : true;
        var shouldRenderIcon = showIcon;
        if (type === 'normal' && !icon) shouldRenderIcon = false;
        if (noticeType === 'message') {
            _closable = closable;
            return _index.default.createElement("div", {
                style: {
                    textAlign: 'center'
                },
                onMouseEnter: this.onMouseEnter,
                onMouseLeave: this.onMouseLeave
            }, _index.default.createElement("div", {
                className: classNames,
                style: style,
                role: "alert"
            }, shouldRenderIcon && this.renderIcon(), _index.default.createElement("span", {
                className: prefixCls + "-content"
            }, content), _closable && _index.default.createElement(_iconhover.default, {
                prefix: prefixCls,
                className: prefixCls + "-close-btn",
                onClick: this.onClose
            }, _index.default.createElement(_index1.default, null))));
        }
        if (noticeType === 'notification') return _index.default.createElement("div", {
            onMouseEnter: this.onMouseEnter,
            onMouseLeave: this.onMouseLeave
        }, _index.default.createElement("div", {
            className: classNames,
            style: style,
            role: "alert"
        }, shouldRenderIcon && _index.default.createElement("div", {
            className: prefixCls + "-left"
        }, this.renderIcon()), _index.default.createElement("div", {
            className: prefixCls + "-right"
        }, title && _index.default.createElement("div", {
            className: prefixCls + "-title"
        }, title), _index.default.createElement("div", {
            className: prefixCls + "-content"
        }, content), btn && _index.default.createElement("div", {
            className: prefixCls + "-btn-wrapper"
        }, btn)), _closable && _index.default.createElement(_iconhover.default, {
            prefix: prefixCls,
            className: prefixCls + "-close-btn",
            onClick: this.onClose
        }, _index.default.createElement(_context.IconContext.Provider, {
            value: iconPrefix ? {
                prefixCls: iconPrefix
            } : {}
        }, _index.default.createElement(_index1.default, null)))));
    };
    Notice.defaultProps = {
        type: 'info',
        showIcon: true,
        noticeType: 'message',
        duration: 3000
    };
    return Notice;
}(_index.Component);
var _default = Notice;
},
"../../node_modules/@arco-design/web-react/es/_class/notification.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function getId(noticeProps) {
    if (noticeProps.id) return noticeProps.id;
    return "arco_notice_id_" + Math.random().toFixed(10).slice(2);
}
var BaseNotice = function(_super) {
    __extends(BaseNotice, _super);
    function BaseNotice(props) {
        var _this = _super.call(this, props) || this;
        _this.add = function(noticeProps) {
            var id = getId(noticeProps);
            _this.setState(function(prevState) {
                var oldNotices = prevState.notices;
                if (noticeProps.id && ~oldNotices.findIndex(function(notice) {
                    return notice.id === noticeProps.id;
                })) {
                    _this.update(noticeProps);
                    return prevState;
                }
                return {
                    notices: oldNotices.concat(__assign(__assign({}, noticeProps), {
                        id: id
                    })),
                    position: noticeProps.position
                };
            });
            return id;
        };
        _this.update = function(newNotice) {
            var updatedNotices = _this.state.notices.map(function(oldNotice) {
                if (newNotice.id === oldNotice.id) {
                    newNotice.update = true;
                    return newNotice;
                }
                return oldNotice;
            });
            _this.setState({
                notices: updatedNotices
            }, function() {
                var notices = _this.state.notices.map(function(oldNotice) {
                    if (newNotice.id === oldNotice.id && oldNotice.update) delete oldNotice.update;
                    return oldNotice;
                });
                _this.setState({
                    notices: notices
                });
            });
        };
        _this.clear = function() {
            _this.setState({
                notices: []
            });
        };
        _this.state = {
            notices: [],
            position: 'topRight'
        };
        _this.remove = _this.remove.bind(_this);
        return _this;
    }
    BaseNotice.prototype.remove = function(id) {
        var newNotices = this.state.notices.filter(function(notice) {
            return notice.id !== id;
        });
        this.setState({
            notices: newNotices
        });
    };
    return BaseNotice;
}(_index.Component);
var _default = BaseNotice;
},
"../../node_modules/@arco-design/web-react/es/_class/picker/input-range.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js"));
var _iconhover = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/icon-hover.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _keycode = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/keycode.js");
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _index2 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function DateInput(_a, ref) {
    var _b;
    var allowClear = _a.allowClear, error = _a.error, style = _a.style, className = _a.className, disabled = _a.disabled, _c = _a.placeholder, placeholder = _c === void 0 ? [] : _c, _d = _a.value, value = _d === void 0 ? [] : _d, popupVisible = _a.popupVisible, format = _a.format, propSize = _a.size, onClear = _a.onClear, editable = _a.editable, inputValue = _a.inputValue, onPressEnter = _a.onPressEnter, onPressTab = _a.onPressTab, onChange = _a.onChange, separator = _a.separator, suffixIcon = _a.suffixIcon, changeFocusedInputIndex = _a.changeFocusedInputIndex, focusedInputIndex = _a.focusedInputIndex, isPlaceholder = _a.isPlaceholder, rest = __rest(_a, [
        "allowClear",
        "error",
        "style",
        "className",
        "disabled",
        "placeholder",
        "value",
        "popupVisible",
        "format",
        "size",
        "onClear",
        "editable",
        "inputValue",
        "onPressEnter",
        "onPressTab",
        "onChange",
        "separator",
        "suffixIcon",
        "changeFocusedInputIndex",
        "focusedInputIndex",
        "isPlaceholder"
    ]);
    var _e = (0, _index.useContext)(_index2.ConfigContext), getPrefixCls = _e.getPrefixCls, ctxSize = _e.size, locale = _e.locale;
    var input0 = (0, _index.useRef)(null);
    var input1 = (0, _index.useRef)(null);
    var disabled1 = (0, _is.isArray)(disabled) ? disabled[0] : disabled;
    var disabled2 = (0, _is.isArray)(disabled) ? disabled[1] : disabled;
    (0, _index.useImperativeHandle)(ref, function() {
        return {
            focus: function(index) {
                var focusedIndex = typeof index === 'number' ? index : focusedInputIndex;
                var focusElement = focusedIndex === 0 ? input0 : input1;
                if (focusedInputIndex === 0 && !disabled1 || focusedInputIndex === 1 && !disabled2) focusElement.current && focusElement.current.focus && focusElement.current.focus();
            },
            blur: function() {
                if (focusedInputIndex === 0) input0.current && input0.current.blur && input0.current.blur();
                if (focusedInputIndex === 1) input1.current && input1.current.blur && input1.current.blur();
            }
        };
    });
    function changeFocusedInput(index) {
        if (focusedInputIndex !== index) changeFocusedInputIndex(index);
    }
    function onKeyDown(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === _keycode.Enter.code) onPressEnter && onPressEnter();
        if (keyCode === _keycode.Tab.code) onPressTab && onPressTab(e);
    }
    function onChangeInput(e) {
        e.stopPropagation();
        onChange && onChange(e);
    }
    var prefixCls = getPrefixCls('picker');
    var size = propSize || ctxSize;
    var inputClassNames = (0, _classNames.default)(prefixCls, prefixCls + "-range", prefixCls + "-size-" + size, (_b = {}, _b[prefixCls + "-focused"] = !!popupVisible, _b[prefixCls + "-disabled"] = disabled1 && disabled2, _b[prefixCls + "-error"] = error, _b), className);
    var getInputValue = function(index) {
        var valueText = value[index] ? value[index].locale(locale.dayjsLocale).format(format) : '';
        if (inputValue) return index === focusedInputIndex ? inputValue : valueText;
        return valueText;
    };
    var readOnlyProps = editable ? {} : {
        readOnly: true
    };
    function getFocusInputClassName(index) {
        var _a;
        return (0, _classNames.default)(prefixCls + "-input", (_a = {}, _a[prefixCls + "-input-active"] = focusedInputIndex === index, _a[prefixCls + "-input-placeholder"] = isPlaceholder && focusedInputIndex === index, _a));
    }
    return _index.default.createElement("div", __assign({
        style: style,
        className: inputClassNames
    }, (0, _omit.default)(rest, [
        'onChange',
        'onPressEnter'
    ])), _index.default.createElement("div", {
        className: getFocusInputClassName(0)
    }, _index.default.createElement("input", __assign({
        ref: input0,
        disabled: disabled1,
        placeholder: placeholder[0],
        value: getInputValue(0),
        onChange: onChangeInput,
        onKeyDown: onKeyDown,
        onClick: function() {
            return changeFocusedInput(0);
        }
    }, readOnlyProps))), _index.default.createElement("span", {
        className: prefixCls + "-separator"
    }, separator || '-'), _index.default.createElement("div", {
        className: getFocusInputClassName(1)
    }, _index.default.createElement("input", __assign({
        ref: input1,
        disabled: disabled2,
        placeholder: placeholder[1],
        value: getInputValue(1),
        onChange: onChangeInput,
        onKeyDown: onKeyDown,
        onClick: function() {
            return changeFocusedInput(1);
        }
    }, readOnlyProps))), _index.default.createElement("div", {
        className: prefixCls + "-suffix"
    }, allowClear && value.length === 2 && _index.default.createElement(_iconhover.default, {
        prefix: prefixCls,
        onClick: onClear,
        className: prefixCls + "-clear-icon"
    }, _index.default.createElement(_index1.default, null)), _index.default.createElement("span", {
        className: prefixCls + "-suffix-icon"
    }, suffixIcon)));
}
var _default = (0, _index.forwardRef)(DateInput);
},
"../../node_modules/@arco-design/web-react/es/_class/picker/input.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _omit = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/omit.js"));
var _keycode = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/keycode.js");
var _index1 = __webpack_require__("../../node_modules/@arco-design/web-react/es/ConfigProvider/index.js");
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js"));
var _iconhover = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_class/icon-hover.js"));
var _classNames = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/classNames.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = this && this.__rest || function(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
};
function DateInput(_a, ref) {
    var _b, _c;
    var style = _a.style, className = _a.className, propPrefixCls = _a.prefixCls, allowClear = _a.allowClear, error = _a.error, disabled = _a.disabled, placeholder = _a.placeholder, format = _a.format, propSize = _a.size, onClear = _a.onClear, editable = _a.editable, value = _a.value, inputValue = _a.inputValue, onPressEnter = _a.onPressEnter, suffixIcon = _a.suffixIcon, onChange = _a.onChange, popupVisible = _a.popupVisible, isPlaceholder = _a.isPlaceholder, rest = __rest(_a, [
        "style",
        "className",
        "prefixCls",
        "allowClear",
        "error",
        "disabled",
        "placeholder",
        "format",
        "size",
        "onClear",
        "editable",
        "value",
        "inputValue",
        "onPressEnter",
        "suffixIcon",
        "onChange",
        "popupVisible",
        "isPlaceholder"
    ]);
    var _d = (0, _index.useContext)(_index1.ConfigContext), getPrefixCls = _d.getPrefixCls, ctxSize = _d.size, locale = _d.locale;
    var input = (0, _index.useRef)(null);
    var size = propSize || ctxSize;
    (0, _index.useImperativeHandle)(ref, function() {
        return {
            focus: function() {
                input.current && input.current.focus && input.current.focus();
            },
            blur: function() {
                input.current && input.current.blur && input.current.blur();
            }
        };
    });
    function onKeyDown(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === _keycode.Enter.code) onPressEnter && onPressEnter();
    }
    var showValue = '';
    if (inputValue !== undefined) showValue = inputValue;
    else if (value && !(0, _is.isArray)(value)) showValue = typeof format === 'function' ? format(value) : value.locale(locale.dayjsLocale).format(format);
    var readOnlyProps = editable ? {} : {
        readOnly: true
    };
    var prefixCls = propPrefixCls || getPrefixCls('picker');
    var classNames = (0, _classNames.default)(prefixCls, prefixCls + "-size-" + size, (_b = {}, _b[prefixCls + "-focused"] = !!popupVisible, _b[prefixCls + "-disabled"] = disabled, _b[prefixCls + "-error"] = error, _b), className);
    return _index.default.createElement("div", __assign({
        style: style,
        className: classNames
    }, (0, _omit.default)(rest, [
        'onChange',
        'onPressEnter'
    ])), _index.default.createElement("div", {
        className: (0, _classNames.default)(prefixCls + "-input", (_c = {}, _c[prefixCls + "-input-placeholder"] = isPlaceholder, _c))
    }, _index.default.createElement("input", __assign({
        ref: input,
        disabled: disabled,
        placeholder: placeholder,
        className: prefixCls + "-start-time",
        value: showValue,
        onKeyDown: onKeyDown,
        onChange: onChange
    }, readOnlyProps))), _index.default.createElement("div", {
        className: prefixCls + "-suffix"
    }, allowClear && showValue && _index.default.createElement(_iconhover.default, {
        prefix: prefixCls,
        onClick: onClear,
        className: prefixCls + "-clear-icon"
    }, _index.default.createElement(_index2.default, null)), _index.default.createElement("span", {
        className: prefixCls + "-suffix-icon"
    }, suffixIcon)));
}
var _default = (0, _index.forwardRef)(DateInput);
},
"../../node_modules/@arco-design/web-react/es/_util/classNames.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var _warning = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/warning.js"));
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function _default() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    var length = args.length;
    var classNames = [];
    var _loop_1 = function(i) {
        var v = args[i];
        if (!v) return "continue";
        if ((0, _is.isString)(v)) classNames.push(v);
        else if ((0, _is.isArray)(v)) classNames = classNames.concat(v);
        else if ((0, _is.isObject)(v)) Object.keys(v).forEach(function(k) {
            if (v[k]) classNames.push(k);
        });
        else (0, _warning.default)(true, 'arguments must be one of string/array/object.');
    };
    for(var i = 0; i < length; i++)_loop_1(i);
    return __spreadArray([], __read(new Set(classNames)), false).join(' ');
}
},
"../../node_modules/@arco-design/web-react/es/_util/constant.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    NOOP: function() {
        return NOOP;
    },
    newArray: function() {
        return newArray;
    },
    pickTriggerPropsFromRest: function() {
        return pickTriggerPropsFromRest;
    }
});
var _pick = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/_util/pick.js"));
var NOOP = function() {};
function newArray(length) {
    return Array.apply(null, Array(length));
}
function pickTriggerPropsFromRest(rest) {
    return (0, _pick.default)(rest, [
        'onMouseEnter',
        'onMouseLeave',
        'onMouseMove',
        'onContextMenu',
        'onClick',
        'onFocus',
        'onBlur',
        'tabIndex'
    ]);
}
},
"../../node_modules/@arco-design/web-react/es/_util/dayjs.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    dayjs: function() {
        return dayjs;
    },
    methods: function() {
        return methods;
    },
    timezoneToOffset: function() {
        return timezoneToOffset;
    },
    getNow: function() {
        return getNow;
    },
    toTimezone: function() {
        return toTimezone;
    },
    toLocal: function() {
        return toLocal;
    },
    getTimeFormat: function() {
        return getTimeFormat;
    },
    getDayjsValue: function() {
        return getDayjsValue;
    },
    getValueWithTime: function() {
        return getValueWithTime;
    },
    getSortedDayjsArray: function() {
        return getSortedDayjsArray;
    },
    isDayjsChange: function() {
        return isDayjsChange;
    },
    isDayjsArrayChange: function() {
        return isDayjsArrayChange;
    },
    isValidTimeString: function() {
        return isValidTimeString;
    }
});
var _dayjsmin = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/dayjs.min.js"));
var _customParseFormat = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/plugin/customParseFormat.js"));
var _isBetween = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/plugin/isBetween.js"));
var _weekOfYear = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/plugin/weekOfYear.js"));
var _advancedFormat = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/plugin/advancedFormat.js"));
var _weekYear = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/plugin/weekYear.js"));
var _quarterOfYear = __webpack_require__.ir(__webpack_require__("../../node_modules/dayjs/plugin/quarterOfYear.js"));
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var isMoment = (0, _dayjsmin.default)()._isAMomentObject;
if (isMoment) _dayjsmin.default.extend = function() {};
var overwriteIsDayjs = function(_, Dayjs, dayjs) {
    dayjs = function(date, c) {
        if ((0, _is.isDayjs)(date)) return date.clone();
        var cfg = typeof c === 'object' ? c : {};
        cfg.date = date;
        cfg.args = arguments;
        return new Dayjs(cfg);
    };
    var proto = Dayjs.prototype;
    var old$Utils = proto.$utils;
    proto.$utils = function() {
        var newUtils = old$Utils();
        newUtils.i = _is.isDayjs;
        return newUtils;
    };
    dayjs.isDayjs = _is.isDayjs;
};
_dayjsmin.default.extend(overwriteIsDayjs);
_dayjsmin.default.extend(_customParseFormat.default);
_dayjsmin.default.extend(_isBetween.default);
_dayjsmin.default.extend(_weekOfYear.default);
_dayjsmin.default.extend(_advancedFormat.default);
_dayjsmin.default.extend(_weekYear.default);
_dayjsmin.default.extend(_quarterOfYear.default);
var dayjs = _dayjsmin.default;
var methods = {
    add: function(time, value, unit) {
        return isMoment ? time.clone().add(value, unit) : time.add(value, unit);
    },
    subtract: function(time, value, unit) {
        return isMoment ? time.clone().subtract(value, unit) : time.subtract(value, unit);
    },
    startOf: function(time, unit) {
        return isMoment ? time.clone().startOf(unit) : time.startOf(unit);
    },
    endOf: function(time, unit) {
        return isMoment ? time.clone().endOf(unit) : time.endOf(unit);
    },
    set: function(time, unit, value) {
        return isMoment ? time.clone().set(unit, value) : time.set(unit, value);
    },
    isSameWeek: function(date1, date2, weekStart, localeName) {
        return isMoment ? date1.locale(localeName, {
            week: {
                dow: weekStart
            }
        }).isSame(date2, 'week') : date1.locale(__assign(__assign({}, dayjs.Ls[localeName]), {
            weekStart: weekStart
        })).isSame(date2, 'week');
    }
};
var typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    hour: 3,
    minute: 4,
    second: 5
};
var dtfCache = {};
var getDateTimeFormat = function(timezone, timeZoneName) {
    var key = timezone + "|" + (timeZoneName || 'short');
    var dtf = dtfCache[key];
    if (!dtf) {
        dtf = new Intl.DateTimeFormat('en-US', {
            hour12: false,
            timeZone: timezone,
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });
        dtfCache[key] = dtf;
    }
    return dtf;
};
var makeFormatParts = function(timestamp, timezone) {
    var date = new Date(timestamp);
    var dtf = getDateTimeFormat(timezone);
    return dtf.formatToParts(date);
};
var tzOffset = function(timestamp, timezone) {
    var formatResult = makeFormatParts(timestamp, timezone);
    var filled = [];
    for(var i = 0; i < formatResult.length; i += 1){
        var _a = formatResult[i], type = _a.type, value = _a.value;
        var pos = typeToPos[type];
        if (pos >= 0) filled[pos] = parseInt(value, 10);
    }
    var hour = filled[3];
    var fixedHour = hour === 24 ? 0 : hour;
    var utcTs = Date.UTC(filled[0], filled[1] - 1, filled[2], fixedHour, filled[4], filled[5], 0);
    var asTS = +timestamp;
    var over = asTS % 1000;
    asTS -= over;
    return (utcTs - asTS) / 60000;
};
var fixOffset = function(localTS, o0, tz) {
    var utcGuess = localTS - o0 * 60000;
    var o2 = tzOffset(utcGuess, tz);
    if (o0 === o2) return [
        utcGuess,
        o0
    ];
    utcGuess -= (o2 - o0) * 60000;
    var o3 = tzOffset(utcGuess, tz);
    if (o2 === o3) return [
        utcGuess,
        o2
    ];
    return [
        localTS - Math.min(o2, o3) * 60000,
        Math.max(o2, o3)
    ];
};
function timezoneToOffset(inputTs, timezone) {
    return fixOffset(inputTs, tzOffset(new Date().getTime(), timezone), timezone)[1];
}
function getNow(utcOffset, timezone) {
    return (0, _is.isUndefined)(utcOffset) && !timezone ? dayjs() : toTimezone(dayjs(), utcOffset, timezone);
}
function toTimezone(time, utcOffset, timezone, local) {
    if (!time || (0, _is.isUndefined)(utcOffset) && !timezone) return time;
    var localOffset = -time.toDate().getTimezoneOffset();
    var uOffset = (0, _is.isUndefined)(utcOffset) ? !timezone ? localOffset : timezoneToOffset(time.valueOf(), timezone) : utcOffset;
    var timezoneOffset = Math.abs(uOffset) <= 16 ? uOffset * 60 : uOffset;
    var diffOffset = local ? localOffset - timezoneOffset : timezoneOffset - localOffset;
    return dayjs(dayjs(time).valueOf() + diffOffset * 60000);
}
function toLocal(time, utcOffset, timezone) {
    return toTimezone(time, utcOffset, timezone, true);
}
function getTimeFormat(format) {
    var units = [
        'H',
        'h',
        'm',
        's',
        'A',
        'a'
    ];
    var timeFormat = '';
    units.some(function(unit) {
        if (format.indexOf(unit) !== -1) {
            timeFormat = "" + unit + format.split(" " + unit)[1];
            return true;
        }
        return false;
    });
    return timeFormat || 'HH:mm:ss';
}
function getDayjsValue(time, format, utcOffset, timezone) {
    if (!time) return undefined;
    var formatValue = function(value) {
        if ((0, _is.isDayjs)(value)) return dayjs(value.valueOf());
        if (typeof value === 'string') {
            var dv = dayjs(value, format);
            return dv.isValid() ? dv : dayjs(value, 'YYYY-MM-DD');
        }
        return dayjs(value);
    };
    var getRealTime = function(t) {
        return utcOffset !== undefined || timezone ? toTimezone(formatValue(t), utcOffset, timezone) : formatValue(t);
    };
    if ((0, _is.isArray)(time)) return time.map(function(t) {
        return t ? getRealTime(t) : undefined;
    });
    return getRealTime(time);
}
function getValueWithTime(date, time) {
    var y = date.year();
    var m = date.month();
    var d = date.date();
    if (time) {
        var returnTime = time;
        returnTime = methods.set(returnTime, 'year', y);
        returnTime = methods.set(returnTime, 'month', m);
        returnTime = methods.set(returnTime, 'date', d);
        return returnTime;
    }
    return date;
}
function getSortedDayjsArray(values) {
    if (!values || !values[0] || !values[1]) return values;
    var newValues = __spreadArray([], __read(values), false);
    newValues.sort(function(a, b) {
        return a.valueOf() - b.valueOf();
    });
    return newValues;
}
function isDayjsChange(prevValue, currentValue) {
    if (currentValue === undefined && prevValue === undefined) return false;
    return currentValue && !prevValue || !currentValue && prevValue || dayjs(currentValue).valueOf() !== dayjs(prevValue).valueOf();
}
function isDayjsArrayChange(prevValue, currentValue) {
    if (currentValue === undefined && prevValue === undefined) return false;
    return currentValue && !prevValue || !currentValue && prevValue || (0, _is.isArray)(currentValue) && (0, _is.isArray)(prevValue) && dayjs(currentValue[0]).valueOf() !== dayjs(prevValue[0]).valueOf() || dayjs(currentValue[1]).valueOf() !== dayjs(prevValue[1]).valueOf();
}
function isValidTimeString(str, format) {
    return typeof str === 'string' && dayjs(str, format).format(format) === str;
}
},
"../../node_modules/@arco-design/web-react/es/_util/dom.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isServerRendering: function() {
        return isServerRendering;
    },
    on: function() {
        return on;
    },
    off: function() {
        return off;
    },
    contains: function() {
        return contains;
    },
    isScrollElement: function() {
        return isScrollElement;
    },
    getScrollElements: function() {
        return getScrollElements;
    }
});
var _constant = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/constant.js");
var isServerRendering = function() {
    try {
        return !(typeof window !== 'undefined' && document !== undefined);
    } catch (e) {
        return true;
    }
}();
var on = function() {
    if (isServerRendering) return _constant.NOOP;
    return function(element, event, handler, options) {
        element && element.addEventListener(event, handler, options || false);
    };
}();
var off = function() {
    if (isServerRendering) return _constant.NOOP;
    return function(element, event, handler, options) {
        element && element.removeEventListener(event, handler, options || false);
    };
}();
var contains = function(root, ele) {
    var node = ele;
    while(node){
        if (node === root) return true;
        node = node.parentNode;
    }
    return false;
};
var isScrollElement = function(element) {
    return element.scrollHeight > element.offsetHeight || element.scrollWidth > element.offsetWidth;
};
var getScrollElements = function(container, top) {
    if (top === void 0) top = document.documentElement;
    var scrollElements = [];
    var element = container;
    while(element && element !== top){
        if (isScrollElement(element)) scrollElements.push(element);
        element = element.parentElement;
    }
    return scrollElements;
};
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useForceUpdate.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useForceUpdate;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function useForceUpdate() {
    var _a = __read((0, _index.useReducer)(function(v) {
        return v + 1;
    }, 0), 2), dispatch = _a[1];
    return dispatch;
}
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useIsFirstRender.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useIsFirstRender;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
function useIsFirstRender() {
    var isFirst = (0, _index.useRef)(true);
    (0, _index.useEffect)(function() {
        isFirst.current = false;
    }, []);
    return isFirst.current;
}
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useIsomorphicLayoutEffect.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _dom = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/dom.js");
var useIsomorphicLayoutEffect = _dom.isServerRendering ? _index.useEffect : _index.useLayoutEffect;
var _default = useIsomorphicLayoutEffect;
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeProps.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useMergeProps;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function useMergeProps(componentProps, defaultProps, globalComponentConfig) {
    var _defaultProps = (0, _index.useMemo)(function() {
        return __assign(__assign({}, defaultProps), globalComponentConfig);
    }, [
        defaultProps,
        globalComponentConfig
    ]);
    var props = (0, _index.useMemo)(function() {
        var mProps = __assign({}, componentProps);
        for(var propName in _defaultProps)if (mProps[propName] === undefined) mProps[propName] = _defaultProps[propName];
        return mProps;
    }, [
        componentProps,
        _defaultProps
    ]);
    return props;
}
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useMergeValue.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useMergeValue;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var _is = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/is.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function useMergeValue(defaultStateValue, props) {
    var _a = props || {}, defaultValue = _a.defaultValue, value = _a.value;
    var firstRenderRef = (0, _index.useRef)(true);
    var _b = __read((0, _index.useState)(!(0, _is.isUndefined)(value) ? value : !(0, _is.isUndefined)(defaultValue) ? defaultValue : defaultStateValue), 2), stateValue = _b[0], setStateValue = _b[1];
    (0, _index.useEffect)(function() {
        if (firstRenderRef.current) {
            firstRenderRef.current = false;
            return;
        }
        if (value === undefined) setStateValue(value);
    }, [
        value
    ]);
    var mergedValue = (0, _is.isUndefined)(value) ? stateValue : value;
    return [
        mergedValue,
        setStateValue,
        stateValue
    ];
}
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/usePrevious.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return usePrevious;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
function usePrevious(value) {
    var ref = (0, _index.useRef)();
    (0, _index.useEffect)(function() {
        ref.current = value;
    });
    return ref.current;
}
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useStateWithPromise.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
function useStateWithPromise(defaultVal) {
    var _a = __read((0, _index.useState)({
        value: defaultVal,
        resolve: function(e) {
            e;
        }
    }), 2), state = _a[0], setState = _a[1];
    (0, _index.useEffect)(function() {
        state.resolve(state.value);
    }, [
        state
    ]);
    return [
        state.value,
        function(updater) {
            return new Promise(function(resolve) {
                setState(function(prevState) {
                    var nextVal = updater;
                    if (typeof updater === 'function') nextVal = updater(prevState.value);
                    return {
                        value: nextVal,
                        resolve: resolve
                    };
                });
            });
        }
    ];
}
var _default = useStateWithPromise;
},
"../../node_modules/@arco-design/web-react/es/_util/hooks/useUpdate.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return useUpdate;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function useUpdate(fn, deps) {
    if (deps === void 0) deps = [];
    var isDidMount = (0, _index.useRef)(false);
    (0, _index.useEffect)(function() {
        if (isDidMount.current) fn();
        else isDidMount.current = true;
    }, __spreadArray([], __read(deps), false));
}
},
"../../node_modules/@arco-design/web-react/es/_util/is.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    isArray: function() {
        return isArray;
    },
    isObject: function() {
        return isObject;
    },
    isString: function() {
        return isString;
    },
    isNumber: function() {
        return isNumber;
    },
    isRegExp: function() {
        return isRegExp;
    },
    isFile: function() {
        return isFile;
    },
    isBlob: function() {
        return isBlob;
    },
    isColor: function() {
        return isColor;
    },
    isUndefined: function() {
        return isUndefined;
    },
    isNull: function() {
        return isNull;
    },
    isNullOrUndefined: function() {
        return isNullOrUndefined;
    },
    isFunction: function() {
        return isFunction;
    },
    isEmptyObject: function() {
        return isEmptyObject;
    },
    isExist: function() {
        return isExist;
    },
    isWindow: function() {
        return isWindow;
    },
    isDayjs: function() {
        return isDayjs;
    }
});
var opt = Object.prototype.toString;
function isArray(obj) {
    return opt.call(obj) === '[object Array]';
}
function isObject(obj) {
    return opt.call(obj) === '[object Object]';
}
function isString(obj) {
    return opt.call(obj) === '[object String]';
}
function isNumber(obj) {
    return opt.call(obj) === '[object Number]' && obj === obj;
}
function isRegExp(obj) {
    return opt.call(obj) === '[object RegExp]';
}
function isFile(obj) {
    return opt.call(obj) === '[object File]';
}
function isBlob(obj) {
    return opt.call(obj) === '[object Blob]';
}
function isHex(color) {
    return /^#[a-fA-F0-9]{3}$|#[a-fA-F0-9]{6}$/.test(color);
}
function isRgb(color) {
    return /^rgb\((\s*\d+\s*,?){3}\)$/.test(color);
}
function isRgba(color) {
    return /^rgba\((\s*\d+\s*,\s*){3}\s*\d(\.\d+)?\s*\)$/.test(color);
}
function isColor(color) {
    return isHex(color) || isRgb(color) || isRgba(color);
}
function isUndefined(obj) {
    return obj === undefined;
}
function isNull(obj) {
    return obj === null;
}
function isNullOrUndefined(obj) {
    return obj === null || obj === undefined;
}
function isFunction(obj) {
    return typeof obj === 'function';
}
function isEmptyObject(obj) {
    return isObject(obj) && Object.keys(obj).length === 0;
}
function isExist(obj) {
    return obj || obj === 0;
}
function isWindow(el) {
    return el === window;
}
function isDayjs(time) {
    return isObject(time) && ('$y' in time && '$M' in time && '$D' in time && '$d' in time && '$H' in time && '$m' in time && '$s' in time || time._isAMomentObject);
}
},
"../../node_modules/@arco-design/web-react/es/_util/keycode.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    Enter: function() {
        return Enter;
    },
    Esc: function() {
        return Esc;
    },
    Backspace: function() {
        return Backspace;
    },
    Tab: function() {
        return Tab;
    },
    Space: function() {
        return Space;
    },
    ArrowUp: function() {
        return ArrowUp;
    },
    ArrowDown: function() {
        return ArrowDown;
    },
    ArrowLeft: function() {
        return ArrowLeft;
    },
    ArrowRight: function() {
        return ArrowRight;
    }
});
var Enter = {
    key: 'Enter',
    code: 13
};
var Esc = {
    key: 'Escape',
    code: 27
};
var Backspace = {
    key: 'Backspace',
    code: 8
};
var Tab = {
    key: 'Tab',
    code: 9
};
var Space = {
    key: '',
    code: 32
};
var ArrowUp = {
    key: 'ArrowUp',
    code: 38
};
var ArrowDown = {
    key: 'ArrowDown',
    code: 40
};
var ArrowLeft = {
    key: 'ArrowLeft',
    code: 37
};
var ArrowRight = {
    key: 'ArrowRight',
    code: 39
};
},
"../../node_modules/@arco-design/web-react/es/_util/mergeProps.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return mergeProps;
    }
});
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function mergeProps(componentProps, defaultProps, globalComponentConfig) {
    var _defaultProps = __assign(__assign({}, defaultProps), globalComponentConfig);
    var props = __assign({}, componentProps);
    for(var propName in _defaultProps)if (props[propName] === undefined) props[propName] = _defaultProps[propName];
    return props;
}
},
"../../node_modules/@arco-design/web-react/es/_util/omit.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return omit;
    }
});
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function omit(obj, keys) {
    var clone = __assign({}, obj);
    keys.forEach(function(key) {
        if (key in clone) delete clone[key];
    });
    return clone;
}
},
"../../node_modules/@arco-design/web-react/es/_util/pad.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    padStart: function() {
        return padStart;
    },
    padEnd: function() {
        return padEnd;
    }
});
function padStart(string, length, char) {
    if (char === void 0) char = ' ';
    var s = String(string);
    if (!length) return s;
    var newString = s.length < length ? "" + char + s : s;
    return newString.length < length ? padStart(newString, length, char) : newString;
}
function padEnd(string, length, char) {
    if (char === void 0) char = ' ';
    var s = String(string);
    if (!length) return s;
    var newString = s.length < length ? "" + s + char : s;
    return newString.length < length ? padEnd(newString, length, char) : newString;
}
},
"../../node_modules/@arco-design/web-react/es/_util/pick.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return pick;
    }
});
function pick(obj, keys) {
    var clone = {};
    keys.forEach(function(key) {
        var k = key;
        if (key in obj) clone[k] = obj[k];
    });
    return clone;
}
},
"../../node_modules/@arco-design/web-react/es/_util/polyfill/object-assign.js": function (module, exports, __webpack_require__) {
if (typeof Object.assign !== 'function') Object.defineProperty(Object, 'assign', {
    value: function assign(target) {
        'use strict';
        if (target == null) throw new TypeError('Cannot convert undefined or null to object');
        var to = Object(target);
        for(var index = 1; index < arguments.length; index++){
            var nextSource = arguments[index];
            if (nextSource != null) {
                for(var nextKey in nextSource)if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) to[nextKey] = nextSource[nextKey];
            }
        }
        return to;
    },
    writable: true,
    configurable: true
});
},
"../../node_modules/@arco-design/web-react/es/_util/raf.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    raf: function() {
        return raf;
    },
    caf: function() {
        return caf;
    }
});
var target = typeof window === 'undefined' ? __webpack_require__.g : window;
var vendors = [
    'webkit',
    'ms',
    'moz',
    'o'
];
var raf = target.requestAnimationFrame;
var caf = target.cancelAnimationFrame;
if (!raf || !caf) {
    vendors.some(function(prefix) {
        raf = target[prefix + "RequestAnimationFrame"];
        caf = target[prefix + "CancelAnimationFrame"] || target[prefix + "CancelRequestAnimationFrame"];
        return raf && caf;
    });
    if (!raf || !caf) {
        var lastTime_1 = 0;
        raf = function(cb) {
            var currentTime = Date.now();
            var diff = Math.max(0, 16 - (currentTime - lastTime_1));
            var timer = setTimeout(function() {
                cb();
                lastTime_1 = currentTime + diff;
            }, diff);
            return timer;
        };
        caf = function(timer) {
            clearTimeout(timer);
        };
    }
}
raf = raf.bind(target);
caf = caf.bind(target);
},
"../../node_modules/@arco-design/web-react/es/_util/resizeObserver.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _ResizeObserveres = __webpack_require__.ir(__webpack_require__("../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js"));
var _index1 = __webpack_require__("../../node_modules/react-dom/index.js");
var __extends = this && this.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var ResizeObserverComponent = function(_super) {
    __extends(ResizeObserverComponent, _super);
    function ResizeObserverComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.componentWillUnmount = function() {
            if (_this.resizeObserver) _this.destroyResizeObserver();
        };
        _this.createResizeObserver = function() {
            _this.resizeObserver = new _ResizeObserveres.default(function(entry) {
                var onResize = _this.props.onResize;
                onResize && onResize(entry);
            });
            _this.resizeObserver.observe((0, _index1.findDOMNode)(_this));
        };
        _this.destroyResizeObserver = function() {
            _this.resizeObserver && _this.resizeObserver.disconnect();
            _this.resizeObserver = null;
        };
        return _this;
    }
    ResizeObserverComponent.prototype.componentDidMount = function() {
        if (!_index.default.isValidElement(this.props.children)) console.warn('The children of ResizeObserver is invalid.');
        else this.createResizeObserver();
    };
    ResizeObserverComponent.prototype.componentDidUpdate = function() {
        if (!this.resizeObserver && (0, _index1.findDOMNode)(this)) this.createResizeObserver();
    };
    ResizeObserverComponent.prototype.render = function() {
        return this.props.children;
    };
    return ResizeObserverComponent;
}(_index.default.Component);
var _default = ResizeObserverComponent;
},
"../../node_modules/@arco-design/web-react/es/_util/responsiveObserve.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    responsiveArray: function() {
        return responsiveArray;
    },
    responsiveMap: function() {
        return responsiveMap;
    },
    default: function() {
        return _default;
    }
});
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var responsiveArray = [
    'xxl',
    'xl',
    'lg',
    'md',
    'sm',
    'xs'
];
var responsiveMap = {
    xs: '(max-width: 575px)',
    sm: '(min-width: 576px)',
    md: '(min-width: 768px)',
    lg: '(min-width: 992px)',
    xl: '(min-width: 1200px)',
    xxl: '(min-width: 1600px)'
};
var subscribers = [];
var subUid = -1;
var screens = {};
var responsiveObserve = {
    matchHandlers: {},
    dispatch: function(pointMap, breakpointChecked) {
        screens = pointMap;
        if (subscribers.length < 1) return false;
        subscribers.forEach(function(item) {
            item.func(screens, breakpointChecked);
        });
        return true;
    },
    subscribe: function(func) {
        if (subscribers.length === 0) this.register();
        var token = (++subUid).toString();
        subscribers.push({
            token: token,
            func: func
        });
        func(screens, null);
        return token;
    },
    unsubscribe: function(token) {
        subscribers = subscribers.filter(function(item) {
            return item.token !== token;
        });
        if (subscribers.length === 0) this.unregister();
    },
    unregister: function() {
        var _this = this;
        Object.keys(responsiveMap).forEach(function(screen) {
            var matchMediaQuery = responsiveMap[screen];
            var handler = _this.matchHandlers[matchMediaQuery];
            if (handler && handler.mql && handler.listener) handler.mql.removeListener(handler.listener);
        });
    },
    register: function() {
        var _this = this;
        Object.keys(responsiveMap).forEach(function(screen) {
            var matchMediaQuery = responsiveMap[screen];
            var listener = function(_a) {
                var _b;
                var matches = _a.matches;
                _this.dispatch(__assign(__assign({}, screens), (_b = {}, _b[screen] = matches, _b)), screen);
            };
            var mql = window.matchMedia(matchMediaQuery);
            mql.addListener(listener);
            _this.matchHandlers[matchMediaQuery] = {
                mql: mql,
                listener: listener
            };
            listener(mql);
        });
    }
};
var _default = responsiveObserve;
},
"../../node_modules/@arco-design/web-react/es/_util/style.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    fixedWidth: function() {
        return fixedWidth;
    },
    setTransformStyle: function() {
        return setTransformStyle;
    },
    getStyle: function() {
        return getStyle;
    }
});
var transformNames = [
    'transform',
    'WebkitTransform',
    'msTransform',
    'MozTransform',
    'OTransform'
];
function fixedWidth(width) {
    return {
        maxWidth: width,
        minWidth: width,
        width: width
    };
}
function setTransformStyle(value) {
    var style = {};
    transformNames.forEach(function(name) {
        style[name] = value;
    });
    return style;
}
function getStyle(element, prop) {
    if (!element || !prop) return null;
    var styleName = prop;
    if (styleName === 'float') styleName = 'cssFloat';
    try {
        if (document.defaultView) {
            var computed = document.defaultView.getComputedStyle(element, '');
            return element.style[styleName] || computed ? computed[styleName] : '';
        }
    } catch (e) {
        return element.style[styleName];
    }
}
},
"../../node_modules/@arco-design/web-react/es/_util/throttleByRaf.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _raf = __webpack_require__("../../node_modules/@arco-design/web-react/es/_util/raf.js");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spreadArray = this && this.__spreadArray || function(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
function _default(cb) {
    var timer = null;
    var throttle = function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        timer && (0, _raf.caf)(timer);
        timer = (0, _raf.raf)(function() {
            cb.apply(void 0, __spreadArray([], __read(args), false));
            timer = null;
        });
    };
    throttle.cancel = function() {
        (0, _raf.caf)(timer);
        timer = null;
    };
    return throttle;
}
},
"../../node_modules/@arco-design/web-react/es/_util/warning.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return warning;
    }
});
function warning(condition, message) {
    if (console) {
        if (condition) console.error("Warning: " + message);
    }
}
},
"../../node_modules/@arco-design/web-react/es/locale/default.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _zhCN = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/locale/zh-CN.js"));
var _default = _zhCN.default;
},
"../../node_modules/@arco-design/web-react/es/locale/zh-CN.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
__webpack_require__("../../node_modules/dayjs/locale/zh-cn.js");
var Calendar = {
    formatYear: 'YYYY 年',
    formatMonth: 'YYYY 年 MM 月',
    today: '今天',
    view: {
        month: '月',
        year: '年',
        week: '周',
        day: '日'
    },
    month: {
        long: {
            January: '一月',
            February: '二月',
            March: '三月',
            April: '四月',
            May: '五月',
            June: '六月',
            July: '七月',
            August: '八月',
            September: '九月',
            October: '十月',
            November: '十一月',
            December: '十二月'
        },
        short: {
            January: '一月',
            February: '二月',
            March: '三月',
            April: '四月',
            May: '五月',
            June: '六月',
            July: '七月',
            August: '八月',
            September: '九月',
            October: '十月',
            November: '十一月',
            December: '十二月'
        }
    },
    week: {
        long: {
            self: '周',
            monday: '周一',
            tuesday: '周二',
            wednesday: '周三',
            thursday: '周四',
            friday: '周五',
            saturday: '周六',
            sunday: '周日'
        },
        short: {
            self: '周',
            monday: '一',
            tuesday: '二',
            wednesday: '三',
            thursday: '四',
            friday: '五',
            saturday: '六',
            sunday: '日'
        }
    }
};
var _default = {
    locale: 'zh-CN',
    dayjsLocale: 'zh-cn',
    Calendar: Calendar,
    DatePicker: {
        Calendar: Calendar,
        placeholder: {
            date: '请选择日期',
            week: '请选择周',
            month: '请选择月份',
            year: '请选择年份',
            quarter: '请选择季度'
        },
        placeholders: {
            date: [
                '开始日期',
                '结束日期'
            ],
            week: [
                '开始周',
                '结束周'
            ],
            month: [
                '开始月份',
                '结束月份'
            ],
            year: [
                '开始年份',
                '结束年份'
            ],
            quarter: [
                '开始季度',
                '结束季度'
            ]
        },
        selectTime: '选择时间',
        selectDate: '选择日期',
        today: '今天',
        now: '此刻',
        ok: '确定'
    },
    Drawer: {
        okText: '确定',
        cancelText: '取消'
    },
    Empty: {
        noData: '暂无数据'
    },
    Modal: {
        okText: '确定',
        cancelText: '取消'
    },
    Pagination: {
        goto: '前往',
        page: '页',
        countPerPage: '条/页',
        total: '共 {0} 条',
        prev: '上一页',
        next: '下一页',
        currentPage: '第 {0} 页',
        prevSomePages: '向前 {0} 页',
        nextSomePages: '向后 {0} 页',
        pageSize: '页码'
    },
    Popconfirm: {
        okText: '确定',
        cancelText: '取消'
    },
    Table: {
        okText: '确定',
        resetText: '重置',
        sortAscend: '点击升序',
        sortDescend: '点击降序',
        cancelSort: '取消排序'
    },
    TimePicker: {
        ok: '确定',
        placeholder: '请选择时间',
        placeholders: [
            '开始时间',
            '结束时间'
        ],
        now: '此刻'
    },
    Progress: {
        success: '完成',
        error: '失败'
    },
    Upload: {
        start: '开始',
        cancel: '取消',
        delete: '删除',
        reupload: '点击重试',
        upload: '点击上传',
        preview: '预览',
        drag: '点击或拖拽文件到此处上传',
        dragHover: '释放文件并开始上传',
        error: '上传失败'
    },
    Typography: {
        copy: '复制',
        copied: '已复制',
        edit: '编辑',
        fold: '折叠',
        unfold: '展开'
    },
    Transfer: {
        resetText: '重置'
    },
    ImagePreview: {
        fullScreen: '全屏',
        rotateRight: '向右旋转',
        rotateLeft: '向左旋转',
        zoomIn: '放大',
        zoomOut: '缩小',
        originalSize: '原始尺寸'
    },
    Form: {
        validateMessages: {
            required: '#{field} 是必填项',
            type: {
                string: '#{value} 不是合法的文本类型',
                number: '#{value} 不是合法的数字类型',
                boolean: '#{value} 不是合法的布尔类型',
                array: '#{value} 不是合法的数组类型',
                object: '#{value} 不是合法的对象类型',
                url: '#{value} 不是合法的 url 地址',
                email: '#{value} 不是合法的邮箱地址',
                ip: '#{value} 不是合法的 IP 地址'
            },
            number: {
                min: '`#{value}` 小于最小值 `#{min}`',
                max: '`#{value}` 大于最大值 `#{max}`',
                equal: '`#{value}` 不等于 `#{equal}`',
                range: '`#{value}` 不在 `#{min} ~ #{max}` 范围内',
                positive: '`#{value}` 不是正数',
                negative: '`#{value}` 不是负数'
            },
            array: {
                length: '`#{value}` 个数不等于 #{length}',
                minLength: '`#{value}` 个数最少为 #{minLength}',
                maxLength: '`#{value}` 个数最多为 #{maxLength}',
                includes: '#{value} 不包含 #{includes}',
                deepEqual: '#{value} 不等于 #{deepEqual}',
                empty: '`#{value}` 不是空数组'
            },
            string: {
                minLength: '字符数最少为 #{minLength}',
                maxLength: '字符数最多为 #{maxLength}',
                length: '`#{value}` 字符数不等于 #{length}',
                match: '`#{value}` 不符合模式 #{pattern}',
                uppercase: '`#{value}` 不是全大写',
                lowercase: '`#{value}` 不是全小写'
            },
            object: {
                deepEqual: '`#{value}` 不等于 #{deepEqual}',
                hasKeys: '`#{value}` 不包含字段 #{keys}',
                empty: '`#{value}` 不是对象'
            },
            boolean: {
                true: '期望是 `true`',
                false: '期望是 `false`'
            }
        }
    }
};
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCalendar/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCalendarComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-calendar")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M7 22h34M14 5v8m20-8v8M8 41h32a1 1 0 0 0 1-1V10a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v30a1 1 0 0 0 1 1Z"
    }));
}
var IconCalendar = _index.default.forwardRef(IconCalendarComponent);
IconCalendar.defaultProps = {
    isIcon: true
};
IconCalendar.displayName = 'IconCalendar';
var _default = IconCalendar;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCalendarClock/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCalendarClockComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-calendar-clock")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M7 22h34V10a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v30a1 1 0 0 0 1 1h18M34 5v8M14 5v8"
    }), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M36 44a9 9 0 1 0 0-18 9 9 0 0 0 0 18Zm1.5-9.75V29h-3v8.25H42v-3h-4.5Z",
        clipRule: "evenodd"
    }));
}
var IconCalendarClock = _index.default.forwardRef(IconCalendarClockComponent);
IconCalendarClock.defaultProps = {
    isIcon: true
};
IconCalendarClock.displayName = 'IconCalendarClock';
var _default = IconCalendarClock;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretDown/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCaretDownComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-caret-down")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M24.938 34.829a1.2 1.2 0 0 1-1.875 0L9.56 17.949c-.628-.785-.069-1.949.937-1.949h27.007c1.006 0 1.565 1.164.937 1.95L24.937 34.829Z"
    }));
}
var IconCaretDown = _index.default.forwardRef(IconCaretDownComponent);
IconCaretDown.defaultProps = {
    isIcon: true
};
IconCaretDown.displayName = 'IconCaretDown';
var _default = IconCaretDown;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretLeft/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCaretLeftComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-caret-left")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M13.171 24.937a1.2 1.2 0 0 1 0-1.874L30.051 9.56c.785-.629 1.949-.07 1.949.937v27.006c0 1.006-1.164 1.566-1.95.937L13.171 24.937Z"
    }));
}
var IconCaretLeft = _index.default.forwardRef(IconCaretLeftComponent);
IconCaretLeft.defaultProps = {
    isIcon: true
};
IconCaretLeft.displayName = 'IconCaretLeft';
var _default = IconCaretLeft;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretRight/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCaretRightComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-caret-right")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M34.829 23.063c.6.48.6 1.394 0 1.874L17.949 38.44c-.785.629-1.949.07-1.949-.937V10.497c0-1.007 1.164-1.566 1.95-.937l16.879 13.503Z"
    }));
}
var IconCaretRight = _index.default.forwardRef(IconCaretRightComponent);
IconCaretRight.defaultProps = {
    isIcon: true
};
IconCaretRight.displayName = 'IconCaretRight';
var _default = IconCaretRight;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCaretUp/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCaretUpComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-caret-up")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M23.063 13.171a1.2 1.2 0 0 1 1.875 0l13.503 16.88c.628.785.069 1.949-.937 1.949H10.497c-1.006 0-1.565-1.164-.937-1.95l13.503-16.879Z"
    }));
}
var IconCaretUp = _index.default.forwardRef(IconCaretUpComponent);
IconCaretUp.defaultProps = {
    isIcon: true
};
IconCaretUp.displayName = 'IconCaretUp';
var _default = IconCaretUp;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCheckCircleFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCheckCircleFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-check-circle-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm10.207-24.379a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0L22 26.172l-4.878-4.88a1 1 0 0 0-1.415 0l-1.414 1.415a1 1 0 0 0 0 1.414l7 7a1 1 0 0 0 1.414 0l11.5-11.5Z",
        clipRule: "evenodd"
    }));
}
var IconCheckCircleFill = _index.default.forwardRef(IconCheckCircleFillComponent);
IconCheckCircleFill.defaultProps = {
    isIcon: true
};
IconCheckCircleFill.displayName = 'IconCheckCircleFill';
var _default = IconCheckCircleFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconClose/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCloseComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-close")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M9.857 9.858 24 24m0 0 14.142 14.142M24 24 38.142 9.858M24 24 9.857 38.142"
    }));
}
var IconClose = _index.default.forwardRef(IconCloseComponent);
IconClose.defaultProps = {
    isIcon: true
};
IconClose.displayName = 'IconClose';
var _default = IconClose;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconCloseCircleFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconCloseCircleFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-close-circle-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm4.955-27.771-4.95 4.95-4.95-4.95a1 1 0 0 0-1.414 0l-1.414 1.414a1 1 0 0 0 0 1.414l4.95 4.95-4.95 4.95a1 1 0 0 0 0 1.414l1.414 1.414a1 1 0 0 0 1.414 0l4.95-4.95 4.95 4.95a1 1 0 0 0 1.414 0l1.414-1.414a1 1 0 0 0 0-1.414l-4.95-4.95 4.95-4.95a1 1 0 0 0 0-1.414l-1.414-1.414a1 1 0 0 0-1.414 0Z",
        clipRule: "evenodd"
    }));
}
var IconCloseCircleFill = _index.default.forwardRef(IconCloseCircleFillComponent);
IconCloseCircleFill.defaultProps = {
    isIcon: true
};
IconCloseCircleFill.displayName = 'IconCloseCircleFill';
var _default = IconCloseCircleFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconDoubleLeft/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconDoubleLeftComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-double-left")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M36.857 9.9 22.715 24.042l14.142 14.142M25.544 9.9 11.402 24.042l14.142 14.142"
    }));
}
var IconDoubleLeft = _index.default.forwardRef(IconDoubleLeftComponent);
IconDoubleLeft.defaultProps = {
    isIcon: true
};
IconDoubleLeft.displayName = 'IconDoubleLeft';
var _default = IconDoubleLeft;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconDoubleRight/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconDoubleRightComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-double-right")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "m11.143 38.1 14.142-14.142L11.143 9.816M22.456 38.1l14.142-14.142L22.456 9.816"
    }));
}
var IconDoubleRight = _index.default.forwardRef(IconDoubleRightComponent);
IconDoubleRight.defaultProps = {
    isIcon: true
};
IconDoubleRight.displayName = 'IconDoubleRight';
var _default = IconDoubleRight;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconDown/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconDownComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-down")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M39.6 17.443 24.043 33 8.487 17.443"
    }));
}
var IconDown = _index.default.forwardRef(IconDownComponent);
IconDown.defaultProps = {
    isIcon: true
};
IconDown.displayName = 'IconDown';
var _default = IconDown;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconDragDot/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconDragDotComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-drag-dot")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M40 17v2h-2v-2h2ZM25 17v2h-2v-2h2ZM10 17v2H8v-2h2ZM40 29v2h-2v-2h2ZM25 29v2h-2v-2h2ZM10 29v2H8v-2h2Z"
    }), _index.default.createElement("path", {
        d: "M40 17v2h-2v-2h2ZM25 17v2h-2v-2h2ZM10 17v2H8v-2h2ZM40 29v2h-2v-2h2ZM25 29v2h-2v-2h2ZM10 29v2H8v-2h2Z"
    }));
}
var IconDragDot = _index.default.forwardRef(IconDragDotComponent);
IconDragDot.defaultProps = {
    isIcon: true
};
IconDragDot.displayName = 'IconDragDot';
var _default = IconDragDot;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconDragDotVertical/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconDragDotVerticalComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-drag-dot-vertical")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M17 8h2v2h-2V8ZM17 23h2v2h-2v-2ZM17 38h2v2h-2v-2ZM29 8h2v2h-2V8ZM29 23h2v2h-2v-2ZM29 38h2v2h-2v-2Z"
    }), _index.default.createElement("path", {
        d: "M17 8h2v2h-2V8ZM17 23h2v2h-2v-2ZM17 38h2v2h-2v-2ZM29 8h2v2h-2V8ZM29 23h2v2h-2v-2ZM29 38h2v2h-2v-2Z"
    }));
}
var IconDragDotVertical = _index.default.forwardRef(IconDragDotVerticalComponent);
IconDragDotVertical.defaultProps = {
    isIcon: true
};
IconDragDotVertical.displayName = 'IconDragDotVertical';
var _default = IconDragDotVertical;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconEmpty/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconEmptyComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-empty")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M24 5v6m7 1 4-4m-18 4-4-4m28.5 22H28s-1 3-4 3-4-3-4-3H6.5M40 41H8a2 2 0 0 1-2-2v-8.46a2 2 0 0 1 .272-1.007l6.15-10.54A2 2 0 0 1 14.148 18H33.85a2 2 0 0 1 1.728.992l6.149 10.541A2 2 0 0 1 42 30.541V39a2 2 0 0 1-2 2Z"
    }));
}
var IconEmpty = _index.default.forwardRef(IconEmptyComponent);
IconEmpty.defaultProps = {
    isIcon: true
};
IconEmpty.displayName = 'IconEmpty';
var _default = IconEmpty;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconExclamationCircleFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconExclamationCircleFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-exclamation-circle-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm-2-11a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2Zm4-18a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1V15Z",
        clipRule: "evenodd"
    }));
}
var IconExclamationCircleFill = _index.default.forwardRef(IconExclamationCircleFillComponent);
IconExclamationCircleFill.defaultProps = {
    isIcon: true
};
IconExclamationCircleFill.displayName = 'IconExclamationCircleFill';
var _default = IconExclamationCircleFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconEye/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconEyeComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-eye")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M24 37c6.627 0 12.627-4.333 18-13-5.373-8.667-11.373-13-18-13-6.627 0-12.627 4.333-18 13 5.373 8.667 11.373 13 18 13Z",
        clipRule: "evenodd"
    }), _index.default.createElement("path", {
        d: "M29 24a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z"
    }));
}
var IconEye = _index.default.forwardRef(IconEyeComponent);
IconEye.defaultProps = {
    isIcon: true
};
IconEye.displayName = 'IconEye';
var _default = IconEye;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconEyeInvisible/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconEyeInvisibleComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-eye-invisible")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M14 14.5c-2.69 2-5.415 5.33-8 9.5 5.373 8.667 11.373 13 18 13 3.325 0 6.491-1.09 9.5-3.271M17.463 12.5C19 11 21.75 11 24 11c6.627 0 12.627 4.333 18 13-1.766 2.848-3.599 5.228-5.5 7.14"
    }), _index.default.createElement("path", {
        d: "M29 24a5 5 0 1 1-10 0 5 5 0 0 1 10 0ZM6.852 7.103l34.294 34.294"
    }));
}
var IconEyeInvisible = _index.default.forwardRef(IconEyeInvisibleComponent);
IconEyeInvisible.defaultProps = {
    isIcon: true
};
IconEyeInvisible.displayName = 'IconEyeInvisible';
var _default = IconEyeInvisible;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconFaceFrownFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconFaceFrownFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-face-frown-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.322-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25ZM31.68 32.88a1.91 1.91 0 0 1-2.694-.176 6.66 6.66 0 0 0-5.026-2.28c-1.918 0-3.701.81-4.962 2.207a1.91 1.91 0 0 1-2.834-2.559 10.476 10.476 0 0 1 7.796-3.465c3.063 0 5.916 1.321 7.896 3.58a1.909 1.909 0 0 1-.176 2.693Z",
        clipRule: "evenodd"
    }));
}
var IconFaceFrownFill = _index.default.forwardRef(IconFaceFrownFillComponent);
IconFaceFrownFill.defaultProps = {
    isIcon: true
};
IconFaceFrownFill.displayName = 'IconFaceFrownFill';
var _default = IconFaceFrownFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconFaceMehFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconFaceMehFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-face-meh-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.321-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25ZM15.999 30a2 2 0 0 1 2-2h12a2 2 0 1 1 0 4H18a2 2 0 0 1-2-2Z",
        clipRule: "evenodd"
    }));
}
var IconFaceMehFill = _index.default.forwardRef(IconFaceMehFillComponent);
IconFaceMehFill.defaultProps = {
    isIcon: true
};
IconFaceMehFill.displayName = 'IconFaceMehFill';
var _default = IconFaceMehFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconFaceSmileFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconFaceSmileFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-face-smile-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm7.321-26.873a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-14.646 0a2.625 2.625 0 1 1 0 5.25 2.625 2.625 0 0 1 0-5.25Zm-.355 9.953a1.91 1.91 0 0 1 2.694.177 6.66 6.66 0 0 0 5.026 2.279c1.918 0 3.7-.81 4.961-2.206a1.91 1.91 0 0 1 2.834 2.558 10.476 10.476 0 0 1-7.795 3.466 10.477 10.477 0 0 1-7.897-3.58 1.91 1.91 0 0 1 .177-2.694Z",
        clipRule: "evenodd"
    }));
}
var IconFaceSmileFill = _index.default.forwardRef(IconFaceSmileFillComponent);
IconFaceSmileFill.defaultProps = {
    isIcon: true
};
IconFaceSmileFill.displayName = 'IconFaceSmileFill';
var _default = IconFaceSmileFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconInfoCircleFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconInfoCircleFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-info-circle-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        fillRule: "evenodd",
        stroke: "none",
        d: "M24 44c11.046 0 20-8.954 20-20S35.046 4 24 4 4 12.954 4 24s8.954 20 20 20Zm2-30a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-2Zm0 17h1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-6a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h1v-8a1 1 0 0 1-1-1v-2a1 1 0 0 1 1-1h3a1 1 0 0 1 1 1v11Z",
        clipRule: "evenodd"
    }));
}
var IconInfoCircleFill = _index.default.forwardRef(IconInfoCircleFillComponent);
IconInfoCircleFill.defaultProps = {
    isIcon: true
};
IconInfoCircleFill.displayName = 'IconInfoCircleFill';
var _default = IconInfoCircleFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconLeft/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconLeftComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-left")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M32 8.4 16.444 23.956 32 39.513"
    }));
}
var IconLeft = _index.default.forwardRef(IconLeftComponent);
IconLeft.defaultProps = {
    isIcon: true
};
IconLeft.displayName = 'IconLeft';
var _default = IconLeft;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconLink/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconLinkComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-link")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "m14.1 25.414-4.95 4.95a6 6 0 0 0 8.486 8.485l8.485-8.485a6 6 0 0 0 0-8.485m7.779.707 4.95-4.95a6 6 0 1 0-8.486-8.485l-8.485 8.485a6 6 0 0 0 0 8.485"
    }));
}
var IconLink = _index.default.forwardRef(IconLinkComponent);
IconLink.defaultProps = {
    isIcon: true
};
IconLink.displayName = 'IconLink';
var _default = IconLink;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconLoading/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconLoadingComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-loading")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M42 24c0 9.941-8.059 18-18 18S6 33.941 6 24 14.059 6 24 6"
    }));
}
var IconLoading = _index.default.forwardRef(IconLoadingComponent);
IconLoading.defaultProps = {
    isIcon: true
};
IconLoading.displayName = 'IconLoading';
var _default = IconLoading;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconMenuFold/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconMenuFoldComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-menu-fold")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M42 11H6M42 24H22M42 37H6M13.66 26.912l-4.82-3.118 4.82-3.118v6.236Z"
    }));
}
var IconMenuFold = _index.default.forwardRef(IconMenuFoldComponent);
IconMenuFold.defaultProps = {
    isIcon: true
};
IconMenuFold.displayName = 'IconMenuFold';
var _default = IconMenuFold;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconMenuUnfold/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconMenuUnfoldComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-menu-unfold")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M6 11h36M22 24h20M6 37h36M8 20.882 12.819 24 8 27.118v-6.236Z"
    }));
}
var IconMenuUnfold = _index.default.forwardRef(IconMenuUnfoldComponent);
IconMenuUnfold.defaultProps = {
    isIcon: true
};
IconMenuUnfold.displayName = 'IconMenuUnfold';
var _default = IconMenuUnfold;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconMinus/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconMinusComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-minus")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M5 24h38"
    }));
}
var IconMinus = _index.default.forwardRef(IconMinusComponent);
IconMinus.defaultProps = {
    isIcon: true
};
IconMinus.displayName = 'IconMinus';
var _default = IconMinus;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconMore/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconMoreComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-more")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M38 25v-2h2v2h-2ZM23 25v-2h2v2h-2ZM8 25v-2h2v2H8Z"
    }), _index.default.createElement("path", {
        d: "M38 25v-2h2v2h-2ZM23 25v-2h2v2h-2ZM8 25v-2h2v2H8Z"
    }));
}
var IconMore = _index.default.forwardRef(IconMoreComponent);
IconMore.defaultProps = {
    isIcon: true
};
IconMore.displayName = 'IconMore';
var _default = IconMore;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconObliqueLine/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconObliqueLineComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-oblique-line")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M29.506 6.502 18.493 41.498"
    }));
}
var IconObliqueLine = _index.default.forwardRef(IconObliqueLineComponent);
IconObliqueLine.defaultProps = {
    isIcon: true
};
IconObliqueLine.displayName = 'IconObliqueLine';
var _default = IconObliqueLine;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconPlus/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconPlusComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-plus")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M5 24h38M24 5v38"
    }));
}
var IconPlus = _index.default.forwardRef(IconPlusComponent);
IconPlus.defaultProps = {
    isIcon: true
};
IconPlus.displayName = 'IconPlus';
var _default = IconPlus;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconRight/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconRightComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-right")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "m16 39.513 15.556-15.557L16 8.4"
    }));
}
var IconRight = _index.default.forwardRef(IconRightComponent);
IconRight.defaultProps = {
    isIcon: true
};
IconRight.displayName = 'IconRight';
var _default = IconRight;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconSearch/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconSearchComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-search")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M33.072 33.071c6.248-6.248 6.248-16.379 0-22.627-6.249-6.249-16.38-6.249-22.628 0-6.248 6.248-6.248 16.379 0 22.627 6.248 6.248 16.38 6.248 22.628 0Zm0 0 8.485 8.485"
    }));
}
var IconSearch = _index.default.forwardRef(IconSearchComponent);
IconSearch.defaultProps = {
    isIcon: true
};
IconSearch.displayName = 'IconSearch';
var _default = IconSearch;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconStarFill/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconStarFillComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-star-fill")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        fill: "currentColor",
        stroke: "none",
        d: "M22.683 5.415c.568-1.043 2.065-1.043 2.634 0l5.507 10.098a1.5 1.5 0 0 0 1.04.756l11.306 2.117c1.168.219 1.63 1.642.814 2.505l-7.902 8.359a1.5 1.5 0 0 0-.397 1.223l1.48 11.407c.153 1.177-1.058 2.057-2.131 1.548l-10.391-4.933a1.5 1.5 0 0 0-1.287 0l-10.39 4.933c-1.073.51-2.284-.37-2.131-1.548l1.48-11.407a1.5 1.5 0 0 0-.398-1.223L4.015 20.89c-.816-.863-.353-2.286.814-2.505l11.306-2.117a1.5 1.5 0 0 0 1.04-.756l5.508-10.098Z"
    }));
}
var IconStarFill = _index.default.forwardRef(IconStarFillComponent);
IconStarFill.defaultProps = {
    isIcon: true
};
IconStarFill.displayName = 'IconStarFill';
var _default = IconStarFill;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/IconUp/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _defineProperty = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/defineProperty.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _context = __webpack_require__("../../node_modules/@arco-design/web-react/icon/react-icon/context.js");
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            (0, _defineProperty.default)(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function IconUpComponent(iconProps, ref) {
    var _useContext = (0, _index.useContext)(_context.IconContext), _useContext$prefixCls = _useContext.prefixCls, prefixCls = _useContext$prefixCls === void 0 ? 'arco' : _useContext$prefixCls;
    var spin = iconProps.spin, className = iconProps.className;
    var props = _objectSpread(_objectSpread({
        "aria-hidden": true,
        focusable: false,
        ref: ref
    }, iconProps), {}, {
        className: "".concat(className ? className + ' ' : '').concat(prefixCls, "-icon ").concat(prefixCls, "-icon-up")
    });
    if (spin) props.className = "".concat(props.className, " ").concat(prefixCls, "-icon-loading");
    delete props.spin;
    delete props.isIcon;
    return _index.default.createElement("svg", (0, _extends.default)({
        fill: "none",
        stroke: "currentColor",
        strokeWidth: "4",
        viewBox: "0 0 48 48"
    }, props), _index.default.createElement("path", {
        d: "M39.6 30.557 24.043 15 8.487 30.557"
    }));
}
var IconUp = _index.default.forwardRef(IconUpComponent);
IconUp.defaultProps = {
    isIcon: true
};
IconUp.displayName = 'IconUp';
var _default = IconUp;
},
"../../node_modules/@arco-design/web-react/icon/react-icon/context.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "IconContext", {
    enumerable: true,
    get: function() {
        return IconContext;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
var IconContext = (0, _index.createContext)({
    prefixCls: 'arco'
});
},
"../../node_modules/b-tween/dist/b-tween.es.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var easeInBy = function(power) {
    return function(t) {
        return Math.pow(t, power);
    };
};
var easeOutBy = function(power) {
    return function(t) {
        return 1 - Math.abs(Math.pow(t - 1, power));
    };
};
var easeInOutBy = function(power) {
    return function(t) {
        return t < 0.5 ? easeInBy(power)(t * 2) / 2 : easeOutBy(power)(t * 2 - 1) / 2 + 0.5;
    };
};
var linear = function(t) {
    return t;
};
var quadIn = easeInBy(2);
var quadOut = easeOutBy(2);
var quadInOut = easeInOutBy(2);
var cubicIn = easeInBy(3);
var cubicOut = easeOutBy(3);
var cubicInOut = easeInOutBy(3);
var quartIn = easeInBy(4);
var quartOut = easeOutBy(4);
var quartInOut = easeInOutBy(4);
var quintIn = easeInBy(5);
var quintOut = easeOutBy(5);
var quintInOut = easeInOutBy(5);
var sineIn = function(t) {
    return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2);
};
var sineOut = function(t) {
    return Math.sin(Math.PI / 2 * t);
};
var sineInOut = function(t) {
    return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2;
};
var bounceOut = function(t) {
    var s = 7.5625;
    var p = 2.75;
    if (t < 1 / p) return s * t * t;
    if (t < 2 / p) {
        t -= 1.5 / p;
        return s * t * t + 0.75;
    }
    if (t < 2.5 / p) {
        t -= 2.25 / p;
        return s * t * t + 0.9375;
    }
    t -= 2.625 / p;
    return s * t * t + 0.984375;
};
var bounceIn = function(t) {
    return 1 - bounceOut(1 - t);
};
var bounceInOut = function(t) {
    return t < 0.5 ? bounceIn(t * 2) * 0.5 : bounceOut(t * 2 - 1) * 0.5 + 0.5;
};
var easing = Object.freeze({
    linear: linear,
    quadIn: quadIn,
    quadOut: quadOut,
    quadInOut: quadInOut,
    cubicIn: cubicIn,
    cubicOut: cubicOut,
    cubicInOut: cubicInOut,
    quartIn: quartIn,
    quartOut: quartOut,
    quartInOut: quartInOut,
    quintIn: quintIn,
    quintOut: quintOut,
    quintInOut: quintInOut,
    sineIn: sineIn,
    sineOut: sineOut,
    sineInOut: sineInOut,
    bounceOut: bounceOut,
    bounceIn: bounceIn,
    bounceInOut: bounceInOut
});
var Tween = function Tween(settings) {
    var from = settings.from;
    var to = settings.to;
    var duration = settings.duration;
    var delay = settings.delay;
    var easing = settings.easing;
    var onStart = settings.onStart;
    var onUpdate = settings.onUpdate;
    var onFinish = settings.onFinish;
    for(var key in from)if (to[key] === undefined) to[key] = from[key];
    for(var key$1 in to)if (from[key$1] === undefined) from[key$1] = to[key$1];
    this.from = from;
    this.to = to;
    this.duration = duration || 500;
    this.delay = delay || 0;
    this.easing = easing || 'linear';
    this.onStart = onStart;
    this.onUpdate = onUpdate || function() {};
    this.onFinish = onFinish;
    this.startTime = Date.now() + this.delay;
    this.started = false;
    this.finished = false;
    this.timer = null;
    this.keys = {};
};
Tween.prototype.update = function update() {
    this.time = Date.now();
    if (this.time < this.startTime) return;
    if (this.finished) return;
    if (this.elapsed === this.duration) {
        if (!this.finished) {
            this.finished = true;
            this.onFinish && this.onFinish(this.keys);
        }
        return;
    }
    this.elapsed = this.time - this.startTime;
    this.elapsed = this.elapsed > this.duration ? this.duration : this.elapsed;
    for(var key in this.to)this.keys[key] = this.from[key] + (this.to[key] - this.from[key]) * easing[this.easing](this.elapsed / this.duration);
    if (!this.started) {
        this.onStart && this.onStart(this.keys);
        this.started = true;
    }
    this.onUpdate(this.keys);
};
Tween.prototype.start = function start() {
    var this$1 = this;
    this.startTime = Date.now() + this.delay;
    var tick = function() {
        this$1.update();
        this$1.timer = requestAnimationFrame(tick);
        if (this$1.finished) {
            cancelAnimationFrame(this$1.timer);
            this$1.timer = null;
        }
    };
    tick();
};
Tween.prototype.stop = function stop() {
    cancelAnimationFrame(this.timer);
    this.timer = null;
};
var _default = Tween;
},
"../../node_modules/dayjs/dayjs.min.js": function (module, exports, __webpack_require__) {
!function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
}(this, function() {
    "use strict";
    var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = {
        name: "en",
        weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_")
    }, m = function(t, e, n) {
        var r = String(t);
        return !r || r.length >= e ? t : "" + Array(e + 1 - r.length).join(n) + t;
    }, g = {
        s: m,
        z: function(t) {
            var e = -t.utcOffset(), n = Math.abs(e), r = Math.floor(n / 60), i = n % 60;
            return (e <= 0 ? "+" : "-") + m(r, 2, "0") + ":" + m(i, 2, "0");
        },
        m: function t(e, n) {
            if (e.date() < n.date()) return -t(n, e);
            var r = 12 * (n.year() - e.year()) + (n.month() - e.month()), i = e.clone().add(r, f), s = n - i < 0, u = e.clone().add(r + (s ? -1 : 1), f);
            return +(-(r + (n - i) / (s ? i - u : u - i)) || 0);
        },
        a: function(t) {
            return t < 0 ? Math.ceil(t) || 0 : Math.floor(t);
        },
        p: function(t) {
            return ({
                M: f,
                y: c,
                w: o,
                d: a,
                D: d,
                h: u,
                m: s,
                s: i,
                ms: r,
                Q: h
            })[t] || String(t || "").toLowerCase().replace(/s$/, "");
        },
        u: function(t) {
            return void 0 === t;
        }
    }, v = "en", D = {};
    D[v] = M;
    var p = function(t) {
        return t instanceof _;
    }, S = function t(e, n, r) {
        var i;
        if (!e) return v;
        if ("string" == typeof e) {
            var s = e.toLowerCase();
            D[s] && (i = s), n && (D[s] = n, i = s);
            var u = e.split("-");
            if (!i && u.length > 1) return t(u[0]);
        } else {
            var a = e.name;
            D[a] = e, i = a;
        }
        return !r && i && (v = i), i || !r && v;
    }, w = function(t, e) {
        if (p(t)) return t.clone();
        var n = "object" == typeof e ? e : {};
        return n.date = t, n.args = arguments, new _(n);
    }, O = g;
    O.l = S, O.i = p, O.w = function(t, e) {
        return w(t, {
            locale: e.$L,
            utc: e.$u,
            x: e.$x,
            $offset: e.$offset
        });
    };
    var _ = function() {
        function M(t) {
            this.$L = S(t.locale, null, !0), this.parse(t);
        }
        var m = M.prototype;
        return m.parse = function(t) {
            this.$d = function(t) {
                var e = t.date, n = t.utc;
                if (null === e) return new Date(NaN);
                if (O.u(e)) return new Date;
                if (e instanceof Date) return new Date(e);
                if ("string" == typeof e && !/Z$/i.test(e)) {
                    var r = e.match(l);
                    if (r) {
                        var i = r[2] - 1 || 0, s = (r[7] || "0").substring(0, 3);
                        return n ? new Date(Date.UTC(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s)) : new Date(r[1], i, r[3] || 1, r[4] || 0, r[5] || 0, r[6] || 0, s);
                    }
                }
                return new Date(e);
            }(t), this.$x = t.x || {}, this.init();
        }, m.init = function() {
            var t = this.$d;
            this.$y = t.getFullYear(), this.$M = t.getMonth(), this.$D = t.getDate(), this.$W = t.getDay(), this.$H = t.getHours(), this.$m = t.getMinutes(), this.$s = t.getSeconds(), this.$ms = t.getMilliseconds();
        }, m.$utils = function() {
            return O;
        }, m.isValid = function() {
            return !(this.$d.toString() === $);
        }, m.isSame = function(t, e) {
            var n = w(t);
            return this.startOf(e) <= n && n <= this.endOf(e);
        }, m.isAfter = function(t, e) {
            return w(t) < this.startOf(e);
        }, m.isBefore = function(t, e) {
            return this.endOf(e) < w(t);
        }, m.$g = function(t, e, n) {
            return O.u(t) ? this[e] : this.set(n, t);
        }, m.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
        }, m.valueOf = function() {
            return this.$d.getTime();
        }, m.startOf = function(t, e) {
            var n = this, r = !!O.u(e) || e, h = O.p(t), $ = function(t, e) {
                var i = O.w(n.$u ? Date.UTC(n.$y, e, t) : new Date(n.$y, e, t), n);
                return r ? i : i.endOf(a);
            }, l = function(t, e) {
                return O.w(n.toDate()[t].apply(n.toDate("s"), (r ? [
                    0,
                    0,
                    0,
                    0
                ] : [
                    23,
                    59,
                    59,
                    999
                ]).slice(e)), n);
            }, y = this.$W, M = this.$M, m = this.$D, g = "set" + (this.$u ? "UTC" : "");
            switch(h){
                case c:
                    return r ? $(1, 0) : $(31, 11);
                case f:
                    return r ? $(1, M) : $(0, M + 1);
                case o:
                    var v = this.$locale().weekStart || 0, D = (y < v ? y + 7 : y) - v;
                    return $(r ? m - D : m + (6 - D), M);
                case a:
                case d:
                    return l(g + "Hours", 0);
                case u:
                    return l(g + "Minutes", 1);
                case s:
                    return l(g + "Seconds", 2);
                case i:
                    return l(g + "Milliseconds", 3);
                default:
                    return this.clone();
            }
        }, m.endOf = function(t) {
            return this.startOf(t, !1);
        }, m.$set = function(t, e) {
            var n, o = O.p(t), h = "set" + (this.$u ? "UTC" : ""), $ = (n = {}, n[a] = h + "Date", n[d] = h + "Date", n[f] = h + "Month", n[c] = h + "FullYear", n[u] = h + "Hours", n[s] = h + "Minutes", n[i] = h + "Seconds", n[r] = h + "Milliseconds", n)[o], l = o === a ? this.$D + (e - this.$W) : e;
            if (o === f || o === c) {
                var y = this.clone().set(d, 1);
                y.$d[$](l), y.init(), this.$d = y.set(d, Math.min(this.$D, y.daysInMonth())).$d;
            } else $ && this.$d[$](l);
            return this.init(), this;
        }, m.set = function(t, e) {
            return this.clone().$set(t, e);
        }, m.get = function(t) {
            return this[O.p(t)]();
        }, m.add = function(r, h) {
            var d, $ = this;
            r = Number(r);
            var l = O.p(h), y = function(t) {
                var e = w($);
                return O.w(e.date(e.date() + Math.round(t * r)), $);
            };
            if (l === f) return this.set(f, this.$M + r);
            if (l === c) return this.set(c, this.$y + r);
            if (l === a) return y(1);
            if (l === o) return y(7);
            var M = (d = {}, d[s] = e, d[u] = n, d[i] = t, d)[l] || 1, m = this.$d.getTime() + r * M;
            return O.w(m, this);
        }, m.subtract = function(t, e) {
            return this.add(-1 * t, e);
        }, m.format = function(t) {
            var e = this, n = this.$locale();
            if (!this.isValid()) return n.invalidDate || $;
            var r = t || "YYYY-MM-DDTHH:mm:ssZ", i = O.z(this), s = this.$H, u = this.$m, a = this.$M, o = n.weekdays, f = n.months, h = function(t, n, i, s) {
                return t && (t[n] || t(e, r)) || i[n].slice(0, s);
            }, c = function(t) {
                return O.s(s % 12 || 12, t, "0");
            }, d = n.meridiem || function(t, e, n) {
                var r = t < 12 ? "AM" : "PM";
                return n ? r.toLowerCase() : r;
            }, l = {
                YY: String(this.$y).slice(-2),
                YYYY: this.$y,
                M: a + 1,
                MM: O.s(a + 1, 2, "0"),
                MMM: h(n.monthsShort, a, f, 3),
                MMMM: h(f, a),
                D: this.$D,
                DD: O.s(this.$D, 2, "0"),
                d: String(this.$W),
                dd: h(n.weekdaysMin, this.$W, o, 2),
                ddd: h(n.weekdaysShort, this.$W, o, 3),
                dddd: o[this.$W],
                H: String(s),
                HH: O.s(s, 2, "0"),
                h: c(1),
                hh: c(2),
                a: d(s, u, !0),
                A: d(s, u, !1),
                m: String(u),
                mm: O.s(u, 2, "0"),
                s: String(this.$s),
                ss: O.s(this.$s, 2, "0"),
                SSS: O.s(this.$ms, 3, "0"),
                Z: i
            };
            return r.replace(y, function(t, e) {
                return e || l[t] || i.replace(":", "");
            });
        }, m.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m.diff = function(r, d, $) {
            var l, y = O.p(d), M = w(r), m = (M.utcOffset() - this.utcOffset()) * e, g = this - M, v = O.m(this, M);
            return v = (l = {}, l[c] = v / 12, l[f] = v, l[h] = v / 3, l[o] = (g - m) / 6048e5, l[a] = (g - m) / 864e5, l[u] = g / n, l[s] = g / e, l[i] = g / t, l)[y] || g, $ ? v : O.a(v);
        }, m.daysInMonth = function() {
            return this.endOf(f).$D;
        }, m.$locale = function() {
            return D[this.$L];
        }, m.locale = function(t, e) {
            if (!t) return this.$L;
            var n = this.clone(), r = S(t, e, !0);
            return r && (n.$L = r), n;
        }, m.clone = function() {
            return O.w(this.$d, this);
        }, m.toDate = function() {
            return new Date(this.valueOf());
        }, m.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
        }, m.toISOString = function() {
            return this.$d.toISOString();
        }, m.toString = function() {
            return this.$d.toUTCString();
        }, M;
    }(), T = _.prototype;
    return w.prototype = T, [
        [
            "$ms",
            r
        ],
        [
            "$s",
            i
        ],
        [
            "$m",
            s
        ],
        [
            "$H",
            u
        ],
        [
            "$W",
            a
        ],
        [
            "$M",
            f
        ],
        [
            "$y",
            c
        ],
        [
            "$D",
            d
        ]
    ].forEach(function(t) {
        T[t[1]] = function(e) {
            return this.$g(e, t[0], t[1]);
        };
    }), w.extend = function(t, e) {
        return t.$i || (t(e, _, w), t.$i = !0), w;
    }, w.locale = S, w.isDayjs = p, w.unix = function(t) {
        return w(1e3 * t);
    }, w.en = D[v], w.Ls = D, w.p = {}, w;
});
},
"../../node_modules/dayjs/locale/zh-cn.js": function (module, exports, __webpack_require__) {
!function(e, _) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = _(__webpack_require__("../../node_modules/dayjs/dayjs.min.js")) : "function" == typeof define && define.amd ? define([
        "dayjs"
    ], _) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_locale_zh_cn = _(e.dayjs);
}(this, function(e) {
    "use strict";
    function _(e) {
        return e && "object" == typeof e && "default" in e ? e : {
            default: e
        };
    }
    var t = _(e), d = {
        name: "zh-cn",
        weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin: "日_一_二_三_四_五_六".split("_"),
        months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        ordinal: function(e, _) {
            return "W" === _ ? e + "周" : e + "日";
        },
        weekStart: 1,
        yearStart: 4,
        formats: {
            LT: "HH:mm",
            LTS: "HH:mm:ss",
            L: "YYYY/MM/DD",
            LL: "YYYY年M月D日",
            LLL: "YYYY年M月D日Ah点mm分",
            LLLL: "YYYY年M月D日ddddAh点mm分",
            l: "YYYY/M/D",
            ll: "YYYY年M月D日",
            lll: "YYYY年M月D日 HH:mm",
            llll: "YYYY年M月D日dddd HH:mm"
        },
        relativeTime: {
            future: "%s内",
            past: "%s前",
            s: "几秒",
            m: "1 分钟",
            mm: "%d 分钟",
            h: "1 小时",
            hh: "%d 小时",
            d: "1 天",
            dd: "%d 天",
            M: "1 个月",
            MM: "%d 个月",
            y: "1 年",
            yy: "%d 年"
        },
        meridiem: function(e, _) {
            var t = 100 * e + _;
            return t < 600 ? "凌晨" : t < 900 ? "早上" : t < 1100 ? "上午" : t < 1300 ? "中午" : t < 1800 ? "下午" : "晚上";
        }
    };
    return t.default.locale(d, null, !0), d;
});
},
"../../node_modules/dayjs/plugin/advancedFormat.js": function (module, exports, __webpack_require__) {
!function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_advancedFormat = t();
}(this, function() {
    "use strict";
    return function(e, t, r) {
        var n = t.prototype, s = n.format;
        r.en.ordinal = function(e) {
            var t = [
                "th",
                "st",
                "nd",
                "rd"
            ], r = e % 100;
            return "[" + e + (t[(r - 20) % 10] || t[r] || t[0]) + "]";
        }, n.format = function(e) {
            var t = this, r = this.$locale();
            if (!this.isValid()) return s.bind(this)(e);
            var n = this.$utils(), a = (e || "YYYY-MM-DDTHH:mm:ssZ").replace(/\[([^\]]+)]|Q|wo|ww|w|WW|W|zzz|z|gggg|GGGG|Do|X|x|k{1,2}|S/g, function(e) {
                switch(e){
                    case "Q":
                        return Math.ceil((t.$M + 1) / 3);
                    case "Do":
                        return r.ordinal(t.$D);
                    case "gggg":
                        return t.weekYear();
                    case "GGGG":
                        return t.isoWeekYear();
                    case "wo":
                        return r.ordinal(t.week(), "W");
                    case "w":
                    case "ww":
                        return n.s(t.week(), "w" === e ? 1 : 2, "0");
                    case "W":
                    case "WW":
                        return n.s(t.isoWeek(), "W" === e ? 1 : 2, "0");
                    case "k":
                    case "kk":
                        return n.s(String(0 === t.$H ? 24 : t.$H), "k" === e ? 1 : 2, "0");
                    case "X":
                        return Math.floor(t.$d.getTime() / 1e3);
                    case "x":
                        return t.$d.getTime();
                    case "z":
                        return "[" + t.offsetName() + "]";
                    case "zzz":
                        return "[" + t.offsetName("long") + "]";
                    default:
                        return e;
                }
            });
            return s.bind(this)(a);
        };
    };
});
},
"../../node_modules/dayjs/plugin/customParseFormat.js": function (module, exports, __webpack_require__) {
!function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_customParseFormat = t();
}(this, function() {
    "use strict";
    var e = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
    }, t = /(\[[^[]*\])|([-_:/.,()\s]+)|(A|a|YYYY|YY?|MM?M?M?|Do|DD?|hh?|HH?|mm?|ss?|S{1,3}|z|ZZ?)/g, n = /\d\d/, r = /\d\d?/, i = /\d*[^-_:/,()\s\d]+/, o = {}, s = function(e) {
        return (e = +e) + (e > 68 ? 1900 : 2e3);
    };
    var a = function(e) {
        return function(t) {
            this[e] = +t;
        };
    }, f = [
        /[+-]\d\d:?(\d\d)?|Z/,
        function(e) {
            (this.zone || (this.zone = {})).offset = function(e) {
                if (!e) return 0;
                if ("Z" === e) return 0;
                var t = e.match(/([+-]|\d\d)/g), n = 60 * t[1] + (+t[2] || 0);
                return 0 === n ? 0 : "+" === t[0] ? -n : n;
            }(e);
        }
    ], h = function(e) {
        var t = o[e];
        return t && (t.indexOf ? t : t.s.concat(t.f));
    }, u = function(e, t) {
        var n, r = o.meridiem;
        if (r) {
            for(var i = 1; i <= 24; i += 1)if (e.indexOf(r(i, 0, t)) > -1) {
                n = i > 12;
                break;
            }
        } else n = e === (t ? "pm" : "PM");
        return n;
    }, d = {
        A: [
            i,
            function(e) {
                this.afternoon = u(e, !1);
            }
        ],
        a: [
            i,
            function(e) {
                this.afternoon = u(e, !0);
            }
        ],
        S: [
            /\d/,
            function(e) {
                this.milliseconds = 100 * +e;
            }
        ],
        SS: [
            n,
            function(e) {
                this.milliseconds = 10 * +e;
            }
        ],
        SSS: [
            /\d{3}/,
            function(e) {
                this.milliseconds = +e;
            }
        ],
        s: [
            r,
            a("seconds")
        ],
        ss: [
            r,
            a("seconds")
        ],
        m: [
            r,
            a("minutes")
        ],
        mm: [
            r,
            a("minutes")
        ],
        H: [
            r,
            a("hours")
        ],
        h: [
            r,
            a("hours")
        ],
        HH: [
            r,
            a("hours")
        ],
        hh: [
            r,
            a("hours")
        ],
        D: [
            r,
            a("day")
        ],
        DD: [
            n,
            a("day")
        ],
        Do: [
            i,
            function(e) {
                var t = o.ordinal, n = e.match(/\d+/);
                if (this.day = n[0], t) for(var r = 1; r <= 31; r += 1)t(r).replace(/\[|\]/g, "") === e && (this.day = r);
            }
        ],
        M: [
            r,
            a("month")
        ],
        MM: [
            n,
            a("month")
        ],
        MMM: [
            i,
            function(e) {
                var t = h("months"), n = (h("monthsShort") || t.map(function(e) {
                    return e.slice(0, 3);
                })).indexOf(e) + 1;
                if (n < 1) throw new Error;
                this.month = n % 12 || n;
            }
        ],
        MMMM: [
            i,
            function(e) {
                var t = h("months").indexOf(e) + 1;
                if (t < 1) throw new Error;
                this.month = t % 12 || t;
            }
        ],
        Y: [
            /[+-]?\d+/,
            a("year")
        ],
        YY: [
            n,
            function(e) {
                this.year = s(e);
            }
        ],
        YYYY: [
            /\d{4}/,
            a("year")
        ],
        Z: f,
        ZZ: f
    };
    function c(n) {
        var r, i;
        r = n, i = o && o.formats;
        for(var s = (n = r.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function(t, n, r) {
            var o = r && r.toUpperCase();
            return n || i[r] || e[r] || i[o].replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function(e, t, n) {
                return t || n.slice(1);
            });
        })).match(t), a = s.length, f = 0; f < a; f += 1){
            var h = s[f], u = d[h], c = u && u[0], l = u && u[1];
            s[f] = l ? {
                regex: c,
                parser: l
            } : h.replace(/^\[|\]$/g, "");
        }
        return function(e) {
            for(var t = {}, n = 0, r = 0; n < a; n += 1){
                var i = s[n];
                if ("string" == typeof i) r += i.length;
                else {
                    var o = i.regex, f = i.parser, h = e.slice(r), u = o.exec(h)[0];
                    f.call(t, u), e = e.replace(u, "");
                }
            }
            return function(e) {
                var t = e.afternoon;
                if (void 0 !== t) {
                    var n = e.hours;
                    t ? n < 12 && (e.hours += 12) : 12 === n && (e.hours = 0), delete e.afternoon;
                }
            }(t), t;
        };
    }
    return function(e, t, n) {
        n.p.customParseFormat = !0, e && e.parseTwoDigitYear && (s = e.parseTwoDigitYear);
        var r = t.prototype, i = r.parse;
        r.parse = function(e) {
            var t = e.date, r = e.utc, s = e.args;
            this.$u = r;
            var a = s[1];
            if ("string" == typeof a) {
                var f = !0 === s[2], h = !0 === s[3], u = f || h, d = s[2];
                h && (d = s[2]), o = this.$locale(), !f && d && (o = n.Ls[d]), this.$d = function(e, t, n) {
                    try {
                        if ([
                            "x",
                            "X"
                        ].indexOf(t) > -1) return new Date(("X" === t ? 1e3 : 1) * e);
                        var r = c(t)(e), i = r.year, o = r.month, s = r.day, a = r.hours, f = r.minutes, h = r.seconds, u = r.milliseconds, d = r.zone, l = new Date, m = s || (i || o ? 1 : l.getDate()), M = i || l.getFullYear(), Y = 0;
                        i && !o || (Y = o > 0 ? o - 1 : l.getMonth());
                        var p = a || 0, v = f || 0, D = h || 0, g = u || 0;
                        return d ? new Date(Date.UTC(M, Y, m, p, v, D, g + 60 * d.offset * 1e3)) : n ? new Date(Date.UTC(M, Y, m, p, v, D, g)) : new Date(M, Y, m, p, v, D, g);
                    } catch (e1) {
                        return new Date("");
                    }
                }(t, a, r), this.init(), d && !0 !== d && (this.$L = this.locale(d).$L), u && t != this.format(a) && (this.$d = new Date("")), o = {};
            } else if (a instanceof Array) for(var l = a.length, m = 1; m <= l; m += 1){
                s[1] = a[m - 1];
                var M = n.apply(this, s);
                if (M.isValid()) {
                    this.$d = M.$d, this.$L = M.$L, this.init();
                    break;
                }
                m === l && (this.$d = new Date(""));
            }
            else i.call(this, e);
        };
    };
});
},
"../../node_modules/dayjs/plugin/isBetween.js": function (module, exports, __webpack_require__) {
!function(e, i) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = i() : "function" == typeof define && define.amd ? define(i) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isBetween = i();
}(this, function() {
    "use strict";
    return function(e, i, t) {
        i.prototype.isBetween = function(e, i, s, f) {
            var n = t(e), o = t(i), r = "(" === (f = f || "()")[0], u = ")" === f[1];
            return (r ? this.isAfter(n, s) : !this.isBefore(n, s)) && (u ? this.isBefore(o, s) : !this.isAfter(o, s)) || (r ? this.isBefore(n, s) : !this.isAfter(n, s)) && (u ? this.isAfter(o, s) : !this.isBefore(o, s));
        };
    };
});
},
"../../node_modules/dayjs/plugin/quarterOfYear.js": function (module, exports, __webpack_require__) {
!function(t, n) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs_plugin_quarterOfYear = n();
}(this, function() {
    "use strict";
    var t = "month", n = "quarter";
    return function(e, i) {
        var r = i.prototype;
        r.quarter = function(t) {
            return this.$utils().u(t) ? Math.ceil((this.month() + 1) / 3) : this.month(this.month() % 3 + 3 * (t - 1));
        };
        var s = r.add;
        r.add = function(e, i) {
            return e = Number(e), this.$utils().p(i) === n ? this.add(3 * e, t) : s.bind(this)(e, i);
        };
        var u = r.startOf;
        r.startOf = function(e, i) {
            var r = this.$utils(), s = !!r.u(i) || i;
            if (r.p(e) === n) {
                var o = this.quarter() - 1;
                return s ? this.month(3 * o).startOf(t).startOf("day") : this.month(3 * o + 2).endOf(t).endOf("day");
            }
            return u.bind(this)(e, i);
        };
    };
});
},
"../../node_modules/dayjs/plugin/weekOfYear.js": function (module, exports, __webpack_require__) {
!function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_weekOfYear = t();
}(this, function() {
    "use strict";
    var e = "week", t = "year";
    return function(i, n, r) {
        var f = n.prototype;
        f.week = function(i) {
            if (void 0 === i && (i = null), null !== i) return this.add(7 * (i - this.week()), "day");
            var n = this.$locale().yearStart || 1;
            if (11 === this.month() && this.date() > 25) {
                var f = r(this).startOf(t).add(1, t).date(n), s = r(this).endOf(e);
                if (f.isBefore(s)) return 1;
            }
            var a = r(this).startOf(t).date(n).startOf(e).subtract(1, "millisecond"), o = this.diff(a, e, !0);
            return o < 0 ? r(this).startOf("week").week() : Math.ceil(o);
        }, f.weeks = function(e) {
            return void 0 === e && (e = null), this.week(e);
        };
    };
});
},
"../../node_modules/dayjs/plugin/weekYear.js": function (module, exports, __webpack_require__) {
!function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_weekYear = t();
}(this, function() {
    "use strict";
    return function(e, t) {
        t.prototype.weekYear = function() {
            var e = this.month(), t = this.week(), n = this.year();
            return 1 === t && 11 === e ? n + 1 : 0 === e && t >= 52 ? n - 1 : n;
        };
    };
});
},
"../../node_modules/dom-helpers/esm/addClass.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return addClass;
    }
});
var _hasClass = __webpack_require__.ir(__webpack_require__("../../node_modules/dom-helpers/esm/hasClass.js"));
function addClass(element, className) {
    if (element.classList) element.classList.add(className);
    else if (!(0, _hasClass.default)(element, className)) {
        if (typeof element.className === 'string') element.className = element.className + " " + className;
        else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
    }
}
},
"../../node_modules/dom-helpers/esm/hasClass.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return hasClass;
    }
});
function hasClass(element, className) {
    if (element.classList) return !!className && element.classList.contains(className);
    return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}
},
"../../node_modules/dom-helpers/esm/removeClass.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return removeClass;
    }
});
function replaceClassName(origClass, classToRemove) {
    return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
}
function removeClass(element, className) {
    if (element.classList) element.classList.remove(className);
    else if (typeof element.className === 'string') element.className = replaceClassName(element.className, className);
    else element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
}
},
"../../node_modules/lodash/_Hash.js": function (module, exports, __webpack_require__) {
var hashClear = __webpack_require__("../../node_modules/lodash/_hashClear.js"), hashDelete = __webpack_require__("../../node_modules/lodash/_hashDelete.js"), hashGet = __webpack_require__("../../node_modules/lodash/_hashGet.js"), hashHas = __webpack_require__("../../node_modules/lodash/_hashHas.js"), hashSet = __webpack_require__("../../node_modules/lodash/_hashSet.js");
function Hash(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;
},
"../../node_modules/lodash/_ListCache.js": function (module, exports, __webpack_require__) {
var listCacheClear = __webpack_require__("../../node_modules/lodash/_listCacheClear.js"), listCacheDelete = __webpack_require__("../../node_modules/lodash/_listCacheDelete.js"), listCacheGet = __webpack_require__("../../node_modules/lodash/_listCacheGet.js"), listCacheHas = __webpack_require__("../../node_modules/lodash/_listCacheHas.js"), listCacheSet = __webpack_require__("../../node_modules/lodash/_listCacheSet.js");
function ListCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;
},
"../../node_modules/lodash/_Map.js": function (module, exports, __webpack_require__) {
var getNative = __webpack_require__("../../node_modules/lodash/_getNative.js"), root = __webpack_require__("../../node_modules/lodash/_root.js");
var Map = getNative(root, 'Map');
module.exports = Map;
},
"../../node_modules/lodash/_MapCache.js": function (module, exports, __webpack_require__) {
var mapCacheClear = __webpack_require__("../../node_modules/lodash/_mapCacheClear.js"), mapCacheDelete = __webpack_require__("../../node_modules/lodash/_mapCacheDelete.js"), mapCacheGet = __webpack_require__("../../node_modules/lodash/_mapCacheGet.js"), mapCacheHas = __webpack_require__("../../node_modules/lodash/_mapCacheHas.js"), mapCacheSet = __webpack_require__("../../node_modules/lodash/_mapCacheSet.js");
function MapCache(entries) {
    var index = -1, length = entries == null ? 0 : entries.length;
    this.clear();
    while(++index < length){
        var entry = entries[index];
        this.set(entry[0], entry[1]);
    }
}
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;
},
"../../node_modules/lodash/_Stack.js": function (module, exports, __webpack_require__) {
var ListCache = __webpack_require__("../../node_modules/lodash/_ListCache.js"), stackClear = __webpack_require__("../../node_modules/lodash/_stackClear.js"), stackDelete = __webpack_require__("../../node_modules/lodash/_stackDelete.js"), stackGet = __webpack_require__("../../node_modules/lodash/_stackGet.js"), stackHas = __webpack_require__("../../node_modules/lodash/_stackHas.js"), stackSet = __webpack_require__("../../node_modules/lodash/_stackSet.js");
function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
}
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;
},
"../../node_modules/lodash/_Symbol.js": function (module, exports, __webpack_require__) {
var root = __webpack_require__("../../node_modules/lodash/_root.js");
var Symbol = root.Symbol;
module.exports = Symbol;
},
"../../node_modules/lodash/_Uint8Array.js": function (module, exports, __webpack_require__) {
var root = __webpack_require__("../../node_modules/lodash/_root.js");
var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;
},
"../../node_modules/lodash/_apply.js": function (module, exports, __webpack_require__) {
function apply(func, thisArg, args) {
    switch(args.length){
        case 0:
            return func.call(thisArg);
        case 1:
            return func.call(thisArg, args[0]);
        case 2:
            return func.call(thisArg, args[0], args[1]);
        case 3:
            return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
}
module.exports = apply;
},
"../../node_modules/lodash/_arrayLikeKeys.js": function (module, exports, __webpack_require__) {
var baseTimes = __webpack_require__("../../node_modules/lodash/_baseTimes.js"), isArguments = __webpack_require__("../../node_modules/lodash/isArguments.js"), isArray = __webpack_require__("../../node_modules/lodash/isArray.js"), isBuffer = __webpack_require__("../../node_modules/lodash/isBuffer.js"), isIndex = __webpack_require__("../../node_modules/lodash/_isIndex.js"), isTypedArray = __webpack_require__("../../node_modules/lodash/isTypedArray.js");
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;
},
"../../node_modules/lodash/_assignMergeValue.js": function (module, exports, __webpack_require__) {
var baseAssignValue = __webpack_require__("../../node_modules/lodash/_baseAssignValue.js"), eq = __webpack_require__("../../node_modules/lodash/eq.js");
function assignMergeValue(object, key, value) {
    if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignMergeValue;
},
"../../node_modules/lodash/_assignValue.js": function (module, exports, __webpack_require__) {
var baseAssignValue = __webpack_require__("../../node_modules/lodash/_baseAssignValue.js"), eq = __webpack_require__("../../node_modules/lodash/eq.js");
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
}
module.exports = assignValue;
},
"../../node_modules/lodash/_assocIndexOf.js": function (module, exports, __webpack_require__) {
var eq = __webpack_require__("../../node_modules/lodash/eq.js");
function assocIndexOf(array, key) {
    var length = array.length;
    while(length--){
        if (eq(array[length][0], key)) return length;
    }
    return -1;
}
module.exports = assocIndexOf;
},
"../../node_modules/lodash/_baseAssignValue.js": function (module, exports, __webpack_require__) {
var defineProperty = __webpack_require__("../../node_modules/lodash/_defineProperty.js");
function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
    });
    else object[key] = value;
}
module.exports = baseAssignValue;
},
"../../node_modules/lodash/_baseCreate.js": function (module, exports, __webpack_require__) {
var isObject = __webpack_require__("../../node_modules/lodash/isObject.js");
var objectCreate = Object.create;
var baseCreate = function() {
    function object() {}
    return function(proto) {
        if (!isObject(proto)) return {};
        if (objectCreate) return objectCreate(proto);
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
    };
}();
module.exports = baseCreate;
},
"../../node_modules/lodash/_baseFor.js": function (module, exports, __webpack_require__) {
var createBaseFor = __webpack_require__("../../node_modules/lodash/_createBaseFor.js");
var baseFor = createBaseFor();
module.exports = baseFor;
},
"../../node_modules/lodash/_baseGetTag.js": function (module, exports, __webpack_require__) {
var Symbol = __webpack_require__("../../node_modules/lodash/_Symbol.js"), getRawTag = __webpack_require__("../../node_modules/lodash/_getRawTag.js"), objectToString = __webpack_require__("../../node_modules/lodash/_objectToString.js");
var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;
},
"../../node_modules/lodash/_baseIsArguments.js": function (module, exports, __webpack_require__) {
var baseGetTag = __webpack_require__("../../node_modules/lodash/_baseGetTag.js"), isObjectLike = __webpack_require__("../../node_modules/lodash/isObjectLike.js");
var argsTag = '[object Arguments]';
function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;
},
"../../node_modules/lodash/_baseIsNative.js": function (module, exports, __webpack_require__) {
var isFunction = __webpack_require__("../../node_modules/lodash/isFunction.js"), isMasked = __webpack_require__("../../node_modules/lodash/_isMasked.js"), isObject = __webpack_require__("../../node_modules/lodash/isObject.js"), toSource = __webpack_require__("../../node_modules/lodash/_toSource.js");
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reIsHostCtor = /^\[object .+?Constructor\]$/;
var funcProto = Function.prototype, objectProto = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty = objectProto.hasOwnProperty;
var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) return false;
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
}
module.exports = baseIsNative;
},
"../../node_modules/lodash/_baseIsTypedArray.js": function (module, exports, __webpack_require__) {
var baseGetTag = __webpack_require__("../../node_modules/lodash/_baseGetTag.js"), isLength = __webpack_require__("../../node_modules/lodash/isLength.js"), isObjectLike = __webpack_require__("../../node_modules/lodash/isObjectLike.js");
var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;
},
"../../node_modules/lodash/_baseKeysIn.js": function (module, exports, __webpack_require__) {
var isObject = __webpack_require__("../../node_modules/lodash/isObject.js"), isPrototype = __webpack_require__("../../node_modules/lodash/_isPrototype.js"), nativeKeysIn = __webpack_require__("../../node_modules/lodash/_nativeKeysIn.js");
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function baseKeysIn(object) {
    if (!isObject(object)) return nativeKeysIn(object);
    var isProto = isPrototype(object), result = [];
    for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
    return result;
}
module.exports = baseKeysIn;
},
"../../node_modules/lodash/_baseMerge.js": function (module, exports, __webpack_require__) {
var Stack = __webpack_require__("../../node_modules/lodash/_Stack.js"), assignMergeValue = __webpack_require__("../../node_modules/lodash/_assignMergeValue.js"), baseFor = __webpack_require__("../../node_modules/lodash/_baseFor.js"), baseMergeDeep = __webpack_require__("../../node_modules/lodash/_baseMergeDeep.js"), isObject = __webpack_require__("../../node_modules/lodash/isObject.js"), keysIn = __webpack_require__("../../node_modules/lodash/keysIn.js"), safeGet = __webpack_require__("../../node_modules/lodash/_safeGet.js");
function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) return;
    baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        else {
            var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
            if (newValue === undefined) newValue = srcValue;
            assignMergeValue(object, key, newValue);
        }
    }, keysIn);
}
module.exports = baseMerge;
},
"../../node_modules/lodash/_baseMergeDeep.js": function (module, exports, __webpack_require__) {
var assignMergeValue = __webpack_require__("../../node_modules/lodash/_assignMergeValue.js"), cloneBuffer = __webpack_require__("../../node_modules/lodash/_cloneBuffer.js"), cloneTypedArray = __webpack_require__("../../node_modules/lodash/_cloneTypedArray.js"), copyArray = __webpack_require__("../../node_modules/lodash/_copyArray.js"), initCloneObject = __webpack_require__("../../node_modules/lodash/_initCloneObject.js"), isArguments = __webpack_require__("../../node_modules/lodash/isArguments.js"), isArray = __webpack_require__("../../node_modules/lodash/isArray.js"), isArrayLikeObject = __webpack_require__("../../node_modules/lodash/isArrayLikeObject.js"), isBuffer = __webpack_require__("../../node_modules/lodash/isBuffer.js"), isFunction = __webpack_require__("../../node_modules/lodash/isFunction.js"), isObject = __webpack_require__("../../node_modules/lodash/isObject.js"), isPlainObject = __webpack_require__("../../node_modules/lodash/isPlainObject.js"), isTypedArray = __webpack_require__("../../node_modules/lodash/isTypedArray.js"), safeGet = __webpack_require__("../../node_modules/lodash/_safeGet.js"), toPlainObject = __webpack_require__("../../node_modules/lodash/toPlainObject.js");
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
    if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
    }
    var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
    var isCommon = newValue === undefined;
    if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) newValue = objValue;
            else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
            else if (isBuff) {
                isCommon = false;
                newValue = cloneBuffer(srcValue, true);
            } else if (isTyped) {
                isCommon = false;
                newValue = cloneTypedArray(srcValue, true);
            } else newValue = [];
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) newValue = toPlainObject(objValue);
            else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
        } else isCommon = false;
    }
    if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
}
module.exports = baseMergeDeep;
},
"../../node_modules/lodash/_baseRest.js": function (module, exports, __webpack_require__) {
var identity = __webpack_require__("../../node_modules/lodash/identity.js"), overRest = __webpack_require__("../../node_modules/lodash/_overRest.js"), setToString = __webpack_require__("../../node_modules/lodash/_setToString.js");
function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
}
module.exports = baseRest;
},
"../../node_modules/lodash/_baseSetToString.js": function (module, exports, __webpack_require__) {
var constant = __webpack_require__("../../node_modules/lodash/constant.js"), defineProperty = __webpack_require__("../../node_modules/lodash/_defineProperty.js"), identity = __webpack_require__("../../node_modules/lodash/identity.js");
var baseSetToString = !defineProperty ? identity : function(func, string) {
    return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
    });
};
module.exports = baseSetToString;
},
"../../node_modules/lodash/_baseTimes.js": function (module, exports, __webpack_require__) {
function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;
},
"../../node_modules/lodash/_baseTrim.js": function (module, exports, __webpack_require__) {
var trimmedEndIndex = __webpack_require__("../../node_modules/lodash/_trimmedEndIndex.js");
var reTrimStart = /^\s+/;
function baseTrim(string) {
    return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
}
module.exports = baseTrim;
},
"../../node_modules/lodash/_baseUnary.js": function (module, exports, __webpack_require__) {
function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;
},
"../../node_modules/lodash/_cloneArrayBuffer.js": function (module, exports, __webpack_require__) {
var Uint8Array = __webpack_require__("../../node_modules/lodash/_Uint8Array.js");
function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
}
module.exports = cloneArrayBuffer;
},
"../../node_modules/lodash/_cloneBuffer.js": function (module, exports, __webpack_require__) {
var root = __webpack_require__("../../node_modules/lodash/_root.js");
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer = moduleExports ? root.Buffer : undefined, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
function cloneBuffer(buffer, isDeep) {
    if (isDeep) return buffer.slice();
    var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
    buffer.copy(result);
    return result;
}
module.exports = cloneBuffer;
},
"../../node_modules/lodash/_cloneTypedArray.js": function (module, exports, __webpack_require__) {
var cloneArrayBuffer = __webpack_require__("../../node_modules/lodash/_cloneArrayBuffer.js");
function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}
module.exports = cloneTypedArray;
},
"../../node_modules/lodash/_copyArray.js": function (module, exports, __webpack_require__) {
function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while(++index < length)array[index] = source[index];
    return array;
}
module.exports = copyArray;
},
"../../node_modules/lodash/_copyObject.js": function (module, exports, __webpack_require__) {
var assignValue = __webpack_require__("../../node_modules/lodash/_assignValue.js"), baseAssignValue = __webpack_require__("../../node_modules/lodash/_baseAssignValue.js");
function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});
    var index = -1, length = props.length;
    while(++index < length){
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
        if (newValue === undefined) newValue = source[key];
        if (isNew) baseAssignValue(object, key, newValue);
        else assignValue(object, key, newValue);
    }
    return object;
}
module.exports = copyObject;
},
"../../node_modules/lodash/_coreJsData.js": function (module, exports, __webpack_require__) {
var root = __webpack_require__("../../node_modules/lodash/_root.js");
var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;
},
"../../node_modules/lodash/_createAssigner.js": function (module, exports, __webpack_require__) {
var baseRest = __webpack_require__("../../node_modules/lodash/_baseRest.js"), isIterateeCall = __webpack_require__("../../node_modules/lodash/_isIterateeCall.js");
function createAssigner(assigner) {
    return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
        customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
        }
        object = Object(object);
        while(++index < length){
            var source = sources[index];
            if (source) assigner(object, source, index, customizer);
        }
        return object;
    });
}
module.exports = createAssigner;
},
"../../node_modules/lodash/_createBaseFor.js": function (module, exports, __webpack_require__) {
function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while(length--){
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) break;
        }
        return object;
    };
}
module.exports = createBaseFor;
},
"../../node_modules/lodash/_defineProperty.js": function (module, exports, __webpack_require__) {
var getNative = __webpack_require__("../../node_modules/lodash/_getNative.js");
var defineProperty = function() {
    try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
    } catch (e) {}
}();
module.exports = defineProperty;
},
"../../node_modules/lodash/_freeGlobal.js": function (module, exports, __webpack_require__) {
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;
module.exports = freeGlobal;
},
"../../node_modules/lodash/_getMapData.js": function (module, exports, __webpack_require__) {
var isKeyable = __webpack_require__("../../node_modules/lodash/_isKeyable.js");
function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}
module.exports = getMapData;
},
"../../node_modules/lodash/_getNative.js": function (module, exports, __webpack_require__) {
var baseIsNative = __webpack_require__("../../node_modules/lodash/_baseIsNative.js"), getValue = __webpack_require__("../../node_modules/lodash/_getValue.js");
function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : undefined;
}
module.exports = getNative;
},
"../../node_modules/lodash/_getPrototype.js": function (module, exports, __webpack_require__) {
var overArg = __webpack_require__("../../node_modules/lodash/_overArg.js");
var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;
},
"../../node_modules/lodash/_getRawTag.js": function (module, exports, __webpack_require__) {
var Symbol = __webpack_require__("../../node_modules/lodash/_Symbol.js");
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;
},
"../../node_modules/lodash/_getValue.js": function (module, exports, __webpack_require__) {
function getValue(object, key) {
    return object == null ? undefined : object[key];
}
module.exports = getValue;
},
"../../node_modules/lodash/_hashClear.js": function (module, exports, __webpack_require__) {
var nativeCreate = __webpack_require__("../../node_modules/lodash/_nativeCreate.js");
function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
}
module.exports = hashClear;
},
"../../node_modules/lodash/_hashDelete.js": function (module, exports, __webpack_require__) {
function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = hashDelete;
},
"../../node_modules/lodash/_hashGet.js": function (module, exports, __webpack_require__) {
var nativeCreate = __webpack_require__("../../node_modules/lodash/_nativeCreate.js");
var HASH_UNDEFINED = '__lodash_hash_undefined__';
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty.call(data, key) ? data[key] : undefined;
}
module.exports = hashGet;
},
"../../node_modules/lodash/_hashHas.js": function (module, exports, __webpack_require__) {
var nativeCreate = __webpack_require__("../../node_modules/lodash/_nativeCreate.js");
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}
module.exports = hashHas;
},
"../../node_modules/lodash/_hashSet.js": function (module, exports, __webpack_require__) {
var nativeCreate = __webpack_require__("../../node_modules/lodash/_nativeCreate.js");
var HASH_UNDEFINED = '__lodash_hash_undefined__';
function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
    return this;
}
module.exports = hashSet;
},
"../../node_modules/lodash/_initCloneObject.js": function (module, exports, __webpack_require__) {
var baseCreate = __webpack_require__("../../node_modules/lodash/_baseCreate.js"), getPrototype = __webpack_require__("../../node_modules/lodash/_getPrototype.js"), isPrototype = __webpack_require__("../../node_modules/lodash/_isPrototype.js");
function initCloneObject(object) {
    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}
module.exports = initCloneObject;
},
"../../node_modules/lodash/_isIndex.js": function (module, exports, __webpack_require__) {
var MAX_SAFE_INTEGER = 9007199254740991;
var reIsUint = /^(?:0|[1-9]\d*)$/;
function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;
},
"../../node_modules/lodash/_isIterateeCall.js": function (module, exports, __webpack_require__) {
var eq = __webpack_require__("../../node_modules/lodash/eq.js"), isArrayLike = __webpack_require__("../../node_modules/lodash/isArrayLike.js"), isIndex = __webpack_require__("../../node_modules/lodash/_isIndex.js"), isObject = __webpack_require__("../../node_modules/lodash/isObject.js");
function isIterateeCall(value, index, object) {
    if (!isObject(object)) return false;
    var type = typeof index;
    if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) return eq(object[index], value);
    return false;
}
module.exports = isIterateeCall;
},
"../../node_modules/lodash/_isKeyable.js": function (module, exports, __webpack_require__) {
function isKeyable(value) {
    var type = typeof value;
    return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}
module.exports = isKeyable;
},
"../../node_modules/lodash/_isMasked.js": function (module, exports, __webpack_require__) {
var coreJsData = __webpack_require__("../../node_modules/lodash/_coreJsData.js");
var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? 'Symbol(src)_1.' + uid : '';
}();
function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
}
module.exports = isMasked;
},
"../../node_modules/lodash/_isPrototype.js": function (module, exports, __webpack_require__) {
var objectProto = Object.prototype;
function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;
},
"../../node_modules/lodash/_listCacheClear.js": function (module, exports, __webpack_require__) {
function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
}
module.exports = listCacheClear;
},
"../../node_modules/lodash/_listCacheDelete.js": function (module, exports, __webpack_require__) {
var assocIndexOf = __webpack_require__("../../node_modules/lodash/_assocIndexOf.js");
var arrayProto = Array.prototype;
var splice = arrayProto.splice;
function listCacheDelete(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) return false;
    var lastIndex = data.length - 1;
    if (index == lastIndex) data.pop();
    else splice.call(data, index, 1);
    --this.size;
    return true;
}
module.exports = listCacheDelete;
},
"../../node_modules/lodash/_listCacheGet.js": function (module, exports, __webpack_require__) {
var assocIndexOf = __webpack_require__("../../node_modules/lodash/_assocIndexOf.js");
function listCacheGet(key) {
    var data = this.__data__, index = assocIndexOf(data, key);
    return index < 0 ? undefined : data[index][1];
}
module.exports = listCacheGet;
},
"../../node_modules/lodash/_listCacheHas.js": function (module, exports, __webpack_require__) {
var assocIndexOf = __webpack_require__("../../node_modules/lodash/_assocIndexOf.js");
function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
}
module.exports = listCacheHas;
},
"../../node_modules/lodash/_listCacheSet.js": function (module, exports, __webpack_require__) {
var assocIndexOf = __webpack_require__("../../node_modules/lodash/_assocIndexOf.js");
function listCacheSet(key, value) {
    var data = this.__data__, index = assocIndexOf(data, key);
    if (index < 0) {
        ++this.size;
        data.push([
            key,
            value
        ]);
    } else data[index][1] = value;
    return this;
}
module.exports = listCacheSet;
},
"../../node_modules/lodash/_mapCacheClear.js": function (module, exports, __webpack_require__) {
var Hash = __webpack_require__("../../node_modules/lodash/_Hash.js"), ListCache = __webpack_require__("../../node_modules/lodash/_ListCache.js"), Map = __webpack_require__("../../node_modules/lodash/_Map.js");
function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
    };
}
module.exports = mapCacheClear;
},
"../../node_modules/lodash/_mapCacheDelete.js": function (module, exports, __webpack_require__) {
var getMapData = __webpack_require__("../../node_modules/lodash/_getMapData.js");
function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
}
module.exports = mapCacheDelete;
},
"../../node_modules/lodash/_mapCacheGet.js": function (module, exports, __webpack_require__) {
var getMapData = __webpack_require__("../../node_modules/lodash/_getMapData.js");
function mapCacheGet(key) {
    return getMapData(this, key).get(key);
}
module.exports = mapCacheGet;
},
"../../node_modules/lodash/_mapCacheHas.js": function (module, exports, __webpack_require__) {
var getMapData = __webpack_require__("../../node_modules/lodash/_getMapData.js");
function mapCacheHas(key) {
    return getMapData(this, key).has(key);
}
module.exports = mapCacheHas;
},
"../../node_modules/lodash/_mapCacheSet.js": function (module, exports, __webpack_require__) {
var getMapData = __webpack_require__("../../node_modules/lodash/_getMapData.js");
function mapCacheSet(key, value) {
    var data = getMapData(this, key), size = data.size;
    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
}
module.exports = mapCacheSet;
},
"../../node_modules/lodash/_nativeCreate.js": function (module, exports, __webpack_require__) {
var getNative = __webpack_require__("../../node_modules/lodash/_getNative.js");
var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;
},
"../../node_modules/lodash/_nativeKeysIn.js": function (module, exports, __webpack_require__) {
function nativeKeysIn(object) {
    var result = [];
    if (object != null) for(var key in Object(object))result.push(key);
    return result;
}
module.exports = nativeKeysIn;
},
"../../node_modules/lodash/_nodeUtil.js": function (module, exports, __webpack_require__) {
var freeGlobal = __webpack_require__("../../node_modules/lodash/_freeGlobal.js");
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var freeProcess = moduleExports && freeGlobal.process;
var nodeUtil = function() {
    try {
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
}();
module.exports = nodeUtil;
},
"../../node_modules/lodash/_objectToString.js": function (module, exports, __webpack_require__) {
var objectProto = Object.prototype;
var nativeObjectToString = objectProto.toString;
function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;
},
"../../node_modules/lodash/_overArg.js": function (module, exports, __webpack_require__) {
function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;
},
"../../node_modules/lodash/_overRest.js": function (module, exports, __webpack_require__) {
var apply = __webpack_require__("../../node_modules/lodash/_apply.js");
var nativeMax = Math.max;
function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0);
    return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while(++index < length)array[index] = args[start + index];
        index = -1;
        var otherArgs = Array(start + 1);
        while(++index < start)otherArgs[index] = args[index];
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
    };
}
module.exports = overRest;
},
"../../node_modules/lodash/_root.js": function (module, exports, __webpack_require__) {
var freeGlobal = __webpack_require__("../../node_modules/lodash/_freeGlobal.js");
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;
},
"../../node_modules/lodash/_safeGet.js": function (module, exports, __webpack_require__) {
function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') return;
    if (key == '__proto__') return;
    return object[key];
}
module.exports = safeGet;
},
"../../node_modules/lodash/_setToString.js": function (module, exports, __webpack_require__) {
var baseSetToString = __webpack_require__("../../node_modules/lodash/_baseSetToString.js"), shortOut = __webpack_require__("../../node_modules/lodash/_shortOut.js");
var setToString = shortOut(baseSetToString);
module.exports = setToString;
},
"../../node_modules/lodash/_shortOut.js": function (module, exports, __webpack_require__) {
var HOT_COUNT = 800, HOT_SPAN = 16;
var nativeNow = Date.now;
function shortOut(func) {
    var count = 0, lastCalled = 0;
    return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
            if (++count >= HOT_COUNT) return arguments[0];
        } else count = 0;
        return func.apply(undefined, arguments);
    };
}
module.exports = shortOut;
},
"../../node_modules/lodash/_stackClear.js": function (module, exports, __webpack_require__) {
var ListCache = __webpack_require__("../../node_modules/lodash/_ListCache.js");
function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
}
module.exports = stackClear;
},
"../../node_modules/lodash/_stackDelete.js": function (module, exports, __webpack_require__) {
function stackDelete(key) {
    var data = this.__data__, result = data['delete'](key);
    this.size = data.size;
    return result;
}
module.exports = stackDelete;
},
"../../node_modules/lodash/_stackGet.js": function (module, exports, __webpack_require__) {
function stackGet(key) {
    return this.__data__.get(key);
}
module.exports = stackGet;
},
"../../node_modules/lodash/_stackHas.js": function (module, exports, __webpack_require__) {
function stackHas(key) {
    return this.__data__.has(key);
}
module.exports = stackHas;
},
"../../node_modules/lodash/_stackSet.js": function (module, exports, __webpack_require__) {
var ListCache = __webpack_require__("../../node_modules/lodash/_ListCache.js"), Map = __webpack_require__("../../node_modules/lodash/_Map.js"), MapCache = __webpack_require__("../../node_modules/lodash/_MapCache.js");
var LARGE_ARRAY_SIZE = 200;
function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
            pairs.push([
                key,
                value
            ]);
            this.size = ++data.size;
            return this;
        }
        data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
}
module.exports = stackSet;
},
"../../node_modules/lodash/_toSource.js": function (module, exports, __webpack_require__) {
var funcProto = Function.prototype;
var funcToString = funcProto.toString;
function toSource(func) {
    if (func != null) {
        try {
            return funcToString.call(func);
        } catch (e) {}
        try {
            return func + '';
        } catch (e1) {}
    }
    return '';
}
module.exports = toSource;
},
"../../node_modules/lodash/_trimmedEndIndex.js": function (module, exports, __webpack_require__) {
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
    var index = string.length;
    while(index-- && reWhitespace.test(string.charAt(index)));
    return index;
}
module.exports = trimmedEndIndex;
},
"../../node_modules/lodash/constant.js": function (module, exports, __webpack_require__) {
function constant(value) {
    return function() {
        return value;
    };
}
module.exports = constant;
},
"../../node_modules/lodash/debounce.js": function (module, exports, __webpack_require__) {
var isObject = __webpack_require__("../../node_modules/lodash/isObject.js"), now = __webpack_require__("../../node_modules/lodash/now.js"), toNumber = __webpack_require__("../../node_modules/lodash/toNumber.js");
var FUNC_ERROR_TEXT = 'Expected a function';
var nativeMax = Math.max, nativeMin = Math.min;
function debounce(func, wait, options) {
    var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time) {
        var args = lastArgs, thisArg = lastThis;
        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
    }
    function leadingEdge(time) {
        lastInvokeTime = time;
        timerId = setTimeout(timerExpired, wait);
        return leading ? invokeFunc(time) : result;
    }
    function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
        return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
        return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) return trailingEdge(time);
        timerId = setTimeout(timerExpired, remainingWait(time));
    }
    function trailingEdge(time) {
        timerId = undefined;
        if (trailing && lastArgs) return invokeFunc(time);
        lastArgs = lastThis = undefined;
        return result;
    }
    function cancel() {
        if (timerId !== undefined) clearTimeout(timerId);
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
    }
    function flush() {
        return timerId === undefined ? result : trailingEdge(now());
    }
    function debounced() {
        var time = now(), isInvoking = shouldInvoke(time);
        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;
        if (isInvoking) {
            if (timerId === undefined) return leadingEdge(lastCallTime);
            if (maxing) {
                clearTimeout(timerId);
                timerId = setTimeout(timerExpired, wait);
                return invokeFunc(lastCallTime);
            }
        }
        if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
        return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
}
module.exports = debounce;
},
"../../node_modules/lodash/eq.js": function (module, exports, __webpack_require__) {
function eq(value, other) {
    return value === other || value !== value && other !== other;
}
module.exports = eq;
},
"../../node_modules/lodash/identity.js": function (module, exports, __webpack_require__) {
function identity(value) {
    return value;
}
module.exports = identity;
},
"../../node_modules/lodash/isArguments.js": function (module, exports, __webpack_require__) {
var baseIsArguments = __webpack_require__("../../node_modules/lodash/_baseIsArguments.js"), isObjectLike = __webpack_require__("../../node_modules/lodash/isObjectLike.js");
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var propertyIsEnumerable = objectProto.propertyIsEnumerable;
var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;
},
"../../node_modules/lodash/isArray.js": function (module, exports, __webpack_require__) {
var isArray = Array.isArray;
module.exports = isArray;
},
"../../node_modules/lodash/isArrayLike.js": function (module, exports, __webpack_require__) {
var isFunction = __webpack_require__("../../node_modules/lodash/isFunction.js"), isLength = __webpack_require__("../../node_modules/lodash/isLength.js");
function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;
},
"../../node_modules/lodash/isArrayLikeObject.js": function (module, exports, __webpack_require__) {
var isArrayLike = __webpack_require__("../../node_modules/lodash/isArrayLike.js"), isObjectLike = __webpack_require__("../../node_modules/lodash/isObjectLike.js");
function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
module.exports = isArrayLikeObject;
},
"../../node_modules/lodash/isBuffer.js": function (module, exports, __webpack_require__) {
var root = __webpack_require__("../../node_modules/lodash/_root.js"), stubFalse = __webpack_require__("../../node_modules/lodash/stubFalse.js");
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
var moduleExports = freeModule && freeModule.exports === freeExports;
var Buffer = moduleExports ? root.Buffer : undefined;
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;
},
"../../node_modules/lodash/isFunction.js": function (module, exports, __webpack_require__) {
var baseGetTag = __webpack_require__("../../node_modules/lodash/_baseGetTag.js"), isObject = __webpack_require__("../../node_modules/lodash/isObject.js");
var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
function isFunction(value) {
    if (!isObject(value)) return false;
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;
},
"../../node_modules/lodash/isLength.js": function (module, exports, __webpack_require__) {
var MAX_SAFE_INTEGER = 9007199254740991;
function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;
},
"../../node_modules/lodash/isObject.js": function (module, exports, __webpack_require__) {
function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;
},
"../../node_modules/lodash/isObjectLike.js": function (module, exports, __webpack_require__) {
function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;
},
"../../node_modules/lodash/isPlainObject.js": function (module, exports, __webpack_require__) {
var baseGetTag = __webpack_require__("../../node_modules/lodash/_baseGetTag.js"), getPrototype = __webpack_require__("../../node_modules/lodash/_getPrototype.js"), isObjectLike = __webpack_require__("../../node_modules/lodash/isObjectLike.js");
var objectTag = '[object Object]';
var funcProto = Function.prototype, objectProto = Object.prototype;
var funcToString = funcProto.toString;
var hasOwnProperty = objectProto.hasOwnProperty;
var objectCtorString = funcToString.call(Object);
function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
    var proto = getPrototype(value);
    if (proto === null) return true;
    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}
module.exports = isPlainObject;
},
"../../node_modules/lodash/isSymbol.js": function (module, exports, __webpack_require__) {
var baseGetTag = __webpack_require__("../../node_modules/lodash/_baseGetTag.js"), isObjectLike = __webpack_require__("../../node_modules/lodash/isObjectLike.js");
var symbolTag = '[object Symbol]';
function isSymbol(value) {
    return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}
module.exports = isSymbol;
},
"../../node_modules/lodash/isTypedArray.js": function (module, exports, __webpack_require__) {
var baseIsTypedArray = __webpack_require__("../../node_modules/lodash/_baseIsTypedArray.js"), baseUnary = __webpack_require__("../../node_modules/lodash/_baseUnary.js"), nodeUtil = __webpack_require__("../../node_modules/lodash/_nodeUtil.js");
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;
},
"../../node_modules/lodash/keysIn.js": function (module, exports, __webpack_require__) {
var arrayLikeKeys = __webpack_require__("../../node_modules/lodash/_arrayLikeKeys.js"), baseKeysIn = __webpack_require__("../../node_modules/lodash/_baseKeysIn.js"), isArrayLike = __webpack_require__("../../node_modules/lodash/isArrayLike.js");
function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}
module.exports = keysIn;
},
"../../node_modules/lodash/merge.js": function (module, exports, __webpack_require__) {
var baseMerge = __webpack_require__("../../node_modules/lodash/_baseMerge.js"), createAssigner = __webpack_require__("../../node_modules/lodash/_createAssigner.js");
var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
});
module.exports = merge;
},
"../../node_modules/lodash/now.js": function (module, exports, __webpack_require__) {
var root = __webpack_require__("../../node_modules/lodash/_root.js");
var now = function() {
    return root.Date.now();
};
module.exports = now;
},
"../../node_modules/lodash/stubFalse.js": function (module, exports, __webpack_require__) {
function stubFalse() {
    return false;
}
module.exports = stubFalse;
},
"../../node_modules/lodash/toNumber.js": function (module, exports, __webpack_require__) {
var baseTrim = __webpack_require__("../../node_modules/lodash/_baseTrim.js"), isObject = __webpack_require__("../../node_modules/lodash/isObject.js"), isSymbol = __webpack_require__("../../node_modules/lodash/isSymbol.js");
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
    if (typeof value == 'number') return value;
    if (isSymbol(value)) return NAN;
    if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') return value === 0 ? value : +value;
    value = baseTrim(value);
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
module.exports = toNumber;
},
"../../node_modules/lodash/toPlainObject.js": function (module, exports, __webpack_require__) {
var copyObject = __webpack_require__("../../node_modules/lodash/_copyObject.js"), keysIn = __webpack_require__("../../node_modules/lodash/keysIn.js");
function toPlainObject(value) {
    return copyObject(value, keysIn(value));
}
module.exports = toPlainObject;
},
"../../node_modules/number-precision/build/index.es.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    strip: function() {
        return strip;
    },
    plus: function() {
        return plus;
    },
    minus: function() {
        return minus;
    },
    times: function() {
        return times;
    },
    divide: function() {
        return divide;
    },
    round: function() {
        return round;
    },
    digitLength: function() {
        return digitLength;
    },
    float2Fixed: function() {
        return float2Fixed;
    },
    enableBoundaryChecking: function() {
        return enableBoundaryChecking;
    },
    default: function() {
        return _default;
    }
});
function strip(num, precision) {
    if (precision === void 0) precision = 15;
    return +parseFloat(Number(num).toPrecision(precision));
}
function digitLength(num) {
    var eSplit = num.toString().split(/[eE]/);
    var len = (eSplit[0].split('.')[1] || '').length - +(eSplit[1] || 0);
    return len > 0 ? len : 0;
}
function float2Fixed(num) {
    if (num.toString().indexOf('e') === -1) return Number(num.toString().replace('.', ''));
    var dLen = digitLength(num);
    return dLen > 0 ? strip(Number(num) * Math.pow(10, dLen)) : Number(num);
}
function checkBoundary(num) {
    if (_boundaryCheckingState) {
        if (num > Number.MAX_SAFE_INTEGER || num < Number.MIN_SAFE_INTEGER) console.warn(num + " is beyond boundary when transfer to integer, the results may not be accurate");
    }
}
function iteratorOperation(arr, operation) {
    var num1 = arr[0], num2 = arr[1], others = arr.slice(2);
    var res = operation(num1, num2);
    others.forEach(function(num) {
        res = operation(res, num);
    });
    return res;
}
function times() {
    var nums = [];
    for(var _i = 0; _i < arguments.length; _i++)nums[_i] = arguments[_i];
    if (nums.length > 2) return iteratorOperation(nums, times);
    var num1 = nums[0], num2 = nums[1];
    var num1Changed = float2Fixed(num1);
    var num2Changed = float2Fixed(num2);
    var baseNum = digitLength(num1) + digitLength(num2);
    var leftValue = num1Changed * num2Changed;
    checkBoundary(leftValue);
    return leftValue / Math.pow(10, baseNum);
}
function plus() {
    var nums = [];
    for(var _i = 0; _i < arguments.length; _i++)nums[_i] = arguments[_i];
    if (nums.length > 2) return iteratorOperation(nums, plus);
    var num1 = nums[0], num2 = nums[1];
    var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
    return (times(num1, baseNum) + times(num2, baseNum)) / baseNum;
}
function minus() {
    var nums = [];
    for(var _i = 0; _i < arguments.length; _i++)nums[_i] = arguments[_i];
    if (nums.length > 2) return iteratorOperation(nums, minus);
    var num1 = nums[0], num2 = nums[1];
    var baseNum = Math.pow(10, Math.max(digitLength(num1), digitLength(num2)));
    return (times(num1, baseNum) - times(num2, baseNum)) / baseNum;
}
function divide() {
    var nums = [];
    for(var _i = 0; _i < arguments.length; _i++)nums[_i] = arguments[_i];
    if (nums.length > 2) return iteratorOperation(nums, divide);
    var num1 = nums[0], num2 = nums[1];
    var num1Changed = float2Fixed(num1);
    var num2Changed = float2Fixed(num2);
    checkBoundary(num1Changed);
    checkBoundary(num2Changed);
    return times(num1Changed / num2Changed, strip(Math.pow(10, digitLength(num2) - digitLength(num1))));
}
function round(num, ratio) {
    var base = Math.pow(10, ratio);
    var result = divide(Math.round(Math.abs(times(num, base))), base);
    if (num < 0 && result !== 0) result = times(result, -1);
    return result;
}
var _boundaryCheckingState = true;
function enableBoundaryChecking(flag) {
    if (flag === void 0) flag = true;
    _boundaryCheckingState = flag;
}
var index = {
    strip: strip,
    plus: plus,
    minus: minus,
    times: times,
    divide: divide,
    round: round,
    digitLength: digitLength,
    float2Fixed: float2Fixed,
    enableBoundaryChecking: enableBoundaryChecking
};
var _default = index;
},
"../../node_modules/object-assign/index.js": function (module, exports, __webpack_require__) {
"use strict";
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;
function toObject(val) {
    if (val === null || val === undefined) throw new TypeError('Object.assign cannot be called with null or undefined');
    return Object(val);
}
function shouldUseNative() {
    try {
        if (!Object.assign) return false;
        var test1 = new String('abc');
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') return false;
        var test2 = {};
        for(var i = 0; i < 10; i++)test2['_' + String.fromCharCode(i)] = i;
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
        });
        if (order2.join('') !== '0123456789') return false;
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function(letter) {
            test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') return false;
        return true;
    } catch (err) {
        return false;
    }
}
module.exports = shouldUseNative() ? Object.assign : function(target, source) {
    var from;
    var to = toObject(target);
    var symbols;
    for(var s = 1; s < arguments.length; s++){
        from = Object(arguments[s]);
        for(var key in from)if (hasOwnProperty.call(from, key)) to[key] = from[key];
        if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for(var i = 0; i < symbols.length; i++)if (propIsEnumerable.call(from, symbols[i])) to[symbols[i]] = from[symbols[i]];
        }
    }
    return to;
};
},
"../../node_modules/prop-types/checkPropTypes.js": function (module, exports, __webpack_require__) {
"use strict";
var printWarning = function() {};
var ReactPropTypesSecret = __webpack_require__("../../node_modules/prop-types/lib/ReactPropTypesSecret.js");
var loggedTypeFailures = {};
var has = __webpack_require__("../../node_modules/prop-types/lib/has.js");
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        throw new Error(message);
    } catch (x) {}
};
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
    for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
        var error;
        try {
            if (typeof typeSpecs[typeSpecName] !== 'function') {
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
            }
            error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
            error = ex;
        }
        if (error && !(error instanceof Error)) printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
            loggedTypeFailures[error.message] = true;
            var stack = getStack ? getStack() : '';
            printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
    }
}
checkPropTypes.resetWarningCache = function() {
    loggedTypeFailures = {};
};
module.exports = checkPropTypes;
},
"../../node_modules/prop-types/factoryWithTypeCheckers.js": function (module, exports, __webpack_require__) {
"use strict";
var ReactIs = __webpack_require__("../../node_modules/react-is/index.js");
var assign = __webpack_require__("../../node_modules/object-assign/index.js");
var ReactPropTypesSecret = __webpack_require__("../../node_modules/prop-types/lib/ReactPropTypesSecret.js");
var has = __webpack_require__("../../node_modules/prop-types/lib/has.js");
var checkPropTypes = __webpack_require__("../../node_modules/prop-types/checkPropTypes.js");
var printWarning = function() {};
printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') console.error(message);
    try {
        throw new Error(message);
    } catch (x) {}
};
function emptyFunctionThatReturnsNull() {
    return null;
}
module.exports = function(isValidElement, throwOnDirectAccess) {
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === 'function') return iteratorFn;
    }
    var ANONYMOUS = '<<anonymous>>';
    var ReactPropTypes = {
        array: createPrimitiveTypeChecker('array'),
        bigint: createPrimitiveTypeChecker('bigint'),
        bool: createPrimitiveTypeChecker('boolean'),
        func: createPrimitiveTypeChecker('function'),
        number: createPrimitiveTypeChecker('number'),
        object: createPrimitiveTypeChecker('object'),
        string: createPrimitiveTypeChecker('string'),
        symbol: createPrimitiveTypeChecker('symbol'),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
    };
    function is(x, y) {
        if (x === y) return x !== 0 || 1 / x === 1 / y;
        else return x !== x && y !== y;
    }
    function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === 'object' ? data : {};
        this.stack = '';
    }
    PropTypeError.prototype = Error.prototype;
    function createChainableTypeChecker(validate) {
        var manualPropTypeCallCache = {};
        var manualPropTypeWarningCount = 0;
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                    var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
                    err.name = 'Invariant Violation';
                    throw err;
                } else if (typeof console !== 'undefined') {
                    var cacheKey = componentName + ':' + propName;
                    if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                        printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
                        manualPropTypeCallCache[cacheKey] = true;
                        manualPropTypeWarningCount++;
                    }
                }
            }
            if (props[propName] == null) {
                if (isRequired) {
                    if (props[propName] === null) return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
                    return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
                }
                return null;
            } else return validate(props, propName, componentName, location, propFullName);
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
    }
    function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
                var preciseType = getPreciseType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'), {
                    expectedType: expectedType
                });
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
    }
    function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
            }
            for(var i = 0; i < propValue.length; i++){
                var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
            {
                if (arguments.length > 1) printWarning('Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' + 'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).');
                else printWarning('Invalid argument supplied to oneOf, expected an array.');
            }
            return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for(var i = 0; i < expectedValues.length; i++){
                if (is(propValue, expectedValues[i])) return null;
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
                var type = getPreciseType(value);
                if (type === 'symbol') return String(value);
                return value;
            });
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== 'function') return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
            for(var key in propValue)if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error instanceof Error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
            printWarning('Invalid argument supplied to oneOfType, expected an instance of array.');
            return emptyFunctionThatReturnsNull;
        }
        for(var i = 0; i < arrayOfTypeCheckers.length; i++){
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== 'function') {
                printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
                return emptyFunctionThatReturnsNull;
            }
        }
        function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for(var i = 0; i < arrayOfTypeCheckers.length; i++){
                var checker = arrayOfTypeCheckers[i];
                var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
                if (checkerResult == null) return null;
                if (checkerResult.data && has(checkerResult.data, 'expectedType')) expectedTypes.push(checkerResult.data.expectedType);
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ', expected one of type [' + expectedTypes.join(', ') + ']' : '';
            return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
        }
        return createChainableTypeChecker(validate);
    }
    function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
            if (!isNode(props[propName])) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + type + '`.');
    }
    function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            for(var key in shapeTypes){
                var checker = shapeTypes[key];
                if (typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== 'object') return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
            var allKeys = assign({}, props[propName], shapeTypes);
            for(var key in allKeys){
                var checker = shapeTypes[key];
                if (has(shapeTypes, key) && typeof checker !== 'function') return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
                if (!checker) return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
                var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
                if (error) return error;
            }
            return null;
        }
        return createChainableTypeChecker(validate);
    }
    function isNode(propValue) {
        switch(typeof propValue){
            case 'number':
            case 'string':
            case 'undefined':
                return true;
            case 'boolean':
                return !propValue;
            case 'object':
                if (Array.isArray(propValue)) return propValue.every(isNode);
                if (propValue === null || isValidElement(propValue)) return true;
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                    var iterator = iteratorFn.call(propValue);
                    var step;
                    if (iteratorFn !== propValue.entries) while(!(step = iterator.next()).done){
                        if (!isNode(step.value)) return false;
                    }
                    else while(!(step = iterator.next()).done){
                        var entry = step.value;
                        if (entry) {
                            if (!isNode(entry[1])) return false;
                        }
                    }
                } else return false;
                return true;
            default:
                return false;
        }
    }
    function isSymbol(propType, propValue) {
        if (propType === 'symbol') return true;
        if (!propValue) return false;
        if (propValue['@@toStringTag'] === 'Symbol') return true;
        if (typeof Symbol === 'function' && propValue instanceof Symbol) return true;
        return false;
    }
    function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) return 'array';
        if (propValue instanceof RegExp) return 'object';
        if (isSymbol(propType, propValue)) return 'symbol';
        return propType;
    }
    function getPreciseType(propValue) {
        if (typeof propValue === 'undefined' || propValue === null) return '' + propValue;
        var propType = getPropType(propValue);
        if (propType === 'object') {
            if (propValue instanceof Date) return 'date';
            else if (propValue instanceof RegExp) return 'regexp';
        }
        return propType;
    }
    function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch(type){
            case 'array':
            case 'object':
                return 'an ' + type;
            case 'boolean':
            case 'date':
            case 'regexp':
                return 'a ' + type;
            default:
                return type;
        }
    }
    function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) return ANONYMOUS;
        return propValue.constructor.name;
    }
    ReactPropTypes.checkPropTypes = checkPropTypes;
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
    ReactPropTypes.PropTypes = ReactPropTypes;
    return ReactPropTypes;
};
},
"../../node_modules/prop-types/index.js": function (module, exports, __webpack_require__) {
var ReactIs = __webpack_require__("../../node_modules/react-is/index.js");
var throwOnDirectAccess = true;
module.exports = __webpack_require__("../../node_modules/prop-types/factoryWithTypeCheckers.js")(ReactIs.isElement, throwOnDirectAccess);
},
"../../node_modules/prop-types/lib/ReactPropTypesSecret.js": function (module, exports, __webpack_require__) {
"use strict";
var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;
},
"../../node_modules/prop-types/lib/has.js": function (module, exports, __webpack_require__) {
module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
},
"../../node_modules/react-dom/cjs/react-dom.development.js": function (module, exports, __webpack_require__) {
"use strict";
(function() {
    'use strict';
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var React = __webpack_require__("../../node_modules/react/index.js");
    var Scheduler = __webpack_require__("../../node_modules/scheduler/index.js");
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    var suppressWarning = false;
    function setSuppressWarning(newSuppressWarning) {
        suppressWarning = newSuppressWarning;
    }
    function warn(format) {
        if (!suppressWarning) {
            for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
            printWarning('warn', format, args);
        }
    }
    function error(format) {
        if (!suppressWarning) {
            for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
            printWarning('error', format, args);
        }
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return String(item);
        });
        argsWithFormat.unshift('Warning: ' + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2;
    var HostRoot = 3;
    var HostPortal = 4;
    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedFragment = 18;
    var SuspenseListComponent = 19;
    var ScopeComponent = 21;
    var OffscreenComponent = 22;
    var LegacyHiddenComponent = 23;
    var CacheComponent = 24;
    var TracingMarkerComponent = 25;
    var enableClientRenderFallbackOnTextMismatch = true;
    var enableNewReconciler = false;
    var enableLazyContextPropagation = false;
    var enableLegacyHidden = false;
    var enableSuspenseAvoidThisFallback = false;
    var disableCommentsAsDOMContainers = true;
    var enableCustomElementPropertySupport = false;
    var warnAboutStringRefs = false;
    var enableSchedulingProfiler = true;
    var enableProfilerTimer = true;
    var enableProfilerCommitHooks = true;
    var allNativeEvents = new Set();
    var registrationNameDependencies = {};
    var possibleRegistrationNames = {};
    function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + 'Capture', dependencies);
    }
    function registerDirectEvent(registrationName, dependencies) {
        if (registrationNameDependencies[registrationName]) error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
        registrationNameDependencies[registrationName] = dependencies;
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;
        if (registrationName === 'onDoubleClick') possibleRegistrationNames.ondblclick = registrationName;
        for(var i = 0; i < dependencies.length; i++)allNativeEvents.add(dependencies[i]);
    }
    var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function typeName(value) {
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    }
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        return '' + value;
    }
    function checkAttributeStringCoercion(value, attributeName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
            return testStringCoercion(value);
        }
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
        }
    }
    function checkPropStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
        }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
        if (willCoercionThrow(value)) {
            error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
            return testStringCoercion(value);
        }
    }
    function checkHtmlStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
        }
    }
    function checkFormFieldValueStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
        }
    }
    var RESERVED = 0;
    var STRING = 1;
    var BOOLEANISH_STRING = 2;
    var BOOLEAN = 3;
    var OVERLOADED_BOOLEAN = 4;
    var NUMERIC = 5;
    var POSITIVE_NUMERIC = 6;
    var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};
    function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
        }
        illegalAttributeNameCache[attributeName] = true;
        error('Invalid attribute name: `%s`', attributeName);
        return false;
    }
    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) return propertyInfo.type === RESERVED;
        if (isCustomComponentTag) return false;
        if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) return true;
        return false;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) return false;
        switch(typeof value){
            case 'function':
            case 'symbol':
                return true;
            case 'boolean':
                if (isCustomComponentTag) return false;
                if (propertyInfo !== null) return !propertyInfo.acceptsBooleans;
                else {
                    var prefix = name.toLowerCase().slice(0, 5);
                    return prefix !== 'data-' && prefix !== 'aria-';
                }
            default:
                return false;
        }
    }
    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
        if (value === null || typeof value === 'undefined') return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) return true;
        if (isCustomComponentTag) return false;
        if (propertyInfo !== null) switch(propertyInfo.type){
            case BOOLEAN:
                return !value;
            case OVERLOADED_BOOLEAN:
                return value === false;
            case NUMERIC:
                return isNaN(value);
            case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
        }
        return false;
    }
    function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
        this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
        this.attributeName = attributeName;
        this.attributeNamespace = attributeNamespace;
        this.mustUseProperty = mustUseProperty;
        this.propertyName = name;
        this.type = type;
        this.sanitizeURL = sanitizeURL;
        this.removeEmptyString = removeEmptyString;
    }
    var properties = {};
    var reservedProps = [
        'children',
        'dangerouslySetInnerHTML',
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style'
    ];
    reservedProps.forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
    });
    [
        [
            'acceptCharset',
            'accept-charset'
        ],
        [
            'className',
            'class'
        ],
        [
            'htmlFor',
            'for'
        ],
        [
            'httpEquiv',
            'http-equiv'
        ]
    ].forEach(function(_ref) {
        var name = _ref[0], attributeName = _ref[1];
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    });
    [
        'contentEditable',
        'draggable',
        'spellCheck',
        'value'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
    });
    [
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
    });
    [
        'allowFullScreen',
        'async',
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless',
        'itemScope'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
    });
    [
        'checked',
        'multiple',
        'muted',
        'selected'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
    });
    [
        'capture',
        'download'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
    });
    [
        'cols',
        'rows',
        'size',
        'span'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
    });
    [
        'rowSpan',
        'start'
    ].forEach(function(name) {
        properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
    });
    var CAMELIZE = /[\-\:]([a-z])/g;
    var capitalize = function(token) {
        return token[1].toUpperCase();
    };
    [
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
    });
    [
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/1999/xlink', false, false);
    });
    [
        'xml:base',
        'xml:lang',
        'xml:space'
    ].forEach(function(attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize);
        properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, 'http://www.w3.org/XML/1998/namespace', false, false);
    });
    [
        'tabIndex',
        'crossOrigin'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
    });
    var xlinkHref = 'xlinkHref';
    properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, 'xlink:href', 'http://www.w3.org/1999/xlink', true, false);
    [
        'src',
        'href',
        'action',
        'formAction'
    ].forEach(function(attributeName) {
        properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
    });
    var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
    var didWarn = false;
    function sanitizeURL(url) {
        if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true;
            error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
        }
    }
    function getValueForProperty(node, name, expected, propertyInfo) {
        if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            return node[propertyName];
        } else {
            checkAttributeStringCoercion(expected, name);
            if (propertyInfo.sanitizeURL) sanitizeURL('' + expected);
            var attributeName = propertyInfo.attributeName;
            var stringValue = null;
            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                    var value = node.getAttribute(attributeName);
                    if (value === '') return true;
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return value;
                    if (value === '' + expected) return expected;
                    return value;
                }
            } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return node.getAttribute(attributeName);
                if (propertyInfo.type === BOOLEAN) return expected;
                stringValue = node.getAttribute(attributeName);
            }
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) return stringValue === null ? expected : stringValue;
            else if (stringValue === '' + expected) return expected;
            else return stringValue;
        }
    }
    function getValueForAttribute(node, name, expected, isCustomComponentTag) {
        if (!isAttributeNameSafe(name)) return;
        if (!node.hasAttribute(name)) return expected === undefined ? undefined : null;
        var value = node.getAttribute(name);
        checkAttributeStringCoercion(expected, name);
        if (value === '' + expected) return expected;
        return value;
    }
    function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name);
        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) return;
        if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) value = null;
        if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) node.removeAttribute(_attributeName);
                else {
                    checkAttributeStringCoercion(value, name);
                    node.setAttribute(_attributeName, '' + value);
                }
            }
            return;
        }
        var mustUseProperty = propertyInfo.mustUseProperty;
        if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
                var type = propertyInfo.type;
                node[propertyName] = type === BOOLEAN ? false : '';
            } else node[propertyName] = value;
            return;
        }
        var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
        if (value === null) node.removeAttribute(attributeName);
        else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) attributeValue = '';
            else {
                checkAttributeStringCoercion(value, attributeName);
                attributeValue = '' + value;
                if (propertyInfo.sanitizeURL) sanitizeURL(attributeValue.toString());
            }
            if (attributeNamespace) node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            else node.setAttribute(attributeName, attributeValue);
        }
    }
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_SCOPE_TYPE = Symbol.for('react.scope');
    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
    var REACT_CACHE_TYPE = Symbol.for('react.cache');
    var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            var props = {
                configurable: true,
                enumerable: true,
                writable: true
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            if (construct) {
                var Fake = function() {
                    throw Error();
                };
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            if (sample && control && typeof sample.stack === 'string') {
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])c--;
                for(; s >= 1 && c >= 0; s--, c--)if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeClassComponentFrame(ctor, source, ownerFn) {
        return describeNativeComponentFrame(ctor, true);
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    function describeFiber(fiber) {
        var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
        var source = fiber._debugSource;
        switch(fiber.tag){
            case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
                return describeBuiltInComponentFrame('Lazy');
            case SuspenseComponent:
                return describeBuiltInComponentFrame('Suspense');
            case SuspenseListComponent:
                return describeBuiltInComponentFrame('SuspenseList');
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
                return describeClassComponentFrame(fiber.type);
            default:
                return '';
        }
    }
    function getStackByFiberInDevAndProd(workInProgress) {
        try {
            var info = '';
            var node = workInProgress;
            do {
                info += describeFiber(node);
                node = node.return;
            }while (node)
            return info;
        } catch (x) {
            return '\nError generating stack: ' + x.message + '\n' + x.stack;
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromType(type) {
        if (type == null) return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    function getWrappedName$1(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || '';
        return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
    }
    function getContextName$1(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromFiber(fiber) {
        var tag = fiber.tag, type = fiber.type;
        switch(tag){
            case CacheComponent:
                return 'Cache';
            case ContextConsumer:
                var context = type;
                return getContextName$1(context) + '.Consumer';
            case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + '.Provider';
            case DehydratedFragment:
                return 'DehydratedFragment';
            case ForwardRef:
                return getWrappedName$1(type, type.render, 'ForwardRef');
            case Fragment:
                return 'Fragment';
            case HostComponent:
                return type;
            case HostPortal:
                return 'Portal';
            case HostRoot:
                return 'Root';
            case HostText:
                return 'Text';
            case LazyComponent:
                return getComponentNameFromType(type);
            case Mode:
                if (type === REACT_STRICT_MODE_TYPE) return 'StrictMode';
                return 'Mode';
            case OffscreenComponent:
                return 'Offscreen';
            case Profiler:
                return 'Profiler';
            case ScopeComponent:
                return 'Scope';
            case SuspenseComponent:
                return 'Suspense';
            case SuspenseListComponent:
                return 'SuspenseList';
            case TracingMarkerComponent:
                return 'TracingMarker';
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
                if (typeof type === 'function') return type.displayName || type.name || null;
                if (typeof type === 'string') return type;
                break;
        }
        return null;
    }
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var current = null;
    var isRendering = false;
    function getCurrentFiberOwnerNameInDevOrNull() {
        if (current === null) return null;
        var owner = current._debugOwner;
        if (owner !== null && typeof owner !== 'undefined') return getComponentNameFromFiber(owner);
        return null;
    }
    function getCurrentFiberStackInDev() {
        if (current === null) return '';
        return getStackByFiberInDevAndProd(current);
    }
    function resetCurrentFiber() {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        isRendering = false;
    }
    function setCurrentFiber(fiber) {
        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
        current = fiber;
        isRendering = false;
    }
    function getCurrentFiber() {
        return current;
    }
    function setIsRendering(rendering) {
        isRendering = rendering;
    }
    function toString(value) {
        return '' + value;
    }
    function getToStringValue(value) {
        switch(typeof value){
            case 'boolean':
            case 'number':
            case 'string':
            case 'undefined':
                return value;
            case 'object':
                checkFormFieldValueStringCoercion(value);
                return value;
            default:
                return '';
        }
    }
    var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
    };
    function checkControlledValueProps(tagName, props) {
        if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
        if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCheckable(elem) {
        var type = elem.type;
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }
    function getTracker(node) {
        return node._valueTracker;
    }
    function detachTracker(node) {
        node._valueTracker = null;
    }
    function getValueFromNode(node) {
        var value = '';
        if (!node) return value;
        if (isCheckable(node)) value = node.checked ? 'true' : 'false';
        else value = node.value;
        return value;
    }
    function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value';
        var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
        checkFormFieldValueStringCoercion(node[valueField]);
        var currentValue = '' + node[valueField];
        if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') return;
        var get = descriptor.get, set = descriptor.set;
        Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
                return get.call(this);
            },
            set: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
                set.call(this, value);
            }
        });
        Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
        });
        var tracker = {
            getValue: function() {
                return currentValue;
            },
            setValue: function(value) {
                checkFormFieldValueStringCoercion(value);
                currentValue = '' + value;
            },
            stopTracking: function() {
                detachTracker(node);
                delete node[valueField];
            }
        };
        return tracker;
    }
    function track(node) {
        if (getTracker(node)) return;
        node._valueTracker = trackValueOnNode(node);
    }
    function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = getTracker(node);
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var nextValue = getValueFromNode(node);
        if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
        }
        return false;
    }
    function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined);
        if (typeof doc === 'undefined') return null;
        try {
            return doc.activeElement || doc.body;
        } catch (e) {
            return doc.body;
        }
    }
    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;
    function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio';
        return usesChecked ? props.checked != null : props.value != null;
    }
    function getHostProps(element, props) {
        var node = element;
        var checked = props.checked;
        var hostProps = assign({}, props, {
            defaultChecked: undefined,
            defaultValue: undefined,
            value: undefined,
            checked: checked != null ? checked : node._wrapperState.initialChecked
        });
        return hostProps;
    }
    function initWrapperState(element, props) {
        checkControlledValueProps('input', props);
        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
            error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnCheckedDefaultChecked = true;
        }
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
            error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
            didWarnValueDefaultValue = true;
        }
        var node = element;
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
        node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
        };
    }
    function updateChecked(element, props) {
        var node = element;
        var checked = props.checked;
        if (checked != null) setValueForProperty(node, 'checked', checked, false);
    }
    function updateWrapper(element, props) {
        var node = element;
        var controlled = isControlled(props);
        if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
            error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnUncontrolledToControlled = true;
        }
        if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
            error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
            didWarnControlledToUncontrolled = true;
        }
        updateChecked(element, props);
        var value = getToStringValue(props.value);
        var type = props.type;
        if (value != null) {
            if (type === 'number') {
                if (value === 0 && node.value === '' || node.value != value) node.value = toString(value);
            } else if (node.value !== toString(value)) node.value = toString(value);
        } else if (type === 'submit' || type === 'reset') {
            node.removeAttribute('value');
            return;
        }
        if (props.hasOwnProperty('value')) setDefaultValue(node, props.type, value);
        else if (props.hasOwnProperty('defaultValue')) setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        if (props.checked == null && props.defaultChecked != null) node.defaultChecked = !!props.defaultChecked;
    }
    function postMountWrapper(element, props, isHydrating) {
        var node = element;
        if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
            var type = props.type;
            var isButton = type === 'submit' || type === 'reset';
            if (isButton && (props.value === undefined || props.value === null)) return;
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating) {
                if (initialValue !== node.value) node.value = initialValue;
            }
            node.defaultValue = initialValue;
        }
        var name = node.name;
        if (name !== '') node.name = '';
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
        if (name !== '') node.name = name;
    }
    function restoreControlledState(element, props) {
        var node = element;
        updateWrapper(node, props);
        updateNamedCousins(node, props);
    }
    function updateNamedCousins(rootNode, props) {
        var name = props.name;
        if (props.type === 'radio' && name != null) {
            var queryRoot = rootNode;
            while(queryRoot.parentNode)queryRoot = queryRoot.parentNode;
            checkAttributeStringCoercion(name, 'name');
            var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
            for(var i = 0; i < group.length; i++){
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) continue;
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
            }
        }
    }
    function setDefaultValue(node, type, value) {
        if (type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) node.defaultValue = toString(node._wrapperState.initialValue);
            else if (node.defaultValue !== toString(value)) node.defaultValue = toString(value);
        }
    }
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;
    var didWarnInvalidInnerHTML = false;
    function validateProps(element, props) {
        if (props.value == null) {
            if (typeof props.children === 'object' && props.children !== null) React.Children.forEach(props.children, function(child) {
                if (child == null) return;
                if (typeof child === 'string' || typeof child === 'number') return;
                if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                }
            });
            else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
            }
        }
        if (props.selected != null && !didWarnSelectedSetOnOption) {
            error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
            didWarnSelectedSetOnOption = true;
        }
    }
    function postMountWrapper$1(element, props) {
        if (props.value != null) element.setAttribute('value', toString(getToStringValue(props.value)));
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
        return isArrayImpl(a);
    }
    var didWarnValueDefaultValue$1;
    didWarnValueDefaultValue$1 = false;
    function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();
        if (ownerName) return '\n\nCheck the render method of `' + ownerName + '`.';
        return '';
    }
    var valuePropNames = [
        'value',
        'defaultValue'
    ];
    function checkSelectPropTypes(props) {
        checkControlledValueProps('select', props);
        for(var i = 0; i < valuePropNames.length; i++){
            var propName = valuePropNames[i];
            if (props[propName] == null) continue;
            var propNameIsArray = isArray(props[propName]);
            if (props.multiple && !propNameIsArray) error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
            else if (!props.multiple && propNameIsArray) error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
        }
    }
    function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options;
        if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for(var i = 0; i < selectedValues.length; i++)selectedValue['$' + selectedValues[i]] = true;
            for(var _i = 0; _i < options.length; _i++){
                var selected = selectedValue.hasOwnProperty('$' + options[_i].value);
                if (options[_i].selected !== selected) options[_i].selected = selected;
                if (selected && setDefaultSelected) options[_i].defaultSelected = true;
            }
        } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for(var _i2 = 0; _i2 < options.length; _i2++){
                if (options[_i2].value === _selectedValue) {
                    options[_i2].selected = true;
                    if (setDefaultSelected) options[_i2].defaultSelected = true;
                    return;
                }
                if (defaultSelected === null && !options[_i2].disabled) defaultSelected = options[_i2];
            }
            if (defaultSelected !== null) defaultSelected.selected = true;
        }
    }
    function getHostProps$1(element, props) {
        return assign({}, props, {
            value: undefined
        });
    }
    function initWrapperState$1(element, props) {
        var node = element;
        checkSelectPropTypes(props);
        node._wrapperState = {
            wasMultiple: !!props.multiple
        };
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
            error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
            didWarnValueDefaultValue$1 = true;
        }
    }
    function postMountWrapper$2(element, props) {
        var node = element;
        node.multiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
    }
    function postUpdateWrapper(element, props) {
        var node = element;
        var wasMultiple = node._wrapperState.wasMultiple;
        node._wrapperState.wasMultiple = !!props.multiple;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
        else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) updateOptions(node, !!props.multiple, props.defaultValue, true);
            else updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
    }
    function restoreControlledState$1(element, props) {
        var node = element;
        var value = props.value;
        if (value != null) updateOptions(node, !!props.multiple, value, false);
    }
    var didWarnValDefaultVal = false;
    function getHostProps$2(element, props) {
        var node = element;
        if (props.dangerouslySetInnerHTML != null) throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');
        var hostProps = assign({}, props, {
            value: undefined,
            defaultValue: undefined,
            children: toString(node._wrapperState.initialValue)
        });
        return hostProps;
    }
    function initWrapperState$2(element, props) {
        var node = element;
        checkControlledValueProps('textarea', props);
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
            error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || 'A component');
            didWarnValDefaultVal = true;
        }
        var initialValue = props.value;
        if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                if (defaultValue != null) throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');
                if (isArray(children)) {
                    if (children.length > 1) throw new Error('<textarea> can only have at most one child.');
                    children = children[0];
                }
                defaultValue = children;
            }
            if (defaultValue == null) defaultValue = '';
            initialValue = defaultValue;
        }
        node._wrapperState = {
            initialValue: getToStringValue(initialValue)
        };
    }
    function updateWrapper$1(element, props) {
        var node = element;
        var value = getToStringValue(props.value);
        var defaultValue = getToStringValue(props.defaultValue);
        if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) node.value = newValue;
            if (props.defaultValue == null && node.defaultValue !== newValue) node.defaultValue = newValue;
        }
        if (defaultValue != null) node.defaultValue = toString(defaultValue);
    }
    function postMountWrapper$3(element, props) {
        var node = element;
        var textContent = node.textContent;
        if (textContent === node._wrapperState.initialValue) {
            if (textContent !== '' && textContent !== null) node.value = textContent;
        }
    }
    function restoreControlledState$2(element, props) {
        updateWrapper$1(element, props);
    }
    var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    function getIntrinsicNamespace(type) {
        switch(type){
            case 'svg':
                return SVG_NAMESPACE;
            case 'math':
                return MATH_NAMESPACE;
            default:
                return HTML_NAMESPACE;
        }
    }
    function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) return getIntrinsicNamespace(type);
        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') return HTML_NAMESPACE;
        return parentNamespace;
    }
    var createMicrosoftUnsafeLocalFunction = function(func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) return function(arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
            });
        };
        else return func;
    };
    var reusableSVGContainer;
    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
        if (node.namespaceURI === SVG_NAMESPACE) {
            if (!('innerHTML' in node)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement('div');
                reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
                var svgNode = reusableSVGContainer.firstChild;
                while(node.firstChild)node.removeChild(node.firstChild);
                while(svgNode.firstChild)node.appendChild(svgNode.firstChild);
                return;
            }
        }
        node.innerHTML = html;
    });
    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    var setTextContent = function(node, text) {
        if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
            }
        }
        node.textContent = text;
    };
    var shorthandToLonghand = {
        animation: [
            'animationDelay',
            'animationDirection',
            'animationDuration',
            'animationFillMode',
            'animationIterationCount',
            'animationName',
            'animationPlayState',
            'animationTimingFunction'
        ],
        background: [
            'backgroundAttachment',
            'backgroundClip',
            'backgroundColor',
            'backgroundImage',
            'backgroundOrigin',
            'backgroundPositionX',
            'backgroundPositionY',
            'backgroundRepeat',
            'backgroundSize'
        ],
        backgroundPosition: [
            'backgroundPositionX',
            'backgroundPositionY'
        ],
        border: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth',
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth',
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth',
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth',
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderBlockEnd: [
            'borderBlockEndColor',
            'borderBlockEndStyle',
            'borderBlockEndWidth'
        ],
        borderBlockStart: [
            'borderBlockStartColor',
            'borderBlockStartStyle',
            'borderBlockStartWidth'
        ],
        borderBottom: [
            'borderBottomColor',
            'borderBottomStyle',
            'borderBottomWidth'
        ],
        borderColor: [
            'borderBottomColor',
            'borderLeftColor',
            'borderRightColor',
            'borderTopColor'
        ],
        borderImage: [
            'borderImageOutset',
            'borderImageRepeat',
            'borderImageSlice',
            'borderImageSource',
            'borderImageWidth'
        ],
        borderInlineEnd: [
            'borderInlineEndColor',
            'borderInlineEndStyle',
            'borderInlineEndWidth'
        ],
        borderInlineStart: [
            'borderInlineStartColor',
            'borderInlineStartStyle',
            'borderInlineStartWidth'
        ],
        borderLeft: [
            'borderLeftColor',
            'borderLeftStyle',
            'borderLeftWidth'
        ],
        borderRadius: [
            'borderBottomLeftRadius',
            'borderBottomRightRadius',
            'borderTopLeftRadius',
            'borderTopRightRadius'
        ],
        borderRight: [
            'borderRightColor',
            'borderRightStyle',
            'borderRightWidth'
        ],
        borderStyle: [
            'borderBottomStyle',
            'borderLeftStyle',
            'borderRightStyle',
            'borderTopStyle'
        ],
        borderTop: [
            'borderTopColor',
            'borderTopStyle',
            'borderTopWidth'
        ],
        borderWidth: [
            'borderBottomWidth',
            'borderLeftWidth',
            'borderRightWidth',
            'borderTopWidth'
        ],
        columnRule: [
            'columnRuleColor',
            'columnRuleStyle',
            'columnRuleWidth'
        ],
        columns: [
            'columnCount',
            'columnWidth'
        ],
        flex: [
            'flexBasis',
            'flexGrow',
            'flexShrink'
        ],
        flexFlow: [
            'flexDirection',
            'flexWrap'
        ],
        font: [
            'fontFamily',
            'fontFeatureSettings',
            'fontKerning',
            'fontLanguageOverride',
            'fontSize',
            'fontSizeAdjust',
            'fontStretch',
            'fontStyle',
            'fontVariant',
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition',
            'fontWeight',
            'lineHeight'
        ],
        fontVariant: [
            'fontVariantAlternates',
            'fontVariantCaps',
            'fontVariantEastAsian',
            'fontVariantLigatures',
            'fontVariantNumeric',
            'fontVariantPosition'
        ],
        gap: [
            'columnGap',
            'rowGap'
        ],
        grid: [
            'gridAutoColumns',
            'gridAutoFlow',
            'gridAutoRows',
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        gridArea: [
            'gridColumnEnd',
            'gridColumnStart',
            'gridRowEnd',
            'gridRowStart'
        ],
        gridColumn: [
            'gridColumnEnd',
            'gridColumnStart'
        ],
        gridColumnGap: [
            'columnGap'
        ],
        gridGap: [
            'columnGap',
            'rowGap'
        ],
        gridRow: [
            'gridRowEnd',
            'gridRowStart'
        ],
        gridRowGap: [
            'rowGap'
        ],
        gridTemplate: [
            'gridTemplateAreas',
            'gridTemplateColumns',
            'gridTemplateRows'
        ],
        listStyle: [
            'listStyleImage',
            'listStylePosition',
            'listStyleType'
        ],
        margin: [
            'marginBottom',
            'marginLeft',
            'marginRight',
            'marginTop'
        ],
        marker: [
            'markerEnd',
            'markerMid',
            'markerStart'
        ],
        mask: [
            'maskClip',
            'maskComposite',
            'maskImage',
            'maskMode',
            'maskOrigin',
            'maskPositionX',
            'maskPositionY',
            'maskRepeat',
            'maskSize'
        ],
        maskPosition: [
            'maskPositionX',
            'maskPositionY'
        ],
        outline: [
            'outlineColor',
            'outlineStyle',
            'outlineWidth'
        ],
        overflow: [
            'overflowX',
            'overflowY'
        ],
        padding: [
            'paddingBottom',
            'paddingLeft',
            'paddingRight',
            'paddingTop'
        ],
        placeContent: [
            'alignContent',
            'justifyContent'
        ],
        placeItems: [
            'alignItems',
            'justifyItems'
        ],
        placeSelf: [
            'alignSelf',
            'justifySelf'
        ],
        textDecoration: [
            'textDecorationColor',
            'textDecorationLine',
            'textDecorationStyle'
        ],
        textEmphasis: [
            'textEmphasisColor',
            'textEmphasisStyle'
        ],
        transition: [
            'transitionDelay',
            'transitionDuration',
            'transitionProperty',
            'transitionTimingFunction'
        ],
        wordWrap: [
            'overflowWrap'
        ]
    };
    var isUnitlessNumber = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
    };
    function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    var prefixes = [
        'Webkit',
        'ms',
        'Moz',
        'O'
    ];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
        prefixes.forEach(function(prefix) {
            isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
        });
    });
    function dangerousStyleValue(name, value, isCustomProperty) {
        var isEmpty = value == null || typeof value === 'boolean' || value === '';
        if (isEmpty) return '';
        if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + 'px';
        checkCSSPropertyStringCoercion(value, name);
        return ('' + value).trim();
    }
    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    function hyphenateStyleName(name) {
        return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }
    var warnValidStyle = function() {};
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
    var msPattern$1 = /^-ms-/;
    var hyphenPattern = /-(.)/g;
    var badStyleValueWithSemicolonPattern = /;\s*$/;
    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;
    var warnedForInfinityValue = false;
    var camelize = function(string) {
        return string.replace(hyphenPattern, function(_, character) {
            return character.toUpperCase();
        });
    };
    var warnHyphenatedStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported style property %s. Did you mean %s?', name, camelize(name.replace(msPattern$1, 'ms-')));
    };
    var warnBadVendoredStyleName = function(name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) return;
        warnedStyleNames[name] = true;
        error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
    };
    var warnStyleValueWithSemicolon = function(name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) return;
        warnedStyleValues[value] = true;
        error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
    };
    var warnStyleValueIsNaN = function(name, value) {
        if (warnedForNaNValue) return;
        warnedForNaNValue = true;
        error('`NaN` is an invalid value for the `%s` css style property.', name);
    };
    var warnStyleValueIsInfinity = function(name, value) {
        if (warnedForInfinityValue) return;
        warnedForInfinityValue = true;
        error('`Infinity` is an invalid value for the `%s` css style property.', name);
    };
    warnValidStyle = function(name, value) {
        if (name.indexOf('-') > -1) warnHyphenatedStyleName(name);
        else if (badVendoredStyleNamePattern.test(name)) warnBadVendoredStyleName(name);
        else if (badStyleValueWithSemicolonPattern.test(value)) warnStyleValueWithSemicolon(name, value);
        if (typeof value === 'number') {
            if (isNaN(value)) warnStyleValueIsNaN(name, value);
            else if (!isFinite(value)) warnStyleValueIsInfinity(name, value);
        }
    };
    var warnValidStyle$1 = warnValidStyle;
    function createDangerousStringForStyles(styles) {
        var serialized = '';
        var delimiter = '';
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var styleValue = styles[styleName];
            if (styleValue != null) {
                var isCustomProperty = styleName.indexOf('--') === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ';';
            }
        }
        return serialized || null;
    }
    function setValueForStyles(node, styles) {
        var style = node.style;
        for(var styleName in styles){
            if (!styles.hasOwnProperty(styleName)) continue;
            var isCustomProperty = styleName.indexOf('--') === 0;
            if (!isCustomProperty) warnValidStyle$1(styleName, styles[styleName]);
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === 'float') styleName = 'cssFloat';
            if (isCustomProperty) style.setProperty(styleName, styleValue);
            else style[styleName] = styleValue;
        }
    }
    function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === '';
    }
    function expandShorthandMap(styles) {
        var expanded = {};
        for(var key in styles){
            var longhands = shorthandToLonghand[key] || [
                key
            ];
            for(var i = 0; i < longhands.length; i++)expanded[longhands[i]] = key;
        }
        return expanded;
    }
    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
        if (!nextStyles) return;
        var expandedUpdates = expandShorthandMap(styleUpdates);
        var expandedStyles = expandShorthandMap(nextStyles);
        var warnedAbout = {};
        for(var key in expandedUpdates){
            var originalKey = expandedUpdates[key];
            var correctOriginalKey = expandedStyles[key];
            if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + ',' + correctOriginalKey;
                if (warnedAbout[warningKey]) continue;
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
            }
        }
    }
    var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
    };
    var voidElementTags = assign({
        menuitem: true
    }, omittedCloseTags);
    var HTML = '__html';
    function assertValidProps(tag, props) {
        if (!props) return;
        if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) throw new Error(tag + " is a void element tag and must neither have `children` nor " + 'use `dangerouslySetInnerHTML`.');
        }
        if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');
            if (typeof props.dangerouslySetInnerHTML !== 'object' || !(HTML in props.dangerouslySetInnerHTML)) throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
        if (props.style != null && typeof props.style !== 'object') throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
    }
    function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) return typeof props.is === 'string';
        switch(tagName){
            case 'annotation-xml':
            case 'color-profile':
            case 'font-face':
            case 'font-face-src':
            case 'font-face-uri':
            case 'font-face-format':
            case 'font-face-name':
            case 'missing-glyph':
                return false;
            default:
                return true;
        }
    }
    var possibleStandardNames = {
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        imagesizes: 'imageSizes',
        imagesrcset: 'imageSrcSet',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
        'aria-current': 0,
        'aria-description': 0,
        'aria-details': 0,
        'aria-disabled': 0,
        'aria-hidden': 0,
        'aria-invalid': 0,
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    function validateProperty(tagName, name) {
        if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) return true;
        if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase();
            var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
            if (correctName == null) {
                error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
                warnedProperties[name] = true;
                return true;
            }
            if (name !== correctName) {
                error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
                warnedProperties[name] = true;
                return true;
            }
        }
        if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase();
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
            if (standardName == null) {
                warnedProperties[name] = true;
                return false;
            }
            if (name !== standardName) {
                error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties[name] = true;
                return true;
            }
        }
        return true;
    }
    function warnInvalidARIAProps(type, props) {
        var invalidProps = [];
        for(var key in props){
            var isValid = validateProperty(type, key);
            if (!isValid) invalidProps.push(key);
        }
        var unknownPropString = invalidProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (invalidProps.length === 1) error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
        else if (invalidProps.length > 1) error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
    }
    function validateProperties(type, props) {
        if (isCustomComponent(type, props)) return;
        warnInvalidARIAProps(type, props);
    }
    var didWarnValueNull = false;
    function validateProperties$1(type, props) {
        if (type !== 'input' && type !== 'textarea' && type !== 'select') return;
        if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true;
            if (type === 'select' && props.multiple) error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
            else error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
        }
    }
    var validateProperty$1 = function() {};
    var warnedProperties$1 = {};
    var EVENT_NAME_REGEX = /^on./;
    var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
    var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
        if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) return true;
        var lowerCasedName = name.toLowerCase();
        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
            error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (eventRegistry != null) {
            var registrationNameDependencies = eventRegistry.registrationNameDependencies, possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
            if (registrationNameDependencies.hasOwnProperty(name)) return true;
            var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;
            if (registrationName != null) {
                error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
                warnedProperties$1[name] = true;
                return true;
            }
            if (EVENT_NAME_REGEX.test(name)) {
                error('Unknown event handler property `%s`. It will be ignored.', name);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (EVENT_NAME_REGEX.test(name)) {
            if (INVALID_EVENT_NAME_REGEX.test(name)) error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        if (rARIA$1.test(name) || rARIACamel$1.test(name)) return true;
        if (lowerCasedName === 'innerhtml') {
            error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'aria') {
            error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
            warnedProperties$1[name] = true;
            return true;
        }
        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
            error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'number' && isNaN(value)) {
            error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
            warnedProperties$1[name] = true;
            return true;
        }
        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName];
            if (standardName !== name) {
                error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
                warnedProperties$1[name] = true;
                return true;
            }
        } else if (!isReserved && name !== lowerCasedName) {
            error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
            warnedProperties$1[name] = true;
            return true;
        }
        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            if (value) error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
            else error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
            warnedProperties$1[name] = true;
            return true;
        }
        if (isReserved) return true;
        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
            warnedProperties$1[name] = true;
            return false;
        }
        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
            error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
            warnedProperties$1[name] = true;
            return true;
        }
        return true;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
        var unknownProps = [];
        for(var key in props){
            var isValid = validateProperty$1(type, key, props[key], eventRegistry);
            if (!isValid) unknownProps.push(key);
        }
        var unknownPropString = unknownProps.map(function(prop) {
            return '`' + prop + '`';
        }).join(', ');
        if (unknownProps.length === 1) error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
        else if (unknownProps.length > 1) error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
    };
    function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) return;
        warnUnknownProperties(type, props, eventRegistry);
    }
    var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
    var IS_NON_DELEGATED = 2;
    var IS_CAPTURE_PHASE = 4;
    var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
    var currentReplayingEvent = null;
    function setReplayingEvent(event) {
        if (currentReplayingEvent !== null) error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = event;
    }
    function resetReplayingEvent() {
        if (currentReplayingEvent === null) error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
        currentReplayingEvent = null;
    }
    function isReplayingEvent(event) {
        return event === currentReplayingEvent;
    }
    function getEventTarget(nativeEvent) {
        var target = nativeEvent.target || nativeEvent.srcElement || window;
        if (target.correspondingUseElement) target = target.correspondingUseElement;
        return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;
    function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (!internalInstance) return;
        if (typeof restoreImpl !== 'function') throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
        var stateNode = internalInstance.stateNode;
        if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
        }
    }
    function setRestoreImplementation(impl) {
        restoreImpl = impl;
    }
    function enqueueStateRestore(target) {
        if (restoreTarget) {
            if (restoreQueue) restoreQueue.push(target);
            else restoreQueue = [
                target
            ];
        } else restoreTarget = target;
    }
    function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null;
    }
    function restoreStateIfNeeded() {
        if (!restoreTarget) return;
        var target = restoreTarget;
        var queuedTargets = restoreQueue;
        restoreTarget = null;
        restoreQueue = null;
        restoreStateOfTarget(target);
        if (queuedTargets) for(var i = 0; i < queuedTargets.length; i++)restoreStateOfTarget(queuedTargets[i]);
    }
    var batchedUpdatesImpl = function(fn, bookkeeping) {
        return fn(bookkeeping);
    };
    var flushSyncImpl = function() {};
    var isInsideEventHandler = false;
    function finishEventHandler() {
        var controlledComponentsHavePendingUpdates = needsStateRestore();
        if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
        }
    }
    function batchedUpdates(fn, a, b) {
        if (isInsideEventHandler) return fn(a, b);
        isInsideEventHandler = true;
        try {
            return batchedUpdatesImpl(fn, a, b);
        } finally{
            isInsideEventHandler = false;
            finishEventHandler();
        }
    }
    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
        batchedUpdatesImpl = _batchedUpdatesImpl;
        flushSyncImpl = _flushSyncImpl;
    }
    function isInteractive(tag) {
        return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }
    function shouldPreventMouseEvent(name, type, props) {
        switch(name){
            case 'onClick':
            case 'onClickCapture':
            case 'onDoubleClick':
            case 'onDoubleClickCapture':
            case 'onMouseDown':
            case 'onMouseDownCapture':
            case 'onMouseMove':
            case 'onMouseMoveCapture':
            case 'onMouseUp':
            case 'onMouseUpCapture':
            case 'onMouseEnter':
                return !!(props.disabled && isInteractive(type));
            default:
                return false;
        }
    }
    function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (stateNode === null) return null;
        var props = getFiberCurrentPropsFromNode(stateNode);
        if (props === null) return null;
        var listener = props[registrationName];
        if (shouldPreventMouseEvent(registrationName, inst.type, props)) return null;
        if (listener && typeof listener !== 'function') throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
        return listener;
    }
    var passiveBrowserEventsSupported = false;
    if (canUseDOM) try {
        var options = {};
        Object.defineProperty(options, 'passive', {
            get: function() {
                passiveBrowserEventsSupported = true;
            }
        });
        window.addEventListener('test', options, options);
        window.removeEventListener('test', options, options);
    } catch (e) {
        passiveBrowserEventsSupported = false;
    }
    function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
        var funcArgs = Array.prototype.slice.call(arguments, 3);
        try {
            func.apply(context, funcArgs);
        } catch (error) {
            this.onError(error);
        }
    }
    var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
    if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');
        invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
            if (typeof document === 'undefined' || document === null) throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
            var evt = document.createEvent('Event');
            var didCall = false;
            var didError = true;
            var windowEvent = window.event;
            var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');
            function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback, false);
                if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) window.event = windowEvent;
            }
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            function callCallback() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
            }
            var error;
            var didSetError = false;
            var isCrossOriginError = false;
            function handleWindowError(event) {
                error = event.error;
                didSetError = true;
                if (error === null && event.colno === 0 && event.lineno === 0) isCrossOriginError = true;
                if (event.defaultPrevented) {
                    if (error != null && typeof error === 'object') try {
                        error._suppressLogging = true;
                    } catch (inner) {}
                }
            }
            var evtType = "react-" + (name ? name : 'invokeguardedcallback');
            window.addEventListener('error', handleWindowError);
            fakeNode.addEventListener(evtType, callCallback, false);
            evt.initEvent(evtType, false, false);
            fakeNode.dispatchEvent(evt);
            if (windowEventDescriptor) Object.defineProperty(window, 'event', windowEventDescriptor);
            if (didCall && didError) {
                if (!didSetError) error = new Error("An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the \"Pause on exceptions\" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.");
                else if (isCrossOriginError) error = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                this.onError(error);
            }
            window.removeEventListener('error', handleWindowError);
            if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
            }
        };
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
    var hasError = false;
    var caughtError = null;
    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
        onError: function(error) {
            hasError = true;
            caughtError = error;
        }
    };
    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false;
        caughtError = null;
        invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
        invokeGuardedCallback.apply(this, arguments);
        if (hasError) {
            var error = clearCaughtError();
            if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error;
            }
        }
    }
    function rethrowCaughtError() {
        if (hasRethrowError) {
            var error = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error;
        }
    }
    function hasCaughtError() {
        return hasError;
    }
    function clearCaughtError() {
        if (hasError) {
            var error = caughtError;
            hasError = false;
            caughtError = null;
            return error;
        } else throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
    }
    function get(key) {
        return key._reactInternals;
    }
    function has(key) {
        return key._reactInternals !== undefined;
    }
    function set(key, value) {
        key._reactInternals = value;
    }
    var NoFlags = 0;
    var PerformedWork = 1;
    var Placement = 2;
    var Update = 4;
    var ChildDeletion = 16;
    var ContentReset = 32;
    var Callback = 64;
    var DidCapture = 128;
    var ForceClientRender = 256;
    var Ref = 512;
    var Snapshot = 1024;
    var Passive = 2048;
    var Hydrating = 4096;
    var Visibility = 8192;
    var StoreConsistency = 16384;
    var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
    var HostEffectMask = 32767;
    var Incomplete = 32768;
    var ShouldCapture = 65536;
    var ForceUpdateForLegacySuspense = 131072;
    var Forked = 1048576;
    var RefStatic = 2097152;
    var LayoutStatic = 4194304;
    var PassiveStatic = 8388608;
    var MountLayoutDev = 16777216;
    var MountPassiveDev = 33554432;
    var BeforeMutationMask = Update | Snapshot | 0;
    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
    var LayoutMask = Update | Callback | Ref | Visibility;
    var PassiveMask = Passive | ChildDeletion;
    var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    function getNearestMountedFiber(fiber) {
        var node = fiber;
        var nearestMounted = fiber;
        if (!fiber.alternate) {
            var nextNode = node;
            do {
                node = nextNode;
                if ((node.flags & (Placement | Hydrating)) !== NoFlags) nearestMounted = node.return;
                nextNode = node.return;
            }while (nextNode)
        } else while(node.return)node = node.return;
        if (node.tag === HostRoot) return nearestMounted;
        return null;
    }
    function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
                var current = fiber.alternate;
                if (current !== null) suspenseState = current.memoizedState;
            }
            if (suspenseState !== null) return suspenseState.dehydrated;
        }
        return null;
    }
    function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
    }
    function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber;
    }
    function isMounted(component) {
        var owner = ReactCurrentOwner.current;
        if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner;
            var instance = ownerFiber.stateNode;
            if (!instance._warnedAboutRefsInRender) error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || 'A component');
            instance._warnedAboutRefsInRender = true;
        }
        var fiber = get(component);
        if (!fiber) return false;
        return getNearestMountedFiber(fiber) === fiber;
    }
    function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber) throw new Error('Unable to find node on an unmounted component.');
    }
    function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) throw new Error('Unable to find node on an unmounted component.');
            if (nearestMounted !== fiber) return null;
            return fiber;
        }
        var a = fiber;
        var b = alternate;
        while(true){
            var parentA = a.return;
            if (parentA === null) break;
            var parentB = parentA.alternate;
            if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                    a = b = nextParent;
                    continue;
                }
                break;
            }
            if (parentA.child === parentB.child) {
                var child = parentA.child;
                while(child){
                    if (child === a) {
                        assertIsMounted(parentA);
                        return fiber;
                    }
                    if (child === b) {
                        assertIsMounted(parentA);
                        return alternate;
                    }
                    child = child.sibling;
                }
                throw new Error('Unable to find node on an unmounted component.');
            }
            if (a.return !== b.return) {
                a = parentA;
                b = parentB;
            } else {
                var didFindChild = false;
                var _child = parentA.child;
                while(_child){
                    if (_child === a) {
                        didFindChild = true;
                        a = parentA;
                        b = parentB;
                        break;
                    }
                    if (_child === b) {
                        didFindChild = true;
                        b = parentA;
                        a = parentB;
                        break;
                    }
                    _child = _child.sibling;
                }
                if (!didFindChild) {
                    _child = parentB.child;
                    while(_child){
                        if (_child === a) {
                            didFindChild = true;
                            a = parentB;
                            b = parentA;
                            break;
                        }
                        if (_child === b) {
                            didFindChild = true;
                            b = parentB;
                            a = parentA;
                            break;
                        }
                        _child = _child.sibling;
                    }
                    if (!didFindChild) throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
            }
            if (a.alternate !== b) throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (a.tag !== HostRoot) throw new Error('Unable to find node on an unmounted component.');
        if (a.stateNode.current === a) return fiber;
        return alternate;
    }
    function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
    }
    function findCurrentHostFiberImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) return match;
            child = child.sibling;
        }
        return null;
    }
    function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent);
        return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
    }
    function findCurrentHostFiberWithNoPortalsImpl(node) {
        if (node.tag === HostComponent || node.tag === HostText) return node;
        var child = node.child;
        while(child !== null){
            if (child.tag !== HostPortal) {
                var match = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match !== null) return match;
            }
            child = child.sibling;
        }
        return null;
    }
    var scheduleCallback = Scheduler.unstable_scheduleCallback;
    var cancelCallback = Scheduler.unstable_cancelCallback;
    var shouldYield = Scheduler.unstable_shouldYield;
    var requestPaint = Scheduler.unstable_requestPaint;
    var now = Scheduler.unstable_now;
    var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
    var NormalPriority = Scheduler.unstable_NormalPriority;
    var LowPriority = Scheduler.unstable_LowPriority;
    var IdlePriority = Scheduler.unstable_IdlePriority;
    var unstable_yieldValue = Scheduler.unstable_yieldValue;
    var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
    var rendererID = null;
    var injectedHook = null;
    var injectedProfilingHooks = null;
    var hasLoggedError = false;
    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
    function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') return false;
        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (hook.isDisabled) return true;
        if (!hook.supportsFiber) {
            error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            return true;
        }
        try {
            if (enableSchedulingProfiler) internals = assign({}, internals, {
                getLaneLabelMap: getLaneLabelMap,
                injectProfilingHooks: injectProfilingHooks
            });
            rendererID = hook.inject(internals);
            injectedHook = hook;
        } catch (err) {
            error('React instrumentation encountered an error: %s.', err);
        }
        if (hook.checkDCE) return true;
        else return false;
    }
    function onScheduleRoot(root, children) {
        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') try {
            injectedHook.onScheduleFiberRoot(rendererID, root, children);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitRoot(root, eventPriority) {
        if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') try {
            var didError = (root.current.flags & DidCapture) === DidCapture;
            if (enableProfilerTimer) {
                var schedulerPriority;
                switch(eventPriority){
                    case DiscreteEventPriority:
                        schedulerPriority = ImmediatePriority;
                        break;
                    case ContinuousEventPriority:
                        schedulerPriority = UserBlockingPriority;
                        break;
                    case DefaultEventPriority:
                        schedulerPriority = NormalPriority;
                        break;
                    case IdleEventPriority:
                        schedulerPriority = IdlePriority;
                        break;
                    default:
                        schedulerPriority = NormalPriority;
                        break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
            } else injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onPostCommitRoot(root) {
        if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') try {
            injectedHook.onPostCommitFiberRoot(rendererID, root);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function onCommitUnmount(fiber) {
        if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function setIsStrictModeForDevtools(newIsStrictMode) {
        if (typeof unstable_yieldValue === 'function') {
            unstable_setDisableYieldValue(newIsStrictMode);
            setSuppressWarning(newIsStrictMode);
        }
        if (injectedHook && typeof injectedHook.setStrictMode === 'function') try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
        } catch (err) {
            if (!hasLoggedError) {
                hasLoggedError = true;
                error('React instrumentation encountered an error: %s', err);
            }
        }
    }
    function injectProfilingHooks(profilingHooks) {
        injectedProfilingHooks = profilingHooks;
    }
    function getLaneLabelMap() {
        var map = new Map();
        var lane = 1;
        for(var index = 0; index < TotalLanes; index++){
            var label = getLabelForLane(lane);
            map.set(lane, label);
            lane *= 2;
        }
        return map;
    }
    function markCommitStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') injectedProfilingHooks.markCommitStarted(lanes);
    }
    function markCommitStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') injectedProfilingHooks.markCommitStopped();
    }
    function markComponentRenderStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') injectedProfilingHooks.markComponentRenderStarted(fiber);
    }
    function markComponentRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') injectedProfilingHooks.markComponentRenderStopped();
    }
    function markComponentPassiveEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
    }
    function markComponentPassiveEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectMountStopped();
    }
    function markComponentPassiveEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
    }
    function markComponentPassiveEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
    }
    function markComponentLayoutEffectMountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
    }
    function markComponentLayoutEffectMountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectMountStopped();
    }
    function markComponentLayoutEffectUnmountStarted(fiber) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
    }
    function markComponentLayoutEffectUnmountStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
    }
    function markComponentErrored(fiber, thrownValue, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
    }
    function markComponentSuspended(fiber, wakeable, lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
    }
    function markLayoutEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') injectedProfilingHooks.markLayoutEffectsStarted(lanes);
    }
    function markLayoutEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') injectedProfilingHooks.markLayoutEffectsStopped();
    }
    function markPassiveEffectsStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') injectedProfilingHooks.markPassiveEffectsStarted(lanes);
    }
    function markPassiveEffectsStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') injectedProfilingHooks.markPassiveEffectsStopped();
    }
    function markRenderStarted(lanes) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') injectedProfilingHooks.markRenderStarted(lanes);
    }
    function markRenderYielded() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') injectedProfilingHooks.markRenderYielded();
    }
    function markRenderStopped() {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') injectedProfilingHooks.markRenderStopped();
    }
    function markRenderScheduled(lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') injectedProfilingHooks.markRenderScheduled(lane);
    }
    function markForceUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
    }
    function markStateUpdateScheduled(fiber, lane) {
        if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
    }
    var NoMode = 0;
    var ConcurrentMode = 1;
    var ProfileMode = 2;
    var StrictLegacyMode = 8;
    var StrictEffectsMode = 16;
    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
    var log = Math.log;
    var LN2 = Math.LN2;
    function clz32Fallback(x) {
        var asUint = x >>> 0;
        if (asUint === 0) return 32;
        return 31 - (log(asUint) / LN2 | 0) | 0;
    }
    var TotalLanes = 31;
    var NoLanes = 0;
    var NoLane = 0;
    var SyncLane = 1;
    var InputContinuousHydrationLane = 2;
    var InputContinuousLane = 4;
    var DefaultHydrationLane = 8;
    var DefaultLane = 16;
    var TransitionHydrationLane = 32;
    var TransitionLanes = 4194240;
    var TransitionLane1 = 64;
    var TransitionLane2 = 128;
    var TransitionLane3 = 256;
    var TransitionLane4 = 512;
    var TransitionLane5 = 1024;
    var TransitionLane6 = 2048;
    var TransitionLane7 = 4096;
    var TransitionLane8 = 8192;
    var TransitionLane9 = 16384;
    var TransitionLane10 = 32768;
    var TransitionLane11 = 65536;
    var TransitionLane12 = 131072;
    var TransitionLane13 = 262144;
    var TransitionLane14 = 524288;
    var TransitionLane15 = 1048576;
    var TransitionLane16 = 2097152;
    var RetryLanes = 130023424;
    var RetryLane1 = 4194304;
    var RetryLane2 = 8388608;
    var RetryLane3 = 16777216;
    var RetryLane4 = 33554432;
    var RetryLane5 = 67108864;
    var SomeRetryLane = RetryLane1;
    var SelectiveHydrationLane = 134217728;
    var NonIdleLanes = 268435455;
    var IdleHydrationLane = 268435456;
    var IdleLane = 536870912;
    var OffscreenLane = 1073741824;
    function getLabelForLane(lane) {
        if (lane & SyncLane) return 'Sync';
        if (lane & InputContinuousHydrationLane) return 'InputContinuousHydration';
        if (lane & InputContinuousLane) return 'InputContinuous';
        if (lane & DefaultHydrationLane) return 'DefaultHydration';
        if (lane & DefaultLane) return 'Default';
        if (lane & TransitionHydrationLane) return 'TransitionHydration';
        if (lane & TransitionLanes) return 'Transition';
        if (lane & RetryLanes) return 'Retry';
        if (lane & SelectiveHydrationLane) return 'SelectiveHydration';
        if (lane & IdleHydrationLane) return 'IdleHydration';
        if (lane & IdleLane) return 'Idle';
        if (lane & OffscreenLane) return 'Offscreen';
    }
    var NoTimestamp = -1;
    var nextTransitionLane = TransitionLane1;
    var nextRetryLane = RetryLane1;
    function getHighestPriorityLanes(lanes) {
        switch(getHighestPriorityLane(lanes)){
            case SyncLane:
                return SyncLane;
            case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
            case InputContinuousLane:
                return InputContinuousLane;
            case DefaultHydrationLane:
                return DefaultHydrationLane;
            case DefaultLane:
                return DefaultLane;
            case TransitionHydrationLane:
                return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return lanes & RetryLanes;
            case SelectiveHydrationLane:
                return SelectiveHydrationLane;
            case IdleHydrationLane:
                return IdleHydrationLane;
            case IdleLane:
                return IdleLane;
            case OffscreenLane:
                return OffscreenLane;
            default:
                error('Should have found matching lanes. This is a bug in React.');
                return lanes;
        }
    }
    function getNextLanes(root, wipLanes) {
        var pendingLanes = root.pendingLanes;
        if (pendingLanes === NoLanes) return NoLanes;
        var nextLanes = NoLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
        if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
            }
        } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(unblockedLanes);
            else if (pingedLanes !== NoLanes) nextLanes = getHighestPriorityLanes(pingedLanes);
        }
        if (nextLanes === NoLanes) return NoLanes;
        if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) return wipLanes;
        }
        if ((nextLanes & InputContinuousLane) !== NoLanes) nextLanes |= pendingLanes & DefaultLane;
        var entangledLanes = root.entangledLanes;
        if (entangledLanes !== NoLanes) {
            var entanglements = root.entanglements;
            var lanes = nextLanes & entangledLanes;
            while(lanes > 0){
                var index = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index;
                nextLanes |= entanglements[index];
                lanes &= ~lane;
            }
        }
        return nextLanes;
    }
    function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes;
        var mostRecentEventTime = NoTimestamp;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var eventTime = eventTimes[index];
            if (eventTime > mostRecentEventTime) mostRecentEventTime = eventTime;
            lanes &= ~lane;
        }
        return mostRecentEventTime;
    }
    function computeExpirationTime(lane, currentTime) {
        switch(lane){
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
                return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
                return currentTime + 5000;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
                return NoTimestamp;
            default:
                error('Should have found matching lanes. This is a bug in React.');
                return NoTimestamp;
        }
    }
    function markStarvedLanesAsExpired(root, currentTime) {
        var pendingLanes = root.pendingLanes;
        var suspendedLanes = root.suspendedLanes;
        var pingedLanes = root.pingedLanes;
        var expirationTimes = root.expirationTimes;
        var lanes = pendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            var expirationTime = expirationTimes[index];
            if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) expirationTimes[index] = computeExpirationTime(lane, currentTime);
            } else if (expirationTime <= currentTime) root.expiredLanes |= lane;
            lanes &= ~lane;
        }
    }
    function getHighestPriorityPendingLanes(root) {
        return getHighestPriorityLanes(root.pendingLanes);
    }
    function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
        if (everythingButOffscreen !== NoLanes) return everythingButOffscreen;
        if (everythingButOffscreen & OffscreenLane) return OffscreenLane;
        return NoLanes;
    }
    function includesSyncLane(lanes) {
        return (lanes & SyncLane) !== NoLanes;
    }
    function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes;
    }
    function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes;
    }
    function includesOnlyNonUrgentLanes(lanes) {
        var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
        return (lanes & UrgentLanes) === NoLanes;
    }
    function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes;
    }
    function includesBlockingLane(root, lanes) {
        var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
        return (lanes & SyncDefaultLanes) !== NoLanes;
    }
    function includesExpiredLane(root, lanes) {
        return (lanes & root.expiredLanes) !== NoLanes;
    }
    function isTransitionLane(lane) {
        return (lane & TransitionLanes) !== NoLanes;
    }
    function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        if ((nextTransitionLane & TransitionLanes) === NoLanes) nextTransitionLane = TransitionLane1;
        return lane;
    }
    function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        if ((nextRetryLane & RetryLanes) === NoLanes) nextRetryLane = RetryLane1;
        return lane;
    }
    function getHighestPriorityLane(lanes) {
        return lanes & -lanes;
    }
    function pickArbitraryLane(lanes) {
        return getHighestPriorityLane(lanes);
    }
    function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes);
    }
    function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane);
    }
    function includesSomeLane(a, b) {
        return (a & b) !== NoLanes;
    }
    function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset;
    }
    function mergeLanes(a, b) {
        return a | b;
    }
    function removeLanes(set, subset) {
        return set & ~subset;
    }
    function intersectLanes(a, b) {
        return a & b;
    }
    function laneToLanes(lane) {
        return lane;
    }
    function higherPriorityLane(a, b) {
        return a !== NoLane && a < b ? a : b;
    }
    function createLaneMap(initial) {
        var laneMap = [];
        for(var i = 0; i < TotalLanes; i++)laneMap.push(initial);
        return laneMap;
    }
    function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane;
        if (updateLane !== IdleLane) {
            root.suspendedLanes = NoLanes;
            root.pingedLanes = NoLanes;
        }
        var eventTimes = root.eventTimes;
        var index = laneToIndex(updateLane);
        eventTimes[index] = eventTime;
    }
    function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes;
        root.pingedLanes &= ~suspendedLanes;
        var expirationTimes = root.expirationTimes;
        var lanes = suspendedLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes;
    }
    function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
        root.pendingLanes = remainingLanes;
        root.suspendedLanes = NoLanes;
        root.pingedLanes = NoLanes;
        root.expiredLanes &= remainingLanes;
        root.mutableReadLanes &= remainingLanes;
        root.entangledLanes &= remainingLanes;
        var entanglements = root.entanglements;
        var eventTimes = root.eventTimes;
        var expirationTimes = root.expirationTimes;
        var lanes = noLongerPendingLanes;
        while(lanes > 0){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            entanglements[index] = NoLanes;
            eventTimes[index] = NoTimestamp;
            expirationTimes[index] = NoTimestamp;
            lanes &= ~lane;
        }
    }
    function markRootEntangled(root, entangledLanes) {
        var rootEntangledLanes = root.entangledLanes |= entangledLanes;
        var entanglements = root.entanglements;
        var lanes = rootEntangledLanes;
        while(lanes){
            var index = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index;
            if (lane & entangledLanes | entanglements[index] & entangledLanes) entanglements[index] |= entangledLanes;
            lanes &= ~lane;
        }
    }
    function getBumpedLaneForHydration(root, renderLanes) {
        var renderLane = getHighestPriorityLane(renderLanes);
        var lane;
        switch(renderLane){
            case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
            case DefaultLane:
                lane = DefaultHydrationLane;
                break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
                lane = TransitionHydrationLane;
                break;
            case IdleLane:
                lane = IdleHydrationLane;
                break;
            default:
                lane = NoLane;
                break;
        }
        if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) return NoLane;
        return lane;
    }
    function addFiberToLanesMap(root, fiber, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            updaters.add(fiber);
            lanes &= ~lane;
        }
    }
    function movePendingFibersToMemoized(root, lanes) {
        if (!isDevToolsPresent) return;
        var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
        var memoizedUpdaters = root.memoizedUpdaters;
        while(lanes > 0){
            var index = laneToIndex(lanes);
            var lane = 1 << index;
            var updaters = pendingUpdatersLaneMap[index];
            if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                    var alternate = fiber.alternate;
                    if (alternate === null || !memoizedUpdaters.has(alternate)) memoizedUpdaters.add(fiber);
                });
                updaters.clear();
            }
            lanes &= ~lane;
        }
    }
    function getTransitionsForLanes(root, lanes) {
        return null;
    }
    var DiscreteEventPriority = SyncLane;
    var ContinuousEventPriority = InputContinuousLane;
    var DefaultEventPriority = DefaultLane;
    var IdleEventPriority = IdleLane;
    var currentUpdatePriority = NoLane;
    function getCurrentUpdatePriority() {
        return currentUpdatePriority;
    }
    function setCurrentUpdatePriority(newPriority) {
        currentUpdatePriority = newPriority;
    }
    function runWithPriority(priority, fn) {
        var previousPriority = currentUpdatePriority;
        try {
            currentUpdatePriority = priority;
            return fn();
        } finally{
            currentUpdatePriority = previousPriority;
        }
    }
    function higherEventPriority(a, b) {
        return a !== 0 && a < b ? a : b;
    }
    function lowerEventPriority(a, b) {
        return a === 0 || a > b ? a : b;
    }
    function isHigherEventPriority(a, b) {
        return a !== 0 && a < b;
    }
    function lanesToEventPriority(lanes) {
        var lane = getHighestPriorityLane(lanes);
        if (!isHigherEventPriority(DiscreteEventPriority, lane)) return DiscreteEventPriority;
        if (!isHigherEventPriority(ContinuousEventPriority, lane)) return ContinuousEventPriority;
        if (includesNonIdleWork(lane)) return DefaultEventPriority;
        return IdleEventPriority;
    }
    function isRootDehydrated(root) {
        var currentState = root.current.memoizedState;
        return currentState.isDehydrated;
    }
    var _attemptSynchronousHydration;
    function setAttemptSynchronousHydration(fn) {
        _attemptSynchronousHydration = fn;
    }
    function attemptSynchronousHydration(fiber) {
        _attemptSynchronousHydration(fiber);
    }
    var attemptContinuousHydration;
    function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn;
    }
    var attemptHydrationAtCurrentPriority;
    function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn;
    }
    var getCurrentUpdatePriority$1;
    function setGetCurrentUpdatePriority(fn) {
        getCurrentUpdatePriority$1 = fn;
    }
    var attemptHydrationAtPriority;
    function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn;
    }
    var hasScheduledReplayAttempt = false;
    var queuedDiscreteEvents = [];
    var queuedFocus = null;
    var queuedDrag = null;
    var queuedMouse = null;
    var queuedPointers = new Map();
    var queuedPointerCaptures = new Map();
    var queuedExplicitHydrationTargets = [];
    var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput',
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit'
    ];
    function isDiscreteEventThatRequiresHydration(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1;
    }
    function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return {
            blockedOn: blockedOn,
            domEventName: domEventName,
            eventSystemFlags: eventSystemFlags,
            nativeEvent: nativeEvent,
            targetContainers: [
                targetContainer
            ]
        };
    }
    function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch(domEventName){
            case 'focusin':
            case 'focusout':
                queuedFocus = null;
                break;
            case 'dragenter':
            case 'dragleave':
                queuedDrag = null;
                break;
            case 'mouseover':
            case 'mouseout':
                queuedMouse = null;
                break;
            case 'pointerover':
            case 'pointerout':
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
        }
    }
    function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) attemptContinuousHydration(_fiber2);
            }
            return queuedEvent;
        }
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        var targetContainers = existingQueuedEvent.targetContainers;
        if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) targetContainers.push(targetContainer);
        return existingQueuedEvent;
    }
    function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch(domEventName){
            case 'focusin':
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
            case 'dragenter':
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
            case 'mouseover':
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
            case 'pointerover':
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
            case 'gotpointercapture':
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
        }
        return false;
    }
    function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) {
                        queuedTarget.blockedOn = instance;
                        attemptHydrationAtPriority(queuedTarget.priority, function() {
                            attemptHydrationAtCurrentPriority(nearestMounted);
                        });
                        return;
                    }
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) {
                        queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                        return;
                    }
                }
            }
        }
        queuedTarget.blockedOn = null;
    }
    function queueExplicitHydrationTarget(target) {
        var updatePriority = getCurrentUpdatePriority$1();
        var queuedTarget = {
            blockedOn: null,
            target: target,
            priority: updatePriority
        };
        var i = 0;
        for(; i < queuedExplicitHydrationTargets.length; i++){
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) break;
        }
        queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
        if (i === 0) attemptExplicitHydrationTarget(queuedTarget);
    }
    function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) return false;
        var targetContainers = queuedEvent.targetContainers;
        while(targetContainers.length > 0){
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
            } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) attemptContinuousHydration(_fiber3);
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
            }
            targetContainers.shift();
        }
        return true;
    }
    function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) map.delete(key);
    }
    function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) queuedFocus = null;
        if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) queuedDrag = null;
        if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) queuedMouse = null;
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
    }
    function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
        }
    }
    function retryIfBlockedOn(unblocked) {
        if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for(var i = 1; i < queuedDiscreteEvents.length; i++){
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) queuedEvent.blockedOn = null;
            }
        }
        if (queuedFocus !== null) scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        if (queuedDrag !== null) scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        if (queuedMouse !== null) scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        var unblock = function(queuedEvent) {
            return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        };
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for(var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++){
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) queuedTarget.blockedOn = null;
        }
        while(queuedExplicitHydrationTargets.length > 0){
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) break;
            else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) queuedExplicitHydrationTargets.shift();
            }
        }
    }
    var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
    var _enabled = true;
    function setEnabled(enabled) {
        _enabled = !!enabled;
    }
    function isEnabled() {
        return _enabled;
    }
    function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
        var eventPriority = getEventPriority(domEventName);
        var listenerWrapper;
        switch(eventPriority){
            case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
            case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
            case DefaultEventPriority:
            default:
                listenerWrapper = dispatchEvent;
                break;
        }
        return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
    }
    function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = null;
        try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
        }
    }
    function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (!_enabled) return;
        dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
    }
    function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
        if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
        }
        if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
        }
        clearIfContinuousEvent(domEventName, nativeEvent);
        if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while(blockedOn !== null){
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) attemptSynchronousHydration(fiber);
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                if (nextBlockedOn === blockedOn) break;
                blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) nativeEvent.stopPropagation();
            return;
        }
        dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
    }
    var return_targetInst = null;
    function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        return_targetInst = null;
        var nativeEventTarget = getEventTarget(nativeEvent);
        var targetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) targetInst = null;
            else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                    var instance = getSuspenseInstanceFromFiber(nearestMounted);
                    if (instance !== null) return instance;
                    targetInst = null;
                } else if (tag === HostRoot) {
                    var root = nearestMounted.stateNode;
                    if (isRootDehydrated(root)) return getContainerFromFiber(nearestMounted);
                    targetInst = null;
                } else if (nearestMounted !== targetInst) targetInst = null;
            }
        }
        return_targetInst = targetInst;
        return null;
    }
    function getEventPriority(domEventName) {
        switch(domEventName){
            case 'cancel':
            case 'click':
            case 'close':
            case 'contextmenu':
            case 'copy':
            case 'cut':
            case 'auxclick':
            case 'dblclick':
            case 'dragend':
            case 'dragstart':
            case 'drop':
            case 'focusin':
            case 'focusout':
            case 'input':
            case 'invalid':
            case 'keydown':
            case 'keypress':
            case 'keyup':
            case 'mousedown':
            case 'mouseup':
            case 'paste':
            case 'pause':
            case 'play':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointerup':
            case 'ratechange':
            case 'reset':
            case 'resize':
            case 'seeked':
            case 'submit':
            case 'touchcancel':
            case 'touchend':
            case 'touchstart':
            case 'volumechange':
            case 'change':
            case 'selectionchange':
            case 'textInput':
            case 'compositionstart':
            case 'compositionend':
            case 'compositionupdate':
            case 'beforeblur':
            case 'afterblur':
            case 'beforeinput':
            case 'blur':
            case 'fullscreenchange':
            case 'focus':
            case 'hashchange':
            case 'popstate':
            case 'select':
            case 'selectstart':
                return DiscreteEventPriority;
            case 'drag':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'mousemove':
            case 'mouseout':
            case 'mouseover':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'scroll':
            case 'toggle':
            case 'touchmove':
            case 'wheel':
            case 'mouseenter':
            case 'mouseleave':
            case 'pointerenter':
            case 'pointerleave':
                return ContinuousEventPriority;
            case 'message':
                var schedulerPriority = getCurrentPriorityLevel();
                switch(schedulerPriority){
                    case ImmediatePriority:
                        return DiscreteEventPriority;
                    case UserBlockingPriority:
                        return ContinuousEventPriority;
                    case NormalPriority:
                    case LowPriority:
                        return DefaultEventPriority;
                    case IdlePriority:
                        return IdleEventPriority;
                    default:
                        return DefaultEventPriority;
                }
            default:
                return DefaultEventPriority;
        }
    }
    function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false);
        return listener;
    }
    function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true);
        return listener;
    }
    function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            capture: true,
            passive: passive
        });
        return listener;
    }
    function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
        target.addEventListener(eventType, listener, {
            passive: passive
        });
        return listener;
    }
    var root = null;
    var startText = null;
    var fallbackText = null;
    function initialize(nativeEventTarget) {
        root = nativeEventTarget;
        startText = getText();
        return true;
    }
    function reset() {
        root = null;
        startText = null;
        fallbackText = null;
    }
    function getData() {
        if (fallbackText) return fallbackText;
        var start;
        var startValue = startText;
        var startLength = startValue.length;
        var end;
        var endValue = getText();
        var endLength = endValue.length;
        for(start = 0; start < startLength; start++){
            if (startValue[start] !== endValue[start]) break;
        }
        var minEnd = startLength - start;
        for(end = 1; end <= minEnd; end++){
            if (startValue[startLength - end] !== endValue[endLength - end]) break;
        }
        var sliceTail = end > 1 ? 1 - end : undefined;
        fallbackText = endValue.slice(start, sliceTail);
        return fallbackText;
    }
    function getText() {
        if ('value' in root) return root.value;
        return root.textContent;
    }
    function getEventCharCode(nativeEvent) {
        var charCode;
        var keyCode = nativeEvent.keyCode;
        if ('charCode' in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) charCode = 13;
        } else charCode = keyCode;
        if (charCode === 10) charCode = 13;
        if (charCode >= 32 || charCode === 13) return charCode;
        return 0;
    }
    function functionThatReturnsTrue() {
        return true;
    }
    function functionThatReturnsFalse() {
        return false;
    }
    function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for(var _propName in Interface){
                if (!Interface.hasOwnProperty(_propName)) continue;
                var normalize = Interface[_propName];
                if (normalize) this[_propName] = normalize(nativeEvent);
                else this[_propName] = nativeEvent[_propName];
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) this.isDefaultPrevented = functionThatReturnsTrue;
            else this.isDefaultPrevented = functionThatReturnsFalse;
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
        }
        assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) return;
                if (event.preventDefault) event.preventDefault();
                else if (typeof event.returnValue !== 'unknown') event.returnValue = false;
                this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) return;
                if (event.stopPropagation) event.stopPropagation();
                else if (typeof event.cancelBubble !== 'unknown') event.cancelBubble = true;
                this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {},
            isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
    }
    var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
            return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
    };
    var SyntheticEvent = createSyntheticEvent(EventInterface);
    var UIEventInterface = assign({}, EventInterface, {
        view: 0,
        detail: 0
    });
    var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
    var lastMovementX;
    var lastMovementY;
    var lastMouseEvent;
    function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === 'mousemove') {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
                lastMovementX = 0;
                lastMovementY = 0;
            }
            lastMouseEvent = event;
        }
    }
    var MouseEventInterface = assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
            if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
        },
        movementX: function(event) {
            if ('movementX' in event) return event.movementX;
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
        },
        movementY: function(event) {
            if ('movementY' in event) return event.movementY;
            return lastMovementY;
        }
    });
    var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
    var DragEventInterface = assign({}, MouseEventInterface, {
        dataTransfer: 0
    });
    var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
    var FocusEventInterface = assign({}, UIEventInterface, {
        relatedTarget: 0
    });
    var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
    var AnimationEventInterface = assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
    var ClipboardEventInterface = assign({}, EventInterface, {
        clipboardData: function(event) {
            return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
        }
    });
    var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
    var CompositionEventInterface = assign({}, EventInterface, {
        data: 0
    });
    var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
    var SyntheticInputEvent = SyntheticCompositionEvent;
    var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified'
    };
    var translateToKey = {
        '8': 'Backspace',
        '9': 'Tab',
        '12': 'Clear',
        '13': 'Enter',
        '16': 'Shift',
        '17': 'Control',
        '18': 'Alt',
        '19': 'Pause',
        '20': 'CapsLock',
        '27': 'Escape',
        '32': ' ',
        '33': 'PageUp',
        '34': 'PageDown',
        '35': 'End',
        '36': 'Home',
        '37': 'ArrowLeft',
        '38': 'ArrowUp',
        '39': 'ArrowRight',
        '40': 'ArrowDown',
        '45': 'Insert',
        '46': 'Delete',
        '112': 'F1',
        '113': 'F2',
        '114': 'F3',
        '115': 'F4',
        '116': 'F5',
        '117': 'F6',
        '118': 'F7',
        '119': 'F8',
        '120': 'F9',
        '121': 'F10',
        '122': 'F11',
        '123': 'F12',
        '144': 'NumLock',
        '145': 'ScrollLock',
        '224': 'Meta'
    };
    function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== 'Unidentified') return key;
        }
        if (nativeEvent.type === 'keypress') {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
        }
        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') return translateToKey[nativeEvent.keyCode] || 'Unidentified';
        return '';
    }
    var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey'
    };
    function modifierStateGetter(keyArg) {
        var syntheticEvent = this;
        var nativeEvent = syntheticEvent.nativeEvent;
        if (nativeEvent.getModifierState) return nativeEvent.getModifierState(keyArg);
        var keyProp = modifierKeyToProp[keyArg];
        return keyProp ? !!nativeEvent[keyProp] : false;
    }
    function getEventModifierState(nativeEvent) {
        return modifierStateGetter;
    }
    var KeyboardEventInterface = assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
            if (event.type === 'keypress') return getEventCharCode(event);
            return 0;
        },
        keyCode: function(event) {
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        },
        which: function(event) {
            if (event.type === 'keypress') return getEventCharCode(event);
            if (event.type === 'keydown' || event.type === 'keyup') return event.keyCode;
            return 0;
        }
    });
    var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
    var PointerEventInterface = assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
    });
    var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
    var TouchEventInterface = assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
    });
    var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
    var TransitionEventInterface = assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
    });
    var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
    var WheelEventInterface = assign({}, MouseEventInterface, {
        deltaX: function(event) {
            return 'deltaX' in event ? event.deltaX : 'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
            return 'deltaY' in event ? event.deltaY : 'wheelDeltaY' in event ? -event.wheelDeltaY : 'wheelDelta' in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
    });
    var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
    var END_KEYCODES = [
        9,
        13,
        27,
        32
    ];
    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;
    if (canUseDOM && 'documentMode' in document) documentMode = document.documentMode;
    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode;
    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
    function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
            'compositionend',
            'keypress',
            'textInput',
            'paste'
        ]);
        registerTwoPhaseEvent('onCompositionEnd', [
            'compositionend',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionStart', [
            'compositionstart',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
        registerTwoPhaseEvent('onCompositionUpdate', [
            'compositionupdate',
            'focusout',
            'keydown',
            'keypress',
            'keyup',
            'mousedown'
        ]);
    }
    var hasSpaceKeypress = false;
    function isKeypressCommand(nativeEvent) {
        return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    function getCompositionEventType(domEventName) {
        switch(domEventName){
            case 'compositionstart':
                return 'onCompositionStart';
            case 'compositionend':
                return 'onCompositionEnd';
            case 'compositionupdate':
                return 'onCompositionUpdate';
        }
    }
    function isFallbackCompositionStart(domEventName, nativeEvent) {
        return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
    }
    function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch(domEventName){
            case 'keyup':
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case 'keydown':
                return nativeEvent.keyCode !== START_KEYCODE;
            case 'keypress':
            case 'mousedown':
            case 'focusout':
                return true;
            default:
                return false;
        }
    }
    function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail;
        if (typeof detail === 'object' && 'data' in detail) return detail.data;
        return null;
    }
    function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko';
    }
    var isComposing = false;
    function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var eventType;
        var fallbackData;
        if (canUseCompositionEvent) eventType = getCompositionEventType(domEventName);
        else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) eventType = 'onCompositionStart';
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) eventType = 'onCompositionEnd';
        if (!eventType) return null;
        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === 'onCompositionStart') isComposing = initialize(nativeEventTarget);
            else if (eventType === 'onCompositionEnd') {
                if (isComposing) fallbackData = getData();
            }
        }
        var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
        if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            if (fallbackData) event.data = fallbackData;
            else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) event.data = customData;
            }
        }
    }
    function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch(domEventName){
            case 'compositionend':
                return getDataFromCustomEvent(nativeEvent);
            case 'keypress':
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) return null;
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
            case 'textInput':
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) return null;
                return chars;
            default:
                return null;
        }
    }
    function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing) {
            if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
            }
            return null;
        }
        switch(domEventName){
            case 'paste':
                return null;
            case 'keypress':
                if (!isKeypressCommand(nativeEvent)) {
                    if (nativeEvent.char && nativeEvent.char.length > 1) return nativeEvent.char;
                    else if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
                }
                return null;
            case 'compositionend':
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
                return null;
        }
    }
    function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
        var chars;
        if (canUseTextInputEvent) chars = getNativeBeforeInputChars(domEventName, nativeEvent);
        else chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
        if (!chars) return null;
        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');
        if (listeners.length > 0) {
            var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
            event.data = chars;
        }
    }
    function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
    };
    function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        if (nodeName === 'input') return !!supportedInputTypes[elem.type];
        if (nodeName === 'textarea') return true;
        return false;
    }
    function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) return false;
        var eventName = 'on' + eventNameSuffix;
        var isSupported = eventName in document;
        if (!isSupported) {
            var element = document.createElement('div');
            element.setAttribute(eventName, 'return;');
            isSupported = typeof element[eventName] === 'function';
        }
        return isSupported;
    }
    function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
            'change',
            'click',
            'focusin',
            'focusout',
            'input',
            'keydown',
            'keyup',
            'selectionchange'
        ]);
    }
    function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        enqueueStateRestore(target);
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange');
        if (listeners.length > 0) {
            var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
            dispatchQueue.push({
                event: event,
                listeners: listeners
            });
        }
    }
    var activeElement = null;
    var activeElementInst = null;
    function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }
    function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = [];
        createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
        batchedUpdates(runEventInBatch, dispatchQueue);
    }
    function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
    }
    function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
    }
    function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') return targetInst;
    }
    var isInputEventSupported = false;
    if (canUseDOM) isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    function startWatchingForValueChange(target, targetInst) {
        activeElement = target;
        activeElementInst = targetInst;
        activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    function stopWatchingForValueChange() {
        if (!activeElement) return;
        activeElement.detachEvent('onpropertychange', handlePropertyChange);
        activeElement = null;
        activeElementInst = null;
    }
    function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') return;
        if (getInstIfValueChanged(activeElementInst)) manualDispatchChangeEvent(nativeEvent);
    }
    function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        if (domEventName === 'focusin') {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
        } else if (domEventName === 'focusout') stopWatchingForValueChange();
    }
    function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') return getInstIfValueChanged(activeElementInst);
    }
    function shouldUseClickEvent(elem) {
        var nodeName = elem.nodeName;
        return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }
    function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') return getInstIfValueChanged(targetInst);
    }
    function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') return getInstIfValueChanged(targetInst);
    }
    function handleControlledInputBlur(node) {
        var state = node._wrapperState;
        if (!state || !state.controlled || node.type !== 'number') return;
        setDefaultValue(node, 'number', node.value);
    }
    function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        var getTargetInstFunc, handleEventFunc;
        if (shouldUseChangeEvent(targetNode)) getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
            }
        } else if (shouldUseClickEvent(targetNode)) getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
            }
        }
        if (handleEventFunc) handleEventFunc(domEventName, targetNode, targetInst);
        if (domEventName === 'focusout') handleControlledInputBlur(targetNode);
    }
    function registerEvents$2() {
        registerDirectEvent('onMouseEnter', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onMouseLeave', [
            'mouseout',
            'mouseover'
        ]);
        registerDirectEvent('onPointerEnter', [
            'pointerout',
            'pointerover'
        ]);
        registerDirectEvent('onPointerLeave', [
            'pointerout',
            'pointerover'
        ]);
    }
    function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
        var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';
        if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) return;
            }
        }
        if (!isOutEvent && !isOverEvent) return;
        var win;
        if (nativeEventTarget.window === nativeEventTarget) win = nativeEventTarget;
        else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) win = doc.defaultView || doc.parentWindow;
            else win = window;
        }
        var from;
        var to;
        if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) to = null;
            }
        } else {
            from = null;
            to = targetInst;
        }
        if (from === to) return;
        var SyntheticEventCtor = SyntheticMouseEvent;
        var leaveEventType = 'onMouseLeave';
        var enterEventType = 'onMouseEnter';
        var eventTypePrefix = 'mouse';
        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = 'onPointerLeave';
            enterEventType = 'onPointerEnter';
            eventTypePrefix = 'pointer';
        }
        var fromNode = from == null ? win : getNodeFromInstance(from);
        var toNode = to == null ? win : getNodeFromInstance(to);
        var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = null;
        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
        if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
        }
        accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
    }
    function is(x, y) {
        return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    var objectIs = typeof Object.is === 'function' ? Object.is : is;
    function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) return false;
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
        for(var i = 0; i < keysA.length; i++){
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) return false;
        }
        return true;
    }
    function getLeafNode(node) {
        while(node && node.firstChild)node = node.firstChild;
        return node;
    }
    function getSiblingNode(node) {
        while(node){
            if (node.nextSibling) return node.nextSibling;
            node = node.parentNode;
        }
    }
    function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root);
        var nodeStart = 0;
        var nodeEnd = 0;
        while(node){
            if (node.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node.textContent.length;
                if (nodeStart <= offset && nodeEnd >= offset) return {
                    node: node,
                    offset: offset - nodeStart
                };
                nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
        }
    }
    function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument;
        var win = ownerDocument && ownerDocument.defaultView || window;
        var selection = win.getSelection && win.getSelection();
        if (!selection || selection.rangeCount === 0) return null;
        var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
        try {
            anchorNode.nodeType;
            focusNode.nodeType;
        } catch (e) {
            return null;
        }
        return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
        var length = 0;
        var start = -1;
        var end = -1;
        var indexWithinAnchor = 0;
        var indexWithinFocus = 0;
        var node = outerNode;
        var parentNode = null;
        outer: while(true){
            var next = null;
            while(true){
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) start = length + anchorOffset;
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) end = length + focusOffset;
                if (node.nodeType === TEXT_NODE) length += node.nodeValue.length;
                if ((next = node.firstChild) === null) break;
                parentNode = node;
                node = next;
            }
            while(true){
                if (node === outerNode) break outer;
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) start = length;
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) end = length;
                if ((next = node.nextSibling) !== null) break;
                node = parentNode;
                parentNode = node.parentNode;
            }
            node = next;
        }
        if (start === -1 || end === -1) return null;
        return {
            start: start,
            end: end
        };
    }
    function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document;
        var win = doc && doc.defaultView || window;
        if (!win.getSelection) return;
        var selection = win.getSelection();
        var length = node.textContent.length;
        var start = Math.min(offsets.start, length);
        var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
        if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
        }
        var startMarker = getNodeForCharacterOffset(node, start);
        var endMarker = getNodeForCharacterOffset(node, end);
        if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) return;
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
            } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
            }
        }
    }
    function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE;
    }
    function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) return false;
        else if (outerNode === innerNode) return true;
        else if (isTextNode(outerNode)) return false;
        else if (isTextNode(innerNode)) return containsNode(outerNode, innerNode.parentNode);
        else if ('contains' in outerNode) return outerNode.contains(innerNode);
        else if (outerNode.compareDocumentPosition) return !!(outerNode.compareDocumentPosition(innerNode) & 16);
        else return false;
    }
    function isInDocument(node) {
        return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }
    function isSameOriginFrame(iframe) {
        try {
            return typeof iframe.contentWindow.location.href === 'string';
        } catch (err) {
            return false;
        }
    }
    function getActiveElementDeep() {
        var win = window;
        var element = getActiveElement();
        while(element instanceof win.HTMLIFrameElement){
            if (isSameOriginFrame(element)) win = element.contentWindow;
            else return element;
            element = getActiveElement(win.document);
        }
        return element;
    }
    function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }
    function getSelectionInformation() {
        var focusedElem = getActiveElementDeep();
        return {
            focusedElem: focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
        };
    }
    function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep();
        var priorFocusedElem = priorSelectionInformation.focusedElem;
        var priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) setSelection(priorFocusedElem, priorSelectionRange);
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while(ancestor = ancestor.parentNode)if (ancestor.nodeType === ELEMENT_NODE) ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop
            });
            if (typeof priorFocusedElem.focus === 'function') priorFocusedElem.focus();
            for(var i = 0; i < ancestors.length; i++){
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
            }
        }
    }
    function getSelection(input) {
        var selection;
        if ('selectionStart' in input) selection = {
            start: input.selectionStart,
            end: input.selectionEnd
        };
        else selection = getOffsets(input);
        return selection || {
            start: 0,
            end: 0
        };
    }
    function setSelection(input, offsets) {
        var start = offsets.start;
        var end = offsets.end;
        if (end === undefined) end = start;
        if ('selectionStart' in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
        } else setOffsets(input, offsets);
    }
    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
            'focusout',
            'contextmenu',
            'dragend',
            'focusin',
            'keydown',
            'keyup',
            'mousedown',
            'mouseup',
            'selectionchange'
        ]);
    }
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) return {
            start: node.selectionStart,
            end: node.selectionEnd
        };
        else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
            };
        }
    }
    function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget);
        if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) return;
        var currentSelection = getSelection$1(activeElement$1);
        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');
            if (listeners.length > 0) {
                var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                    event: event,
                    listeners: listeners
                });
                event.target = activeElement$1;
            }
        }
    }
    function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
        switch(domEventName){
            case 'focusin':
                if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
                    activeElement$1 = targetNode;
                    activeElementInst$1 = targetInst;
                    lastSelection = null;
                }
                break;
            case 'focusout':
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
            case 'mousedown':
                mouseDown = true;
                break;
            case 'contextmenu':
            case 'mouseup':
            case 'dragend':
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
            case 'selectionchange':
                if (skipSelectionChangeEvent) break;
            case 'keydown':
            case 'keyup':
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
        }
    }
    function makePrefixMap(styleProp, eventName) {
        var prefixes = {};
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes['Webkit' + styleProp] = 'webkit' + eventName;
        prefixes['Moz' + styleProp] = 'moz' + eventName;
        return prefixes;
    }
    var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    var prefixedEventNames = {};
    var style = {};
    if (canUseDOM) {
        style = document.createElement('div').style;
        if (!('AnimationEvent' in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
        }
        if (!('TransitionEvent' in window)) delete vendorPrefixes.transitionend.transition;
    }
    function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        else if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName];
        for(var styleProp in prefixMap){
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
        return eventName;
    }
    var ANIMATION_END = getVendorPrefixedEventName('animationend');
    var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
    var ANIMATION_START = getVendorPrefixedEventName('animationstart');
    var TRANSITION_END = getVendorPrefixedEventName('transitionend');
    var topLevelEventsToReactNames = new Map();
    var simpleEventPluginEvents = [
        'abort',
        'auxClick',
        'cancel',
        'canPlay',
        'canPlayThrough',
        'click',
        'close',
        'contextMenu',
        'copy',
        'cut',
        'drag',
        'dragEnd',
        'dragEnter',
        'dragExit',
        'dragLeave',
        'dragOver',
        'dragStart',
        'drop',
        'durationChange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'gotPointerCapture',
        'input',
        'invalid',
        'keyDown',
        'keyPress',
        'keyUp',
        'load',
        'loadedData',
        'loadedMetadata',
        'loadStart',
        'lostPointerCapture',
        'mouseDown',
        'mouseMove',
        'mouseOut',
        'mouseOver',
        'mouseUp',
        'paste',
        'pause',
        'play',
        'playing',
        'pointerCancel',
        'pointerDown',
        'pointerMove',
        'pointerOut',
        'pointerOver',
        'pointerUp',
        'progress',
        'rateChange',
        'reset',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'submit',
        'suspend',
        'timeUpdate',
        'touchCancel',
        'touchEnd',
        'touchStart',
        'volumeChange',
        'scroll',
        'toggle',
        'touchMove',
        'waiting',
        'wheel'
    ];
    function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [
            domEventName
        ]);
    }
    function registerSimpleEvents() {
        for(var i = 0; i < simpleEventPluginEvents.length; i++){
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, 'on' + capitalizedEvent);
        }
        registerSimpleEvent(ANIMATION_END, 'onAnimationEnd');
        registerSimpleEvent(ANIMATION_ITERATION, 'onAnimationIteration');
        registerSimpleEvent(ANIMATION_START, 'onAnimationStart');
        registerSimpleEvent('dblclick', 'onDoubleClick');
        registerSimpleEvent('focusin', 'onFocus');
        registerSimpleEvent('focusout', 'onBlur');
        registerSimpleEvent(TRANSITION_END, 'onTransitionEnd');
    }
    function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        var reactName = topLevelEventsToReactNames.get(domEventName);
        if (reactName === undefined) return;
        var SyntheticEventCtor = SyntheticEvent;
        var reactEventType = domEventName;
        switch(domEventName){
            case 'keypress':
                if (getEventCharCode(nativeEvent) === 0) return;
            case 'keydown':
            case 'keyup':
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
            case 'focusin':
                reactEventType = 'focus';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'focusout':
                reactEventType = 'blur';
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'beforeblur':
            case 'afterblur':
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
            case 'click':
                if (nativeEvent.button === 2) return;
            case 'auxclick':
            case 'dblclick':
            case 'mousedown':
            case 'mousemove':
            case 'mouseup':
            case 'mouseout':
            case 'mouseover':
            case 'contextmenu':
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
            case 'drag':
            case 'dragend':
            case 'dragenter':
            case 'dragexit':
            case 'dragleave':
            case 'dragover':
            case 'dragstart':
            case 'drop':
                SyntheticEventCtor = SyntheticDragEvent;
                break;
            case 'touchcancel':
            case 'touchend':
            case 'touchmove':
            case 'touchstart':
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
            case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
            case 'scroll':
                SyntheticEventCtor = SyntheticUIEvent;
                break;
            case 'wheel':
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
            case 'copy':
            case 'cut':
            case 'paste':
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
            case 'gotpointercapture':
            case 'lostpointercapture':
            case 'pointercancel':
            case 'pointerdown':
            case 'pointermove':
            case 'pointerout':
            case 'pointerover':
            case 'pointerup':
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
        }
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        var accumulateTargetOnly = !inCapturePhase && domEventName === 'scroll';
        var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
        if (_listeners.length > 0) {
            var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
                event: _event,
                listeners: _listeners
            });
        }
    }
    registerSimpleEvents();
    registerEvents$2();
    registerEvents$1();
    registerEvents$3();
    registerEvents();
    function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
        extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
        if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
    }
    var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'resize',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting'
    ];
    var nonDelegatedEvents = new Set([
        'cancel',
        'close',
        'invalid',
        'load',
        'scroll',
        'toggle'
    ].concat(mediaEventTypes));
    function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event';
        event.currentTarget = currentTarget;
        invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
        event.currentTarget = null;
    }
    function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
        var previousInstance;
        if (inCapturePhase) for(var i = dispatchListeners.length - 1; i >= 0; i--){
            var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
            if (instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, listener, currentTarget);
            previousInstance = instance;
        }
        else for(var _i = 0; _i < dispatchListeners.length; _i++){
            var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
            if (_instance !== previousInstance && event.isPropagationStopped()) return;
            executeDispatch(event, _listener, _currentTarget);
            previousInstance = _instance;
        }
    }
    function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
        for(var i = 0; i < dispatchQueue.length; i++){
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
        }
        rethrowCaughtError();
    }
    function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var nativeEventTarget = getEventTarget(nativeEvent);
        var dispatchQueue = [];
        extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
        processDispatchQueue(dispatchQueue, eventSystemFlags);
    }
    function listenToNonDelegatedEvent(domEventName, targetElement) {
        if (!nonDelegatedEvents.has(domEventName)) error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
        var isCapturePhaseListener = false;
        var listenerSet = getEventListenerSet(targetElement);
        var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
        if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
        }
    }
    function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
        var eventSystemFlags = 0;
        if (isCapturePhaseListener) eventSystemFlags |= IS_CAPTURE_PHASE;
        addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    }
    var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
    function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== 'selectionchange') {
                    if (!nonDelegatedEvents.has(domEventName)) listenToNativeEvent(domEventName, false, rootContainerElement);
                    listenToNativeEvent(domEventName, true, rootContainerElement);
                }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                    ownerDocument[listeningMarker] = true;
                    listenToNativeEvent('selectionchange', false, ownerDocument);
                }
            }
        }
    }
    function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
        var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
        var isPassiveListener = undefined;
        if (passiveBrowserEventsSupported) {
            if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') isPassiveListener = true;
        }
        targetContainer;
        var unsubscribeListener;
        if (isCapturePhaseListener) {
            if (isPassiveListener !== undefined) unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            else unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
        } else if (isPassiveListener !== undefined) unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
        else unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
    function isMatchingRootContainer(grandContainer, targetContainer) {
        return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
    }
    function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
        var ancestorInst = targetInst;
        if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
                var node = targetInst;
                mainLoop: while(true){
                    if (node === null) return;
                    var nodeTag = node.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                        var container = node.stateNode.containerInfo;
                        if (isMatchingRootContainer(container, targetContainerNode)) break;
                        if (nodeTag === HostPortal) {
                            var grandNode = node.return;
                            while(grandNode !== null){
                                var grandTag = grandNode.tag;
                                if (grandTag === HostRoot || grandTag === HostPortal) {
                                    var grandContainer = grandNode.stateNode.containerInfo;
                                    if (isMatchingRootContainer(grandContainer, targetContainerNode)) return;
                                }
                                grandNode = grandNode.return;
                            }
                        }
                        while(container !== null){
                            var parentNode = getClosestInstanceFromNode(container);
                            if (parentNode === null) return;
                            var parentTag = parentNode.tag;
                            if (parentTag === HostComponent || parentTag === HostText) {
                                node = ancestorInst = parentNode;
                                continue mainLoop;
                            }
                            container = container.parentNode;
                        }
                    }
                    node = node.return;
                }
            }
        }
        batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
        });
    }
    function createDispatchListener(instance, listener, currentTarget) {
        return {
            instance: instance,
            listener: listener,
            currentTarget: currentTarget
        };
    }
    function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
        var captureName = reactName !== null ? reactName + 'Capture' : null;
        var reactEventName = inCapturePhase ? captureName : reactName;
        var listeners = [];
        var instance = targetFiber;
        var lastHostComponent = null;
        while(instance !== null){
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                    var listener = getListener(instance, reactEventName);
                    if (listener != null) listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
            }
            if (accumulateTargetOnly) break;
            instance = instance.return;
        }
        return listeners;
    }
    function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture';
        var listeners = [];
        var instance = targetFiber;
        while(instance !== null){
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
            }
            instance = instance.return;
        }
        return listeners;
    }
    function getParent(inst) {
        if (inst === null) return null;
        do inst = inst.return;
        while (inst && inst.tag !== HostComponent)
        if (inst) return inst;
        return null;
    }
    function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA;
        var nodeB = instB;
        var depthA = 0;
        for(var tempA = nodeA; tempA; tempA = getParent(tempA))depthA++;
        var depthB = 0;
        for(var tempB = nodeB; tempB; tempB = getParent(tempB))depthB++;
        while(depthA - depthB > 0){
            nodeA = getParent(nodeA);
            depthA--;
        }
        while(depthB - depthA > 0){
            nodeB = getParent(nodeB);
            depthB--;
        }
        var depth = depthA;
        while(depth--){
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) return nodeA;
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
        }
        return null;
    }
    function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        var registrationName = event._reactName;
        var listeners = [];
        var instance = target;
        while(instance !== null){
            if (instance === common) break;
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) break;
            if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                    var captureListener = getListener(instance, registrationName);
                    if (captureListener != null) listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                } else if (!inCapturePhase) {
                    var bubbleListener = getListener(instance, registrationName);
                    if (bubbleListener != null) listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
            }
            instance = instance.return;
        }
        if (listeners.length !== 0) dispatchQueue.push({
            event: event,
            listeners: listeners
        });
    }
    function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null;
        if (from !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
        if (to !== null && enterEvent !== null) accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
    }
    function getListenerSetKey(domEventName, capture) {
        return domEventName + "__" + (capture ? 'capture' : 'bubble');
    }
    var didWarnInvalidHydration = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE = 'style';
    var HTML$1 = '__html';
    var warnedUnknownTags;
    var validatePropertiesInDevelopment;
    var warnForPropDifference;
    var warnForExtraAttributes;
    var warnForInvalidEventListener;
    var canDiffStyleForHydrationWarning;
    var normalizeHTML;
    warnedUnknownTags = {
        dialog: true,
        webview: true
    };
    validatePropertiesInDevelopment = function(type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames
        });
    };
    canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
    warnForPropDifference = function(propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) return;
        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
        if (normalizedServerValue === normalizedClientValue) return;
        didWarnInvalidHydration = true;
        error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
    };
    warnForExtraAttributes = function(attributeNames) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function(name) {
            names.push(name);
        });
        error('Extra attributes from the server: %s', names);
    };
    warnForInvalidEventListener = function(registrationName, listener) {
        if (listener === false) error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
        else error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    };
    normalizeHTML = function(parent, html) {
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
    };
    var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
    var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
    function normalizeMarkupForTextOrAttribute(markup) {
        checkHtmlStringCoercion(markup);
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
    }
    function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
        if (normalizedServerText === normalizedClientText) return;
        if (shouldWarnDev) {
            if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
            }
        }
        if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) throw new Error('Text content does not match server-rendered HTML.');
    }
    function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }
    function noop() {}
    function trapClickOnNonInteractiveElement(node) {
        node.onclick = noop;
    }
    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
        for(var propKey in nextProps){
            if (!nextProps.hasOwnProperty(propKey)) continue;
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
                if (nextProp) Object.freeze(nextProp);
                setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                if (nextHtml != null) setInnerHTML(domElement, nextHtml);
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    var canSetTextContent = tag !== 'textarea' || nextProp !== '';
                    if (canSetTextContent) setTextContent(domElement, nextProp);
                } else if (typeof nextProp === 'number') setTextContent(domElement, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (nextProp != null) setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
    }
    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
        for(var i = 0; i < updatePayload.length; i += 2){
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) setValueForStyles(domElement, propValue);
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) setInnerHTML(domElement, propValue);
            else if (propKey === CHILDREN) setTextContent(domElement, propValue);
            else setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
    }
    function createElement(type, props, rootContainerElement, parentNamespace) {
        var isCustomComponentTag;
        var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
        var domElement;
        var namespaceURI = parentNamespace;
        if (namespaceURI === HTML_NAMESPACE) namespaceURI = getIntrinsicNamespace(type);
        if (namespaceURI === HTML_NAMESPACE) {
            isCustomComponentTag = isCustomComponent(type, props);
            if (!isCustomComponentTag && type !== type.toLowerCase()) error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
            if (type === 'script') {
                var div = ownerDocument.createElement('div');
                div.innerHTML = "<script></script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
            } else if (typeof props.is === 'string') domElement = ownerDocument.createElement(type, {
                is: props.is
            });
            else {
                domElement = ownerDocument.createElement(type);
                if (type === 'select') {
                    var node = domElement;
                    if (props.multiple) node.multiple = true;
                    else if (props.size) node.size = props.size;
                }
            }
        } else domElement = ownerDocument.createElementNS(namespaceURI, type);
        if (namespaceURI === HTML_NAMESPACE) {
            if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
            }
        }
        return domElement;
    }
    function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }
    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        var props;
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                props = rawProps;
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'video':
            case 'audio':
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                props = rawProps;
                break;
            case 'source':
                listenToNonDelegatedEvent('error', domElement);
                props = rawProps;
                break;
            case 'img':
            case 'image':
            case 'link':
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                props = rawProps;
                break;
            case 'details':
                listenToNonDelegatedEvent('toggle', domElement);
                props = rawProps;
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            default:
                props = rawProps;
        }
        assertValidProps(tag, props);
        setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
        switch(tag){
            case 'input':
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
            case 'textarea':
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'option':
                postMountWrapper$1(domElement, rawProps);
                break;
            case 'select':
                postMountWrapper$2(domElement, rawProps);
                break;
            default:
                if (typeof props.onClick === 'function') trapClickOnNonInteractiveElement(domElement);
                break;
        }
    }
    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
        validatePropertiesInDevelopment(tag, nextRawProps);
        var updatePayload = null;
        var lastProps;
        var nextProps;
        switch(tag){
            case 'input':
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'select':
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
            case 'textarea':
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
            default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') trapClickOnNonInteractiveElement(domElement);
                break;
        }
        assertValidProps(tag, nextProps);
        var propKey;
        var styleName;
        var styleUpdates = null;
        for(propKey in lastProps){
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) continue;
            if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for(styleName in lastStyle)if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) styleUpdates = {};
                    styleUpdates[styleName] = '';
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) updatePayload = [];
            } else (updatePayload = updatePayload || []).push(propKey, null);
        }
        for(propKey in nextProps){
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : undefined;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) continue;
            if (propKey === STYLE) {
                if (nextProp) Object.freeze(nextProp);
                if (lastProp) {
                    for(styleName in lastProp)if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = '';
                    }
                    for(styleName in nextProp)if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                        if (!styleUpdates) styleUpdates = {};
                        styleUpdates[styleName] = nextProp[styleName];
                    }
                } else {
                    if (!styleUpdates) {
                        if (!updatePayload) updatePayload = [];
                        updatePayload.push(propKey, styleUpdates);
                    }
                    styleUpdates = nextProp;
                }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                var lastHtml = lastProp ? lastProp[HTML$1] : undefined;
                if (nextHtml != null) {
                    if (lastHtml !== nextHtml) (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
            } else if (propKey === CHILDREN) {
                if (typeof nextProp === 'string' || typeof nextProp === 'number') (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
                if (!updatePayload && lastProp !== nextProp) updatePayload = [];
            } else (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
        if (styleUpdates) {
            validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
        }
        return updatePayload;
    }
    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
        if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) updateChecked(domElement, nextRawProps);
        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
        updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
        switch(tag){
            case 'input':
                updateWrapper(domElement, nextRawProps);
                break;
            case 'textarea':
                updateWrapper$1(domElement, nextRawProps);
                break;
            case 'select':
                postUpdateWrapper(domElement, nextRawProps);
                break;
        }
    }
    function getPossibleStandardName(propName) {
        var lowerCasedName = propName.toLowerCase();
        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) return null;
        return possibleStandardNames[lowerCasedName] || null;
    }
    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
        var isCustomComponentTag;
        var extraAttributeNames;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);
        switch(tag){
            case 'dialog':
                listenToNonDelegatedEvent('cancel', domElement);
                listenToNonDelegatedEvent('close', domElement);
                break;
            case 'iframe':
            case 'object':
            case 'embed':
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'video':
            case 'audio':
                for(var i = 0; i < mediaEventTypes.length; i++)listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                break;
            case 'source':
                listenToNonDelegatedEvent('error', domElement);
                break;
            case 'img':
            case 'image':
            case 'link':
                listenToNonDelegatedEvent('error', domElement);
                listenToNonDelegatedEvent('load', domElement);
                break;
            case 'details':
                listenToNonDelegatedEvent('toggle', domElement);
                break;
            case 'input':
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'option':
                validateProps(domElement, rawProps);
                break;
            case 'select':
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent('invalid', domElement);
                break;
            case 'textarea':
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent('invalid', domElement);
                break;
        }
        assertValidProps(tag, rawProps);
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;
        for(var _i = 0; _i < attributes.length; _i++){
            var name = attributes[_i].name.toLowerCase();
            switch(name){
                case 'value':
                    break;
                case 'checked':
                    break;
                case 'selected':
                    break;
                default:
                    extraAttributeNames.add(attributes[_i].name);
            }
        }
        var updatePayload = null;
        for(var propKey in rawProps){
            if (!rawProps.hasOwnProperty(propKey)) continue;
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
                if (typeof nextProp === 'string') {
                    if (domElement.textContent !== nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            nextProp
                        ];
                    }
                } else if (typeof nextProp === 'number') {
                    if (domElement.textContent !== '' + nextProp) {
                        if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                        updatePayload = [
                            CHILDREN,
                            '' + nextProp
                        ];
                    }
                }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                    if (typeof nextProp !== 'function') warnForInvalidEventListener(propKey, nextProp);
                    if (propKey === 'onScroll') listenToNonDelegatedEvent('scroll', domElement);
                }
            } else if (shouldWarnDev && true && typeof isCustomComponentTag === 'boolean') {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === 'value' || propKey === 'checked' || propKey === 'selected') ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                    var serverHTML = domElement.innerHTML;
                    var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
                    if (nextHtml != null) {
                        var expectedHTML = normalizeHTML(domElement, nextHtml);
                        if (expectedHTML !== serverHTML) warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                } else if (propKey === STYLE) {
                    extraAttributeNames.delete(propKey);
                    if (canDiffStyleForHydrationWarning) {
                        var expectedStyle = createDangerousStringForStyles(nextProp);
                        serverValue = domElement.getAttribute('style');
                        if (expectedStyle !== serverValue) warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    if (nextProp !== serverValue) warnForPropDifference(propKey, serverValue, nextProp);
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                    var isMismatchDueToBadCasing = false;
                    if (propertyInfo !== null) {
                        extraAttributeNames.delete(propertyInfo.attributeName);
                        serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                    } else {
                        var ownNamespace = parentNamespace;
                        if (ownNamespace === HTML_NAMESPACE) ownNamespace = getIntrinsicNamespace(tag);
                        if (ownNamespace === HTML_NAMESPACE) extraAttributeNames.delete(propKey.toLowerCase());
                        else {
                            var standardName = getPossibleStandardName(propKey);
                            if (standardName !== null && standardName !== propKey) {
                                isMismatchDueToBadCasing = true;
                                extraAttributeNames.delete(standardName);
                            }
                            extraAttributeNames.delete(propKey);
                        }
                        serverValue = getValueForAttribute(domElement, propKey, nextProp);
                    }
                    var dontWarnCustomElement = enableCustomElementPropertySupport;
                    if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) warnForPropDifference(propKey, serverValue, nextProp);
                }
            }
        }
        if (shouldWarnDev) {
            if (extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true) warnForExtraAttributes(extraAttributeNames);
        }
        switch(tag){
            case 'input':
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
            case 'textarea':
                track(domElement);
                postMountWrapper$3(domElement);
                break;
            case 'select':
            case 'option':
                break;
            default:
                if (typeof rawProps.onClick === 'function') trapClickOnNonInteractiveElement(domElement);
                break;
        }
        return updatePayload;
    }
    function diffHydratedText(textNode, text, isConcurrentMode) {
        var isDifferent = textNode.nodeValue !== text;
        return isDifferent;
    }
    function warnForDeletedHydratableElement(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
    }
    function warnForDeletedHydratableText(parentNode, child) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedElement(parentNode, tag, props) {
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
    }
    function warnForInsertedHydratedText(parentNode, text) {
        if (text === '') return;
        if (didWarnInvalidHydration) return;
        didWarnInvalidHydration = true;
        error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
    }
    function restoreControlledState$3(domElement, tag, props) {
        switch(tag){
            case 'input':
                restoreControlledState(domElement, props);
                return;
            case 'textarea':
                restoreControlledState$2(domElement, props);
                return;
            case 'select':
                restoreControlledState$1(domElement, props);
                return;
        }
    }
    var validateDOMNesting = function() {};
    var updatedAncestorInfo = function() {};
    var specialTags = [
        'address',
        'applet',
        'area',
        'article',
        'aside',
        'base',
        'basefont',
        'bgsound',
        'blockquote',
        'body',
        'br',
        'button',
        'caption',
        'center',
        'col',
        'colgroup',
        'dd',
        'details',
        'dir',
        'div',
        'dl',
        'dt',
        'embed',
        'fieldset',
        'figcaption',
        'figure',
        'footer',
        'form',
        'frame',
        'frameset',
        'h1',
        'h2',
        'h3',
        'h4',
        'h5',
        'h6',
        'head',
        'header',
        'hgroup',
        'hr',
        'html',
        'iframe',
        'img',
        'input',
        'isindex',
        'li',
        'link',
        'listing',
        'main',
        'marquee',
        'menu',
        'menuitem',
        'meta',
        'nav',
        'noembed',
        'noframes',
        'noscript',
        'object',
        'ol',
        'p',
        'param',
        'plaintext',
        'pre',
        'script',
        'section',
        'select',
        'source',
        'style',
        'summary',
        'table',
        'tbody',
        'td',
        'template',
        'textarea',
        'tfoot',
        'th',
        'thead',
        'title',
        'tr',
        'track',
        'ul',
        'wbr',
        'xmp'
    ];
    var inScopeTags = [
        'applet',
        'caption',
        'html',
        'table',
        'td',
        'th',
        'marquee',
        'object',
        'template',
        'foreignObject',
        'desc',
        'title'
    ];
    var buttonScopeTags = inScopeTags.concat([
        'button'
    ]);
    var impliedEndTags = [
        'dd',
        'dt',
        'li',
        'option',
        'optgroup',
        'p',
        'rp',
        'rt'
    ];
    var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
    };
    updatedAncestorInfo = function(oldInfo, tag) {
        var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
        var info = {
            tag: tag
        };
        if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null;
            ancestorInfo.buttonTagInScope = null;
            ancestorInfo.nobrTagInScope = null;
        }
        if (buttonScopeTags.indexOf(tag) !== -1) ancestorInfo.pTagInButtonScope = null;
        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
            ancestorInfo.listItemTagAutoclosing = null;
            ancestorInfo.dlItemTagAutoclosing = null;
        }
        ancestorInfo.current = info;
        if (tag === 'form') ancestorInfo.formTag = info;
        if (tag === 'a') ancestorInfo.aTagInScope = info;
        if (tag === 'button') ancestorInfo.buttonTagInScope = info;
        if (tag === 'nobr') ancestorInfo.nobrTagInScope = info;
        if (tag === 'p') ancestorInfo.pTagInButtonScope = info;
        if (tag === 'li') ancestorInfo.listItemTagAutoclosing = info;
        if (tag === 'dd' || tag === 'dt') ancestorInfo.dlItemTagAutoclosing = info;
        return ancestorInfo;
    };
    var isTagValidWithParent = function(tag, parentTag) {
        switch(parentTag){
            case 'select':
                return tag === 'option' || tag === 'optgroup' || tag === '#text';
            case 'optgroup':
                return tag === 'option' || tag === '#text';
            case 'option':
                return tag === '#text';
            case 'tr':
                return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
            case 'tbody':
            case 'thead':
            case 'tfoot':
                return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
            case 'colgroup':
                return tag === 'col' || tag === 'template';
            case 'table':
                return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
            case 'head':
                return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
            case 'html':
                return tag === 'head' || tag === 'body' || tag === 'frameset';
            case 'frameset':
                return tag === 'frame';
            case '#document':
                return tag === 'html';
        }
        switch(tag){
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
            case 'rp':
            case 'rt':
                return impliedEndTags.indexOf(parentTag) === -1;
            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
                return parentTag == null;
        }
        return true;
    };
    var findInvalidAncestorForTag = function(tag, ancestorInfo) {
        switch(tag){
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
                return ancestorInfo.pTagInButtonScope;
            case 'form':
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
            case 'li':
                return ancestorInfo.listItemTagAutoclosing;
            case 'dd':
            case 'dt':
                return ancestorInfo.dlItemTagAutoclosing;
            case 'button':
                return ancestorInfo.buttonTagInScope;
            case 'a':
                return ancestorInfo.aTagInScope;
            case 'nobr':
                return ancestorInfo.nobrTagInScope;
        }
        return null;
    };
    var didWarn$1 = {};
    validateDOMNesting = function(childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;
        if (childText != null) {
            if (childTag != null) error('validateDOMNesting: when childText is passed, childTag should be null');
            childTag = '#text';
        }
        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;
        if (!invalidParentOrAncestor) return;
        var ancestorTag = invalidParentOrAncestor.tag;
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;
        if (didWarn$1[warnKey]) return;
        didWarn$1[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';
        if (childTag === '#text') {
            if (/\S/.test(childText)) tagDisplayName = 'Text nodes';
            else {
                tagDisplayName = 'Whitespace text nodes';
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
            }
        } else tagDisplayName = '<' + childTag + '>';
        if (invalidParent) {
            var info = '';
            if (ancestorTag === 'table' && childTag === 'tr') info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
            error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
        } else error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
    };
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var SUSPENSE_PENDING_START_DATA = '$?';
    var SUSPENSE_FALLBACK_START_DATA = '$!';
    var STYLE$1 = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;
    function getRootHostContext(rootContainerInstance) {
        var type;
        var namespace;
        var nodeType = rootContainerInstance.nodeType;
        switch(nodeType){
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
                type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
                var root = rootContainerInstance.documentElement;
                namespace = root ? root.namespaceURI : getChildNamespace(null, '');
                break;
            default:
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
        }
        var validatedTag = type.toLowerCase();
        var ancestorInfo = updatedAncestorInfo(null, validatedTag);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
        var parentHostContextDev = parentHostContext;
        var namespace = getChildNamespace(parentHostContextDev.namespace, type);
        var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
        return {
            namespace: namespace,
            ancestorInfo: ancestorInfo
        };
    }
    function getPublicInstance(instance) {
        return instance;
    }
    function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled();
        selectionInformation = getSelectionInformation();
        var activeInstance = null;
        setEnabled(false);
        return activeInstance;
    }
    function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation);
        setEnabled(eventsEnabled);
        eventsEnabled = null;
        selectionInformation = null;
    }
    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
        var parentNamespace;
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);
        if (typeof props.children === 'string' || typeof props.children === 'number') {
            var string = '' + props.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        parentNamespace = hostContextDev.namespace;
        var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
        precacheFiberNode(internalInstanceHandle, domElement);
        updateFiberProps(domElement, props);
        return domElement;
    }
    function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
        setInitialProperties(domElement, type, props, rootContainerInstance);
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                return !!props.autoFocus;
            case 'img':
                return true;
            default:
                return false;
        }
    }
    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
        var hostContextDev = hostContext;
        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
            var string = '' + newProps.children;
            var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
            validateDOMNesting(null, string, ownAncestorInfo);
        }
        return diffProperties(domElement, type, oldProps, newProps);
    }
    function shouldSetTextContent(type, props) {
        return type === 'textarea' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }
    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
        var textNode = createTextNode(text, rootContainerInstance);
        precacheFiberNode(internalInstanceHandle, textNode);
        return textNode;
    }
    function getCurrentEventPriority() {
        var currentEvent = window.event;
        if (currentEvent === undefined) return DefaultEventPriority;
        return getEventPriority(currentEvent.type);
    }
    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var localPromise = typeof Promise === 'function' ? Promise : undefined;
    var scheduleMicrotask = typeof queueMicrotask === 'function' ? queueMicrotask : typeof localPromise !== 'undefined' ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
    } : scheduleTimeout;
    function handleErrorInNextTick(error) {
        setTimeout(function() {
            throw error;
        });
    }
    function commitMount(domElement, type, newProps, internalInstanceHandle) {
        switch(type){
            case 'button':
            case 'input':
            case 'select':
            case 'textarea':
                if (newProps.autoFocus) domElement.focus();
                return;
            case 'img':
                if (newProps.src) domElement.src = newProps.src;
                return;
        }
    }
    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
        updateProperties(domElement, updatePayload, type, oldProps, newProps);
        updateFiberProps(domElement, newProps);
    }
    function resetTextContent(domElement) {
        setTextContent(domElement, '');
    }
    function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText;
    }
    function appendChild(parentInstance, child) {
        parentInstance.appendChild(child);
    }
    function appendChildToContainer(container, child) {
        var parentNode;
        if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
        } else {
            parentNode = container;
            parentNode.appendChild(child);
        }
        var reactRootContainer = container._reactRootContainer;
        if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) trapClickOnNonInteractiveElement(parentNode);
    }
    function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild);
    }
    function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.insertBefore(child, beforeChild);
        else container.insertBefore(child, beforeChild);
    }
    function removeChild(parentInstance, child) {
        parentInstance.removeChild(child);
    }
    function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) container.parentNode.removeChild(child);
        else container.removeChild(child);
    }
    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance;
        var depth = 0;
        do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) {
                        parentInstance.removeChild(nextNode);
                        retryIfBlockedOn(suspenseInstance);
                        return;
                    } else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) depth++;
            }
            node = nextNode;
        }while (node)
        retryIfBlockedOn(suspenseInstance);
    }
    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
        if (container.nodeType === COMMENT_NODE) clearSuspenseBoundary(container.parentNode, suspenseInstance);
        else if (container.nodeType === ELEMENT_NODE) clearSuspenseBoundary(container, suspenseInstance);
        retryIfBlockedOn(container);
    }
    function hideInstance(instance) {
        instance;
        var style = instance.style;
        if (typeof style.setProperty === 'function') style.setProperty('display', 'none', 'important');
        else style.display = 'none';
    }
    function hideTextInstance(textInstance) {
        textInstance.nodeValue = '';
    }
    function unhideInstance(instance, props) {
        instance;
        var styleProp = props[STYLE$1];
        var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
        instance.style.display = dangerousStyleValue('display', display);
    }
    function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text;
    }
    function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) container.textContent = '';
        else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) container.removeChild(container.documentElement);
        }
    }
    function canHydrateInstance(instance, type, props) {
        if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) return null;
        return instance;
    }
    function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) return null;
        return instance;
    }
    function canHydrateSuspenseInstance(instance) {
        if (instance.nodeType !== COMMENT_NODE) return null;
        return instance;
    }
    function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA;
    }
    function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA;
    }
    function getSuspenseInstanceFallbackErrorDetails(instance) {
        var dataset = instance.nextSibling && instance.nextSibling.dataset;
        var digest, message, stack;
        if (dataset) {
            digest = dataset.dgst;
            message = dataset.msg;
            stack = dataset.stck;
        }
        return {
            message: message,
            digest: digest,
            stack: stack
        };
    }
    function registerSuspenseInstanceRetry(instance, callback) {
        instance._reactRetry = callback;
    }
    function getNextHydratable(node) {
        for(; node != null; node = node.nextSibling){
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) break;
            if (nodeType === COMMENT_NODE) {
                var nodeData = node.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) break;
                if (nodeData === SUSPENSE_END_DATA) return null;
            }
        }
        return node;
    }
    function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling);
    }
    function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild);
    }
    function getFirstHydratableChildWithinContainer(parentContainer) {
        return getNextHydratable(parentContainer.firstChild);
    }
    function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
        return getNextHydratable(parentInstance.nextSibling);
    }
    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, instance);
        updateFiberProps(instance, props);
        var parentNamespace;
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
    }
    function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
        precacheFiberNode(internalInstanceHandle, textInstance);
        var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
        return diffHydratedText(textInstance, text);
    }
    function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, suspenseInstance);
    }
    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
        var node = suspenseInstance.nextSibling;
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_END_DATA) {
                    if (depth === 0) return getNextHydratableSibling(node);
                    else depth--;
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) depth++;
            }
            node = node.nextSibling;
        }
        return null;
    }
    function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling;
        var depth = 0;
        while(node){
            if (node.nodeType === COMMENT_NODE) {
                var data = node.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                    if (depth === 0) return node;
                    else depth--;
                } else if (data === SUSPENSE_END_DATA) depth++;
            }
            node = node.previousSibling;
        }
        return null;
    }
    function commitHydratedContainer(container) {
        retryIfBlockedOn(container);
    }
    function commitHydratedSuspenseInstance(suspenseInstance) {
        retryIfBlockedOn(suspenseInstance);
    }
    function shouldDeleteUnhydratedTailInstances(parentType) {
        return parentType !== 'head' && parentType !== 'body';
    }
    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
        var shouldWarnDev = true;
        checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
    }
    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
    }
    function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
        if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentContainer, instance);
        else if (instance.nodeType === COMMENT_NODE) ;
        else warnForDeletedHydratableText(parentContainer, instance);
    }
    function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentNode, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentNode, instance);
        }
    }
    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) warnForDeletedHydratableElement(parentInstance, instance);
            else if (instance.nodeType === COMMENT_NODE) ;
            else warnForDeletedHydratableText(parentInstance, instance);
        }
    }
    function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
        warnForInsertedHydratedElement(parentContainer, type);
    }
    function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
        warnForInsertedHydratedText(parentContainer, text);
    }
    function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
    }
    function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
        var parentNode = parentInstance.parentNode;
        if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
    }
    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedElement(parentInstance, type);
    }
    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
        if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) warnForInsertedHydratedText(parentInstance, text);
    }
    function errorHydratingContainer(parentContainer) {
        error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.', parentContainer.nodeName.toLowerCase());
    }
    function preparePortalMount(portalInstance) {
        listenToAllSupportedEvents(portalInstance);
    }
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactFiber$' + randomKey;
    var internalPropsKey = '__reactProps$' + randomKey;
    var internalContainerInstanceKey = '__reactContainer$' + randomKey;
    var internalEventHandlersKey = '__reactEvents$' + randomKey;
    var internalEventHandlerListenersKey = '__reactListeners$' + randomKey;
    var internalEventHandlesSetKey = '__reactHandles$' + randomKey;
    function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
    }
    function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst;
    }
    function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot;
    }
    function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null;
    }
    function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey];
    }
    function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) return targetInst;
        var parentNode = targetNode.parentNode;
        while(parentNode){
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                    var suspenseInstance = getParentSuspenseInstance(targetNode);
                    while(suspenseInstance !== null){
                        var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                        if (targetSuspenseInst) return targetSuspenseInst;
                        suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                    }
                }
                return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
        }
        return null;
    }
    function getInstanceFromNode(node) {
        var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
        if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) return inst;
            else return null;
        }
        return null;
    }
    function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) return inst.stateNode;
        throw new Error('getNodeFromInstance: Invalid argument.');
    }
    function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null;
    }
    function updateFiberProps(node, props) {
        node[internalPropsKey] = props;
    }
    function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey];
        if (elementListenerSet === undefined) elementListenerSet = node[internalEventHandlersKey] = new Set();
        return elementListenerSet;
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var valueStack = [];
    var fiberStack;
    fiberStack = [];
    var index = -1;
    function createCursor(defaultValue) {
        return {
            current: defaultValue
        };
    }
    function pop(cursor, fiber) {
        if (index < 0) {
            error('Unexpected pop.');
            return;
        }
        if (fiber !== fiberStack[index]) error('Unexpected Fiber popped.');
        cursor.current = valueStack[index];
        valueStack[index] = null;
        fiberStack[index] = null;
        index--;
    }
    function push(cursor, value, fiber) {
        index++;
        valueStack[index] = cursor.current;
        fiberStack[index] = fiber;
        cursor.current = value;
    }
    var warnedAboutMissingGetChildContext;
    warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var contextStackCursor = createCursor(emptyContextObject);
    var didPerformWorkStackCursor = createCursor(false);
    var previousContext = emptyContextObject;
    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
        if (didPushOwnContextIfProvider && isContextProvider(Component)) return previousContext;
        return contextStackCursor.current;
    }
    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        var instance = workInProgress.stateNode;
        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }
    function getMaskedContext(workInProgress, unmaskedContext) {
        var type = workInProgress.type;
        var contextTypes = type.contextTypes;
        if (!contextTypes) return emptyContextObject;
        var instance = workInProgress.stateNode;
        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) return instance.__reactInternalMemoizedMaskedChildContext;
        var context = {};
        for(var key in contextTypes)context[key] = unmaskedContext[key];
        var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name);
        if (instance) cacheContext(workInProgress, unmaskedContext, context);
        return context;
    }
    function hasContextChanged() {
        return didPerformWorkStackCursor.current;
    }
    function isContextProvider(type) {
        var childContextTypes = type.childContextTypes;
        return childContextTypes !== null && childContextTypes !== undefined;
    }
    function popContext(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function popTopLevelContextObject(fiber) {
        pop(didPerformWorkStackCursor, fiber);
        pop(contextStackCursor, fiber);
    }
    function pushTopLevelContextObject(fiber, context, didChange) {
        if (contextStackCursor.current !== emptyContextObject) throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
        push(contextStackCursor, context, fiber);
        push(didPerformWorkStackCursor, didChange, fiber);
    }
    function processChildContext(fiber, type, parentContext) {
        var instance = fiber.stateNode;
        var childContextTypes = type.childContextTypes;
        if (typeof instance.getChildContext !== 'function') {
            var componentName = getComponentNameFromFiber(fiber) || 'Unknown';
            if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true;
                error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
            }
            return parentContext;
        }
        var childContext = instance.getChildContext();
        for(var contextKey in childContext){
            if (!(contextKey in childContextTypes)) throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
        }
        var name = getComponentNameFromFiber(fiber) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name);
        return assign({}, parentContext, childContext);
    }
    function pushContextProvider(workInProgress) {
        var instance = workInProgress.stateNode;
        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
        previousContext = contextStackCursor.current;
        push(contextStackCursor, memoizedMergedChildContext, workInProgress);
        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
        return true;
    }
    function invalidateContextProvider(workInProgress, type, didChange) {
        var instance = workInProgress.stateNode;
        if (!instance) throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
        if (didChange) {
            var mergedContext = processChildContext(workInProgress, type, previousContext);
            instance.__reactInternalMemoizedMergedChildContext = mergedContext;
            pop(didPerformWorkStackCursor, workInProgress);
            pop(contextStackCursor, workInProgress);
            push(contextStackCursor, mergedContext, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        } else {
            pop(didPerformWorkStackCursor, workInProgress);
            push(didPerformWorkStackCursor, didChange, workInProgress);
        }
    }
    function findCurrentUnmaskedContext(fiber) {
        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
        var node = fiber;
        do {
            switch(node.tag){
                case HostRoot:
                    return node.stateNode.context;
                case ClassComponent:
                    var Component = node.type;
                    if (isContextProvider(Component)) return node.stateNode.__reactInternalMemoizedMergedChildContext;
                    break;
            }
            node = node.return;
        }while (node !== null)
        throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    var LegacyRoot = 0;
    var ConcurrentRoot = 1;
    var syncQueue = null;
    var includesLegacySyncCallbacks = false;
    var isFlushingSyncQueue = false;
    function scheduleSyncCallback(callback) {
        if (syncQueue === null) syncQueue = [
            callback
        ];
        else syncQueue.push(callback);
    }
    function scheduleLegacySyncCallback(callback) {
        includesLegacySyncCallbacks = true;
        scheduleSyncCallback(callback);
    }
    function flushSyncCallbacksOnlyInLegacyMode() {
        if (includesLegacySyncCallbacks) flushSyncCallbacks();
    }
    function flushSyncCallbacks() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(isSync);
                    while (callback !== null)
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
            } catch (error) {
                if (syncQueue !== null) syncQueue = syncQueue.slice(i + 1);
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error;
            } finally{
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
            }
        }
        return null;
    }
    var forkStack = [];
    var forkStackIndex = 0;
    var treeForkProvider = null;
    var treeForkCount = 0;
    var idStack = [];
    var idStackIndex = 0;
    var treeContextProvider = null;
    var treeContextId = 1;
    var treeContextOverflow = '';
    function isForkedChild(workInProgress) {
        warnIfNotHydrating();
        return (workInProgress.flags & Forked) !== NoFlags;
    }
    function getForksAtLevel(workInProgress) {
        warnIfNotHydrating();
        return treeForkCount;
    }
    function getTreeId() {
        var overflow = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
        return id.toString(32) + overflow;
    }
    function pushTreeFork(workInProgress, totalChildren) {
        warnIfNotHydrating();
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress;
        treeForkCount = totalChildren;
    }
    function pushTreeId(workInProgress, totalChildren, index) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress;
        var baseIdWithLeadingBit = treeContextId;
        var baseOverflow = treeContextOverflow;
        var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
        var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
        var slot = index + 1;
        var length = getBitLength(totalChildren) + baseLength;
        if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
        } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
        }
    }
    function pushMaterializedTreeId(workInProgress) {
        warnIfNotHydrating();
        var returnFiber = workInProgress.return;
        if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress, numberOfForks);
            pushTreeId(workInProgress, numberOfForks, slotIndex);
        }
    }
    function getBitLength(number) {
        return 32 - clz32(number);
    }
    function getLeadingBit(id) {
        return 1 << getBitLength(id) - 1;
    }
    function popTreeContext(workInProgress) {
        while(workInProgress === treeForkProvider){
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
        }
        while(workInProgress === treeContextProvider){
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
        }
    }
    function getSuspendedTreeContext() {
        warnIfNotHydrating();
        if (treeContextProvider !== null) return {
            id: treeContextId,
            overflow: treeContextOverflow
        };
        else return null;
    }
    function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
        warnIfNotHydrating();
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextId = suspendedContext.id;
        treeContextOverflow = suspendedContext.overflow;
        treeContextProvider = workInProgress;
    }
    function warnIfNotHydrating() {
        if (!getIsHydrating()) error("Expected to be hydrating. This is a bug in React. Please file an issue.");
    }
    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;
    var didSuspendOrErrorDEV = false;
    var hydrationErrors = null;
    function warnIfHydrating() {
        if (isHydrating) error('We should not be hydrating here. This is a bug in React. Please file a bug.');
    }
    function markDidThrowWhileHydratingDEV() {
        didSuspendOrErrorDEV = true;
    }
    function didSuspendOrErrorWhileHydratingDEV() {
        return didSuspendOrErrorDEV;
    }
    function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo;
        nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        return true;
    }
    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
        nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
        hydrationParentFiber = fiber;
        isHydrating = true;
        hydrationErrors = null;
        didSuspendOrErrorDEV = false;
        if (treeContext !== null) restoreSuspendedTreeContext(fiber, treeContext);
        return true;
    }
    function warnUnhydratedInstance(returnFiber, instance) {
        switch(returnFiber.tag){
            case HostRoot:
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
            case HostComponent:
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, isConcurrentMode);
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
        }
    }
    function deleteHydratableInstance(returnFiber, instance) {
        warnUnhydratedInstance(returnFiber, instance);
        var childToDelete = createFiberFromHostInstanceForDeletion();
        childToDelete.stateNode = instance;
        childToDelete.return = returnFiber;
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                childToDelete
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(childToDelete);
    }
    function warnNonhydratedInstance(returnFiber, fiber) {
        if (didSuspendOrErrorDEV) return;
        switch(returnFiber.tag){
            case HostRoot:
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch(fiber.tag){
                    case HostComponent:
                        var type = fiber.type;
                        var props = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                        break;
                    case HostText:
                        var text = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                        break;
                }
                break;
            case HostComponent:
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch(fiber.tag){
                    case HostComponent:
                        var _type = fiber.type;
                        var _props = fiber.pendingProps;
                        var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, isConcurrentMode);
                        break;
                    case HostText:
                        var _text = fiber.pendingProps;
                        var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                        didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, _isConcurrentMode);
                        break;
                }
                break;
            case SuspenseComponent:
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch(fiber.tag){
                    case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                    case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                }
                break;
            default:
                return;
        }
    }
    function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = fiber.flags & ~Hydrating | Placement;
        warnNonhydratedInstance(returnFiber, fiber);
    }
    function tryHydrate(fiber, nextInstance) {
        switch(fiber.tag){
            case HostComponent:
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                    fiber.stateNode = instance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = getFirstHydratableChild(instance);
                    return true;
                }
                return false;
            case HostText:
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                    fiber.stateNode = textInstance;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            case SuspenseComponent:
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                    var suspenseState = {
                        dehydrated: suspenseInstance,
                        treeContext: getSuspendedTreeContext(),
                        retryLane: OffscreenLane
                    };
                    fiber.memoizedState = suspenseState;
                    var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                    dehydratedFragment.return = fiber;
                    fiber.child = dehydratedFragment;
                    hydrationParentFiber = fiber;
                    nextHydratableInstance = null;
                    return true;
                }
                return false;
            default:
                return false;
        }
    }
    function shouldClientRenderOnMismatch(fiber) {
        return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
    }
    function throwOnHydrationMismatch(fiber) {
        throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
    }
    function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) return;
        var nextInstance = nextHydratableInstance;
        if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
        }
        var firstAttemptedInstance = nextInstance;
        if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
        }
    }
    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
        var instance = fiber.stateNode;
        var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
        var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
        fiber.updateQueue = updatePayload;
        if (updatePayload !== null) return true;
        return false;
    }
    function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode;
        var textContent = fiber.memoizedProps;
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
        if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) switch(returnFiber.tag){
                case HostRoot:
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, isConcurrentMode);
                    break;
                case HostComponent:
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, _isConcurrentMode2);
                    break;
            }
        }
        return shouldUpdate;
    }
    function prepareToHydrateHostSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        hydrateSuspenseInstance(suspenseInstance, fiber);
    }
    function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState;
        var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
        if (!suspenseInstance) throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }
    function popToNextHostParent(fiber) {
        var parent = fiber.return;
        while(parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent)parent = parent.return;
        hydrationParentFiber = parent;
    }
    function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return false;
        if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
        }
        if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                    warnIfUnhydratedTailNodes(fiber);
                    throwOnHydrationMismatch();
                } else while(nextInstance){
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                }
            }
        }
        popToNextHostParent(fiber);
        if (fiber.tag === SuspenseComponent) nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
        else nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
        return true;
    }
    function hasUnhydratedTailNodes() {
        return isHydrating && nextHydratableInstance !== null;
    }
    function warnIfUnhydratedTailNodes(fiber) {
        var nextInstance = nextHydratableInstance;
        while(nextInstance){
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
        }
    }
    function resetHydrationState() {
        hydrationParentFiber = null;
        nextHydratableInstance = null;
        isHydrating = false;
        didSuspendOrErrorDEV = false;
    }
    function upgradeHydrationErrorsToRecoverable() {
        if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
        }
    }
    function getIsHydrating() {
        return isHydrating;
    }
    function queueHydrationError(error) {
        if (hydrationErrors === null) hydrationErrors = [
            error
        ];
        else hydrationErrors.push(error);
    }
    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
    var NoTransition = null;
    function requestCurrentTransition() {
        return ReactCurrentBatchConfig$1.transition;
    }
    var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function(fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function() {},
        recordLegacyContextWarning: function(fiber, instance) {},
        flushLegacyContextWarning: function() {},
        discardPendingWarnings: function() {}
    };
    var findStrictRoot = function(fiber) {
        var maybeStrictRoot = null;
        var node = fiber;
        while(node !== null){
            if (node.mode & StrictLegacyMode) maybeStrictRoot = node;
            node = node.return;
        }
        return maybeStrictRoot;
    };
    var setToSortedString = function(set) {
        var array = [];
        set.forEach(function(value) {
            array.push(value);
        });
        return array.sort().join(', ');
    };
    var pendingComponentWillMountWarnings = [];
    var pendingUNSAFE_ComponentWillMountWarnings = [];
    var pendingComponentWillReceivePropsWarnings = [];
    var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    var pendingComponentWillUpdateWarnings = [];
    var pendingUNSAFE_ComponentWillUpdateWarnings = [];
    var didWarnAboutUnsafeLifecycles = new Set();
    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) return;
        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) pendingComponentWillMountWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) pendingComponentWillReceivePropsWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) pendingComponentWillUpdateWarnings.push(fiber);
        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    };
    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
        var componentWillMountUniqueNames = new Set();
        if (pendingComponentWillMountWarnings.length > 0) {
            pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillMountWarnings = [];
        }
        var UNSAFE_componentWillMountUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
            pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillMountWarnings = [];
        }
        var componentWillReceivePropsUniqueNames = new Set();
        if (pendingComponentWillReceivePropsWarnings.length > 0) {
            pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillReceivePropsWarnings = [];
        }
        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        }
        var componentWillUpdateUniqueNames = new Set();
        if (pendingComponentWillUpdateWarnings.length > 0) {
            pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingComponentWillUpdateWarnings = [];
        }
        var UNSAFE_componentWillUpdateUniqueNames = new Set();
        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
            });
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
        }
        if (UNSAFE_componentWillMountUniqueNames.size > 0) {
            var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
            error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
        }
        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
            error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
        }
        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
            error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
        }
        if (componentWillMountUniqueNames.size > 0) {
            var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
            warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
        }
        if (componentWillReceivePropsUniqueNames.size > 0) {
            var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
            warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
        }
        if (componentWillUpdateUniqueNames.size > 0) {
            var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
            warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
        }
    };
    var pendingLegacyContextWarning = new Map();
    var didWarnAboutLegacyContext = new Set();
    ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
        var strictRoot = findStrictRoot(fiber);
        if (strictRoot === null) {
            error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
            return;
        }
        if (didWarnAboutLegacyContext.has(fiber.type)) return;
        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
            if (warningsForRoot === undefined) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
            }
            warningsForRoot.push(fiber);
        }
    };
    ReactStrictModeWarnings.flushLegacyContextWarning = function() {
        pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
            if (fiberArray.length === 0) return;
            var firstFiber = fiberArray[0];
            var uniqueNames = new Set();
            fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
                didWarnAboutLegacyContext.add(fiber.type);
            });
            var sortedNames = setToSortedString(uniqueNames);
            try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
            } finally{
                resetCurrentFiber();
            }
        });
    };
    ReactStrictModeWarnings.discardPendingWarnings = function() {
        pendingComponentWillMountWarnings = [];
        pendingUNSAFE_ComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUNSAFE_ComponentWillUpdateWarnings = [];
        pendingLegacyContextWarning = new Map();
    };
    function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for(var propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
            return props;
        }
        return baseProps;
    }
    var valueCursor = createCursor(null);
    var rendererSigil;
    rendererSigil = {};
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastFullyObservedContext = null;
    var isDisallowedContextReadInDEV = false;
    function resetContextDependencies() {
        currentlyRenderingFiber = null;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        isDisallowedContextReadInDEV = false;
    }
    function enterDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = true;
    }
    function exitDisallowedContextReadInDEV() {
        isDisallowedContextReadInDEV = false;
    }
    function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
        context._currentRenderer = rendererSigil;
    }
    function popProvider(context, providerFiber) {
        var currentValue = valueCursor.current;
        pop(valueCursor, providerFiber);
        context._currentValue = currentValue;
    }
    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
        var node = parent;
        while(node !== null){
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
                node.childLanes = mergeLanes(node.childLanes, renderLanes);
                if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
            if (node === propagationRoot) break;
            node = node.return;
        }
        if (node !== propagationRoot) error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
    }
    function propagateContextChange(workInProgress, context, renderLanes) {
        propagateContextChange_eager(workInProgress, context, renderLanes);
    }
    function propagateContextChange_eager(workInProgress, context, renderLanes) {
        var fiber = workInProgress.child;
        if (fiber !== null) fiber.return = workInProgress;
        while(fiber !== null){
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while(dependency !== null){
                    if (dependency.context === context) {
                        if (fiber.tag === ClassComponent) {
                            var lane = pickArbitraryLane(renderLanes);
                            var update = createUpdate(NoTimestamp, lane);
                            update.tag = ForceUpdate;
                            var updateQueue = fiber.updateQueue;
                            if (updateQueue === null) ;
                            else {
                                var sharedQueue = updateQueue.shared;
                                var pending = sharedQueue.pending;
                                if (pending === null) update.next = update;
                                else {
                                    update.next = pending.next;
                                    pending.next = update;
                                }
                                sharedQueue.pending = update;
                            }
                        }
                        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
                        var alternate = fiber.alternate;
                        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
                        scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress);
                        list.lanes = mergeLanes(list.lanes, renderLanes);
                        break;
                    }
                    dependency = dependency.next;
                }
            } else if (fiber.tag === ContextProvider) nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
            else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
                nextFiber = fiber.sibling;
            } else nextFiber = fiber.child;
            if (nextFiber !== null) nextFiber.return = fiber;
            else {
                nextFiber = fiber;
                while(nextFiber !== null){
                    if (nextFiber === workInProgress) {
                        nextFiber = null;
                        break;
                    }
                    var sibling = nextFiber.sibling;
                    if (sibling !== null) {
                        sibling.return = nextFiber.return;
                        nextFiber = sibling;
                        break;
                    }
                    nextFiber = nextFiber.return;
                }
            }
            fiber = nextFiber;
        }
    }
    function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress;
        lastContextDependency = null;
        lastFullyObservedContext = null;
        var dependencies = workInProgress.dependencies;
        if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes)) markWorkInProgressReceivedUpdate();
                dependencies.firstContext = null;
            }
        }
    }
    function readContext(context) {
        if (isDisallowedContextReadInDEV) error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
        var value = context._currentValue;
        if (lastFullyObservedContext === context) ;
        else {
            var contextItem = {
                context: context,
                memoizedValue: value,
                next: null
            };
            if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                    lanes: NoLanes,
                    firstContext: contextItem
                };
            } else lastContextDependency = lastContextDependency.next = contextItem;
        }
        return value;
    }
    var concurrentQueues = null;
    function pushConcurrentUpdateQueue(queue) {
        if (concurrentQueues === null) concurrentQueues = [
            queue
        ];
        else concurrentQueues.push(queue);
    }
    function finishQueueingConcurrentUpdates() {
        if (concurrentQueues !== null) {
            for(var i = 0; i < concurrentQueues.length; i++){
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                    queue.interleaved = null;
                    var firstInterleavedUpdate = lastInterleavedUpdate.next;
                    var lastPendingUpdate = queue.pending;
                    if (lastPendingUpdate !== null) {
                        var firstPendingUpdate = lastPendingUpdate.next;
                        lastPendingUpdate.next = firstInterleavedUpdate;
                        lastInterleavedUpdate.next = firstPendingUpdate;
                    }
                    queue.pending = lastInterleavedUpdate;
                }
            }
            concurrentQueues = null;
        }
    }
    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
    }
    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
        var interleaved = queue.interleaved;
        if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
        } else {
            update.next = interleaved.next;
            interleaved.next = update;
        }
        queue.interleaved = update;
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    function enqueueConcurrentRenderForLane(fiber, lane) {
        return markUpdateLaneFromFiberToRoot(fiber, lane);
    }
    var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
    function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
        var alternate = sourceFiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, lane);
        if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        var node = sourceFiber;
        var parent = sourceFiber.return;
        while(parent !== null){
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            else if ((parent.flags & (Placement | Hydrating)) !== NoFlags) warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            node = parent;
            parent = parent.return;
        }
        if (node.tag === HostRoot) {
            var root = node.stateNode;
            return root;
        } else return null;
    }
    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3;
    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate;
    var currentlyProcessingQueue;
    didWarnUpdateInsideUpdate = false;
    currentlyProcessingQueue = null;
    function initializeUpdateQueue(fiber) {
        var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
            },
            effects: null
        };
        fiber.updateQueue = queue;
    }
    function cloneUpdateQueue(current, workInProgress) {
        var queue = workInProgress.updateQueue;
        var currentQueue = current.updateQueue;
        if (queue === currentQueue) {
            var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
            };
            workInProgress.updateQueue = clone;
        }
    }
    function createUpdate(eventTime, lane) {
        var update = {
            eventTime: eventTime,
            lane: lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
        };
        return update;
    }
    function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) return null;
        var sharedQueue = updateQueue.shared;
        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
            error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
            didWarnUpdateInsideUpdate = true;
        }
        if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) update.next = update;
            else {
                update.next = pending.next;
                pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
        } else return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
    }
    function entangleTransitions(root, fiber, lane) {
        var updateQueue = fiber.updateQueue;
        if (updateQueue === null) return;
        var sharedQueue = updateQueue.shared;
        if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root, newQueueLanes);
        }
    }
    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        var queue = workInProgress.updateQueue;
        var current = workInProgress.alternate;
        if (current !== null) {
            var currentQueue = current.updateQueue;
            if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                    var update = firstBaseUpdate;
                    do {
                        var clone = {
                            eventTime: update.eventTime,
                            lane: update.lane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        if (newLast === null) newFirst = newLast = clone;
                        else {
                            newLast.next = clone;
                            newLast = clone;
                        }
                        update = update.next;
                    }while (update !== null)
                    if (newLast === null) newFirst = newLast = capturedUpdate;
                    else {
                        newLast.next = capturedUpdate;
                        newLast = capturedUpdate;
                    }
                } else newFirst = newLast = capturedUpdate;
                queue = {
                    baseState: currentQueue.baseState,
                    firstBaseUpdate: newFirst,
                    lastBaseUpdate: newLast,
                    shared: currentQueue.shared,
                    effects: currentQueue.effects
                };
                workInProgress.updateQueue = queue;
                return;
            }
        }
        var lastBaseUpdate = queue.lastBaseUpdate;
        if (lastBaseUpdate === null) queue.firstBaseUpdate = capturedUpdate;
        else lastBaseUpdate.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
    }
    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
        switch(update.tag){
            case ReplaceState:
                var payload = update.payload;
                if (typeof payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    var nextState = payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                    return nextState;
                }
                return payload;
            case CaptureUpdate:
                workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
            case UpdateState:
                var _payload = update.payload;
                var partialState;
                if (typeof _payload === 'function') {
                    enterDisallowedContextReadInDEV();
                    partialState = _payload.call(instance, prevState, nextProps);
                    if (workInProgress.mode & StrictLegacyMode) {
                        setIsStrictModeForDevtools(true);
                        try {
                            _payload.call(instance, prevState, nextProps);
                        } finally{
                            setIsStrictModeForDevtools(false);
                        }
                    }
                    exitDisallowedContextReadInDEV();
                } else partialState = _payload;
                if (partialState === null || partialState === undefined) return prevState;
                return assign({}, prevState, partialState);
            case ForceUpdate:
                hasForceUpdate = true;
                return prevState;
        }
        return prevState;
    }
    function processUpdateQueue(workInProgress, props, instance, renderLanes) {
        var queue = workInProgress.updateQueue;
        hasForceUpdate = false;
        currentlyProcessingQueue = queue.shared;
        var firstBaseUpdate = queue.firstBaseUpdate;
        var lastBaseUpdate = queue.lastBaseUpdate;
        var pendingQueue = queue.shared.pending;
        if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) firstBaseUpdate = firstPendingUpdate;
            else lastBaseUpdate.next = firstPendingUpdate;
            lastBaseUpdate = lastPendingUpdate;
            var current = workInProgress.alternate;
            if (current !== null) {
                var currentQueue = current.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                    if (currentLastBaseUpdate === null) currentQueue.firstBaseUpdate = firstPendingUpdate;
                    else currentLastBaseUpdate.next = firstPendingUpdate;
                    currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
            }
        }
        if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
                var updateLane = update.lane;
                var updateEventTime = update.eventTime;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    var clone = {
                        eventTime: updateEventTime,
                        lane: updateLane,
                        tag: update.tag,
                        payload: update.payload,
                        callback: update.callback,
                        next: null
                    };
                    if (newLastBaseUpdate === null) {
                        newFirstBaseUpdate = newLastBaseUpdate = clone;
                        newBaseState = newState;
                    } else newLastBaseUpdate = newLastBaseUpdate.next = clone;
                    newLanes = mergeLanes(newLanes, updateLane);
                } else {
                    if (newLastBaseUpdate !== null) {
                        var _clone = {
                            eventTime: updateEventTime,
                            lane: NoLane,
                            tag: update.tag,
                            payload: update.payload,
                            callback: update.callback,
                            next: null
                        };
                        newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                    }
                    newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
                    var callback = update.callback;
                    if (callback !== null && update.lane !== NoLane) {
                        workInProgress.flags |= Callback;
                        var effects = queue.effects;
                        if (effects === null) queue.effects = [
                            update
                        ];
                        else effects.push(update);
                    }
                }
                update = update.next;
                if (update === null) {
                    pendingQueue = queue.shared.pending;
                    if (pendingQueue === null) break;
                    else {
                        var _lastPendingUpdate = pendingQueue;
                        var _firstPendingUpdate = _lastPendingUpdate.next;
                        _lastPendingUpdate.next = null;
                        update = _firstPendingUpdate;
                        queue.lastBaseUpdate = _lastPendingUpdate;
                        queue.shared.pending = null;
                    }
                }
            }while (true)
            if (newLastBaseUpdate === null) newBaseState = newState;
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                    newLanes = mergeLanes(newLanes, interleaved.lane);
                    interleaved = interleaved.next;
                }while (interleaved !== lastInterleaved)
            } else if (firstBaseUpdate === null) queue.shared.lanes = NoLanes;
            markSkippedUpdateLanes(newLanes);
            workInProgress.lanes = newLanes;
            workInProgress.memoizedState = newState;
        }
        currentlyProcessingQueue = null;
    }
    function callCallback(callback, context) {
        if (typeof callback !== 'function') throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
        callback.call(context);
    }
    function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false;
    }
    function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate;
    }
    function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        var effects = finishedQueue.effects;
        finishedQueue.effects = null;
        if (effects !== null) for(var i = 0; i < effects.length; i++){
            var effect = effects[i];
            var callback = effect.callback;
            if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
            }
        }
    }
    var fakeInternalInstance = {};
    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent;
    var didWarnAboutUninitializedState;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
    var didWarnAboutLegacyLifecyclesAndDerivedState;
    var didWarnAboutUndefinedDerivedState;
    var warnOnUndefinedDerivedState;
    var warnOnInvalidCallback;
    var didWarnAboutDirectlyAssigningPropsToState;
    var didWarnAboutContextTypeAndContextTypes;
    var didWarnAboutInvalidateContextType;
    didWarnAboutStateAssignmentForComponent = new Set();
    didWarnAboutUninitializedState = new Set();
    didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    didWarnAboutDirectlyAssigningPropsToState = new Set();
    didWarnAboutUndefinedDerivedState = new Set();
    didWarnAboutContextTypeAndContextTypes = new Set();
    didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    warnOnInvalidCallback = function(callback, callerName) {
        if (callback === null || typeof callback === 'function') return;
        var key = callerName + '_' + callback;
        if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key);
            error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
        }
    };
    warnOnUndefinedDerivedState = function(type, partialState) {
        if (partialState === undefined) {
            var componentName = getComponentNameFromType(type) || 'Component';
            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
            }
        }
    };
    Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function() {
            throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
        }
    });
    Object.freeze(fakeInternalInstance);
    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
        var prevState = workInProgress.memoizedState;
        var partialState = getDerivedStateFromProps(nextProps, prevState);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        warnOnUndefinedDerivedState(ctor, partialState);
        var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
        workInProgress.memoizedState = memoizedState;
        if (workInProgress.lanes === NoLanes) {
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = memoizedState;
        }
    }
    var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'setState');
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'replaceState');
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markStateUpdateScheduled(fiber, lane);
        },
        enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== undefined && callback !== null) {
                warnOnInvalidCallback(callback, 'forceUpdate');
                update.callback = callback;
            }
            var root = enqueueUpdate(fiber, update, lane);
            if (root !== null) {
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitions(root, fiber, lane);
            }
            markForceUpdateScheduled(fiber, lane);
        }
    };
    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
        var instance = workInProgress.stateNode;
        if (typeof instance.shouldComponentUpdate === 'function') {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (shouldUpdate === undefined) error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || 'Component');
            return shouldUpdate;
        }
        if (ctor.prototype && ctor.prototype.isPureReactComponent) return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
        return true;
    }
    function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode;
        var name = getComponentNameFromType(ctor) || 'Component';
        var renderPresent = instance.render;
        if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
            else error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
        }
        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
        if (instance.propTypes) error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
        if (instance.contextType) error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
        if (instance.contextTypes) error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
            didWarnAboutContextTypeAndContextTypes.add(ctor);
            error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
        }
        if (typeof instance.componentShouldUpdate === 'function') error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || 'A pure component');
        if (typeof instance.componentDidUnmount === 'function') error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
        if (typeof instance.componentDidReceiveProps === 'function') error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
        if (typeof instance.componentWillRecieveProps === 'function') error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
        if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
        var hasMutatedProps = instance.props !== newProps;
        if (instance.props !== undefined && hasMutatedProps) error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
        if (instance.defaultProps) error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
            error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
        }
        if (typeof instance.getDerivedStateFromProps === 'function') error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof instance.getDerivedStateFromError === 'function') error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
        if (typeof ctor.getSnapshotBeforeUpdate === 'function') error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
        var _state = instance.state;
        if (_state && (typeof _state !== 'object' || isArray(_state))) error('%s.state: must be set to an object or null', name);
        if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
    }
    function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater;
        workInProgress.stateNode = instance;
        set(instance, workInProgress);
        instance._reactInternalInstance = fakeInternalInstance;
    }
    function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false;
        var unmaskedContext = emptyContextObject;
        var context = emptyContextObject;
        var contextType = ctor.contextType;
        if ('contextType' in ctor) {
            var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;
            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = '';
                if (contextType === undefined) addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                else if (typeof contextType !== 'object') addendum = ' However, it is set to a ' + typeof contextType + '.';
                else if (contextType.$$typeof === REACT_PROVIDER_TYPE) addendum = ' Did you accidentally pass the Context.Provider instead?';
                else if (contextType._context !== undefined) addendum = ' Did you accidentally pass the Context.Consumer instead?';
                else addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || 'Component', addendum);
            }
        }
        if (typeof contextType === 'object' && contextType !== null) context = readContext(contextType);
        else {
            unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
        }
        var instance = new ctor(props, context);
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                instance = new ctor(props, context);
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
        adoptClassInstance(workInProgress, instance);
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? 'null' : 'undefined', componentName);
            }
        }
        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
            var foundWillMountName = null;
            var foundWillReceivePropsName = null;
            var foundWillUpdateName = null;
            if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) foundWillMountName = 'componentWillMount';
            else if (typeof instance.UNSAFE_componentWillMount === 'function') foundWillMountName = 'UNSAFE_componentWillMount';
            if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) foundWillReceivePropsName = 'componentWillReceiveProps';
            else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
            if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) foundWillUpdateName = 'componentWillUpdate';
            else if (typeof instance.UNSAFE_componentWillUpdate === 'function') foundWillUpdateName = 'UNSAFE_componentWillUpdate';
            if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || 'Component';
                var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
                }
            }
        }
        if (isLegacyContextConsumer) cacheContext(workInProgress, unmaskedContext, context);
        return instance;
    }
    function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state;
        if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
        if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
        if (oldState !== instance.state) {
            error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress) || 'Component');
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
        var oldState = instance.state;
        if (typeof instance.componentWillReceiveProps === 'function') instance.componentWillReceiveProps(newProps, nextContext);
        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        if (instance.state !== oldState) {
            var componentName = getComponentNameFromFiber(workInProgress) || 'Component';
            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
        }
    }
    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        checkClassInstance(workInProgress, ctor, newProps);
        var instance = workInProgress.stateNode;
        instance.props = newProps;
        instance.state = workInProgress.memoizedState;
        instance.refs = emptyRefsObject;
        initializeUpdateQueue(workInProgress);
        var contextType = ctor.contextType;
        if (typeof contextType === 'object' && contextType !== null) instance.context = readContext(contextType);
        else {
            var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            instance.context = getMaskedContext(workInProgress, unmaskedContext);
        }
        if (instance.state === newProps) {
            var componentName = getComponentNameFromType(ctor) || 'Component';
            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
        instance.state = workInProgress.memoizedState;
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
            callComponentWillMount(workInProgress, instance);
            processUpdateQueue(workInProgress, newProps, instance, renderLanes);
            instance.state = workInProgress.memoizedState;
        }
        if (typeof instance.componentDidMount === 'function') {
            var fiberFlags = Update;
            fiberFlags |= LayoutStatic;
            if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
            workInProgress.flags |= fiberFlags;
        }
    }
    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        var oldProps = workInProgress.memoizedProps;
        instance.props = oldProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (oldProps !== newProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === 'function') {
                var fiberFlags = Update;
                fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
                workInProgress.flags |= fiberFlags;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);
        if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
                if (typeof instance.componentWillMount === 'function') instance.componentWillMount();
                if (typeof instance.UNSAFE_componentWillMount === 'function') instance.UNSAFE_componentWillMount();
            }
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags = Update;
                _fiberFlags |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags;
            }
        } else {
            if (typeof instance.componentDidMount === 'function') {
                var _fiberFlags2 = Update;
                _fiberFlags2 |= LayoutStatic;
                if ((workInProgress.mode & StrictEffectsMode) !== NoMode) _fiberFlags2 |= MountLayoutDev;
                workInProgress.flags |= _fiberFlags2;
            }
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
        var instance = workInProgress.stateNode;
        cloneUpdateQueue(current, workInProgress);
        var unresolvedOldProps = workInProgress.memoizedProps;
        var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
        instance.props = oldProps;
        var unresolvedNewProps = workInProgress.pendingProps;
        var oldContext = instance.context;
        var contextType = ctor.contextType;
        var nextContext = emptyContextObject;
        if (typeof contextType === 'object' && contextType !== null) nextContext = readContext(contextType);
        else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
            nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
        }
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
        var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
        resetHasForceUpdateBeforeProcessing();
        var oldState = workInProgress.memoizedState;
        var newState = instance.state = oldState;
        processUpdateQueue(workInProgress, newProps, instance, renderLanes);
        newState = workInProgress.memoizedState;
        if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            return false;
        }
        if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress.memoizedState;
        }
        var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;
        if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
                if (typeof instance.componentWillUpdate === 'function') instance.componentWillUpdate(newProps, newState, nextContext);
                if (typeof instance.UNSAFE_componentWillUpdate === 'function') instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
            }
            if (typeof instance.componentDidUpdate === 'function') workInProgress.flags |= Update;
            if (typeof instance.getSnapshotBeforeUpdate === 'function') workInProgress.flags |= Snapshot;
        } else {
            if (typeof instance.componentDidUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === 'function') {
                if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) workInProgress.flags |= Snapshot;
            }
            workInProgress.memoizedProps = newProps;
            workInProgress.memoizedState = newState;
        }
        instance.props = newProps;
        instance.state = newState;
        instance.context = nextContext;
        return shouldUpdate;
    }
    var didWarnAboutMaps;
    var didWarnAboutGenerators;
    var didWarnAboutStringRefs;
    var ownerHasKeyUseWarning;
    var ownerHasFunctionTypeWarning;
    var warnForMissingKey = function(child, returnFiber) {};
    didWarnAboutMaps = false;
    didWarnAboutGenerators = false;
    didWarnAboutStringRefs = {};
    ownerHasKeyUseWarning = {};
    ownerHasFunctionTypeWarning = {};
    warnForMissingKey = function(child, returnFiber) {
        if (child === null || typeof child !== 'object') return;
        if (!child._store || child._store.validated || child.key != null) return;
        if (typeof child._store !== 'object') throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
        child._store.validated = true;
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasKeyUseWarning[componentName]) return;
        ownerHasKeyUseWarning[componentName] = true;
        error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
    };
    function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref;
        if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
            if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
                if (!didWarnAboutStringRefs[componentName]) {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    didWarnAboutStringRefs[componentName] = true;
                }
            }
            if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                    var ownerFiber = owner;
                    if (ownerFiber.tag !== ClassComponent) throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                    inst = ownerFiber.stateNode;
                }
                if (!inst) throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
                var resolvedInst = inst;
                checkPropStringCoercion(mixedRef, 'ref');
                var stringRef = '' + mixedRef;
                if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) return current.ref;
                var ref = function(value) {
                    var refs = resolvedInst.refs;
                    if (refs === emptyRefsObject) refs = resolvedInst.refs = {};
                    if (value === null) delete refs[stringRef];
                    else refs[stringRef] = value;
                };
                ref._stringRef = stringRef;
                return ref;
            } else {
                if (typeof mixedRef !== 'string') throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
                if (!element._owner) throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
            }
        }
        return mixedRef;
    }
    function throwOnInvalidObjectType(returnFiber, newChild) {
        var childString = Object.prototype.toString.call(newChild);
        throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
    }
    function warnOnFunctionType(returnFiber) {
        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';
        if (ownerHasFunctionTypeWarning[componentName]) return;
        ownerHasFunctionTypeWarning[componentName] = true;
        error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
    }
    function resolveLazy(lazyType) {
        var payload = lazyType._payload;
        var init = lazyType._init;
        return init(payload);
    }
    function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) return;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
                returnFiber.deletions = [
                    childToDelete
                ];
                returnFiber.flags |= ChildDeletion;
            } else deletions.push(childToDelete);
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) return null;
            var childToDelete = currentFirstChild;
            while(childToDelete !== null){
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
            }
            return null;
        }
        function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while(existingChild !== null){
                if (existingChild.key !== null) existingChildren.set(existingChild.key, existingChild);
                else existingChildren.set(existingChild.index, existingChild);
                existingChild = existingChild.sibling;
            }
            return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
            }
            var current = newFiber.alternate;
            if (current !== null) {
                var oldIndex = current.index;
                if (oldIndex < lastPlacedIndex) {
                    newFiber.flags |= Placement;
                    return lastPlacedIndex;
                } else return oldIndex;
            } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
            }
        }
        function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) newFiber.flags |= Placement;
            return newFiber;
        }
        function updateTextNode(returnFiber, current, textContent, lanes) {
            if (current === null || current.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                var existing = useFiber(current, textContent);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateElement(returnFiber, current, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
            if (current !== null) {
                if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
                    var existing = useFiber(current, element.props);
                    existing.ref = coerceRef(returnFiber, current, element);
                    existing.return = returnFiber;
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                    return existing;
                }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current, element);
            created.return = returnFiber;
            return created;
        }
        function updatePortal(returnFiber, current, portal, lanes) {
            if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            } else {
                var existing = useFiber(current, portal.children || []);
                existing.return = returnFiber;
                return existing;
            }
        }
        function updateFragment(returnFiber, current, fragment, lanes, key) {
            if (current === null || current.tag !== Fragment) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
            } else {
                var existing = useFiber(current, fragment);
                existing.return = returnFiber;
                return existing;
            }
        }
        function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                        _created.ref = coerceRef(returnFiber, null, newChild);
                        _created.return = returnFiber;
                        return _created;
                    case REACT_PORTAL_TYPE:
                        var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                        _created2.return = returnFiber;
                        return _created2;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return createChild(returnFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                    _created3.return = returnFiber;
                    return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                if (key !== null) return null;
                return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        if (newChild.key === key) return updateElement(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_PORTAL_TYPE:
                        if (newChild.key === key) return updatePortal(returnFiber, oldFiber, newChild, lanes);
                        else return null;
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    if (key !== null) return null;
                    return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
            }
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                    case REACT_PORTAL_TYPE:
                        var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                        return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                    var _matchedFiber3 = existingChildren.get(newIdx) || null;
                    return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return null;
        }
        function warnOnInvalidKey(child, knownKeys, returnFiber) {
            if (typeof child !== 'object' || child === null) return knownKeys;
            switch(child.$$typeof){
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== 'string') break;
                    if (knownKeys === null) {
                        knownKeys = new Set();
                        knownKeys.add(key);
                        break;
                    }
                    if (!knownKeys.has(key)) {
                        knownKeys.add(key);
                        break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                    break;
                case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
            }
            return knownKeys;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            var knownKeys = null;
            for(var i = 0; i < newChildren.length; i++){
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for(; oldFiber !== null && newIdx < newChildren.length; newIdx++){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) resultingFirstChild = newFiber;
                else previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                for(; newIdx < newChildren.length; newIdx++){
                    var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                    if (_newFiber === null) continue;
                    lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber;
                    else previousNewFiber.sibling = _newFiber;
                    previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                    var _numberOfForks = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for(; newIdx < newChildren.length; newIdx++){
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber2.alternate !== null) existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber2;
                    else previousNewFiber.sibling = _newFiber2;
                    previousNewFiber = _newFiber2;
                }
            }
            if (shouldTrackSideEffects) existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== 'function') throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            if (typeof Symbol === 'function' && newChildrenIterable[Symbol.toStringTag] === 'Generator') {
                if (!didWarnAboutGenerators) error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                didWarnAboutGenerators = true;
            }
            if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                didWarnAboutMaps = true;
            }
            var _newChildren = iteratorFn.call(newChildrenIterable);
            if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for(; !_step.done; _step = _newChildren.next()){
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) throw new Error('An iterable object provided no iterator.');
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for(; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()){
                if (oldFiber.index > newIdx) {
                    nextOldFiber = oldFiber;
                    oldFiber = null;
                } else nextOldFiber = oldFiber.sibling;
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                    if (oldFiber === null) oldFiber = nextOldFiber;
                    break;
                }
                if (shouldTrackSideEffects) {
                    if (oldFiber && newFiber.alternate === null) deleteChild(returnFiber, oldFiber);
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) resultingFirstChild = newFiber;
                else previousNewFiber.sibling = newFiber;
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
            }
            if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                    var numberOfForks = newIdx;
                    pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
            }
            if (oldFiber === null) {
                for(; !step.done; newIdx++, step = newChildren.next()){
                    var _newFiber3 = createChild(returnFiber, step.value, lanes);
                    if (_newFiber3 === null) continue;
                    lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber3;
                    else previousNewFiber.sibling = _newFiber3;
                    previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                    var _numberOfForks3 = newIdx;
                    pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for(; !step.done; newIdx++, step = newChildren.next()){
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                    if (shouldTrackSideEffects) {
                        if (_newFiber4.alternate !== null) existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                    lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                    if (previousNewFiber === null) resultingFirstChild = _newFiber4;
                    else previousNewFiber.sibling = _newFiber4;
                    previousNewFiber = _newFiber4;
                }
            }
            if (shouldTrackSideEffects) existingChildren.forEach(function(child) {
                return deleteChild(returnFiber, child);
            });
            if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
        }
        function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while(child !== null){
                if (child.key === key) {
                    var elementType = element.type;
                    if (elementType === REACT_FRAGMENT_TYPE) {
                        if (child.tag === Fragment) {
                            deleteRemainingChildren(returnFiber, child.sibling);
                            var existing = useFiber(child, element.props.children);
                            existing.return = returnFiber;
                            existing._debugSource = element._source;
                            existing._debugOwner = element._owner;
                            return existing;
                        }
                    } else if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var _existing = useFiber(child, element.props);
                        _existing.ref = coerceRef(returnFiber, child, element);
                        _existing.return = returnFiber;
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                        return _existing;
                    }
                    deleteRemainingChildren(returnFiber, child);
                    break;
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
            } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
            }
        }
        function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while(child !== null){
                if (child.key === key) {
                    if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                        deleteRemainingChildren(returnFiber, child.sibling);
                        var existing = useFiber(child, portal.children || []);
                        existing.return = returnFiber;
                        return existing;
                    } else {
                        deleteRemainingChildren(returnFiber, child);
                        break;
                    }
                } else deleteChild(returnFiber, child);
                child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
        }
        function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) newChild = newChild.props.children;
            if (typeof newChild === 'object' && newChild !== null) {
                switch(newChild.$$typeof){
                    case REACT_ELEMENT_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_PORTAL_TYPE:
                        return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                    case REACT_LAZY_TYPE:
                        var payload = newChild._payload;
                        var init = newChild._init;
                        return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray(newChild)) return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                if (getIteratorFn(newChild)) return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
            if (typeof newChild === 'function') warnOnFunctionType(returnFiber);
            return deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return reconcileChildFibers;
    }
    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);
    function cloneChildFibers(current, workInProgress) {
        if (current !== null && workInProgress.child !== current.child) throw new Error('Resuming work not yet implemented.');
        if (workInProgress.child === null) return;
        var currentChild = workInProgress.child;
        var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
        workInProgress.child = newChild;
        newChild.return = workInProgress;
        while(currentChild.sibling !== null){
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress;
        }
        newChild.sibling = null;
    }
    function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child;
        while(child !== null){
            resetWorkInProgress(child, lanes);
            child = child.sibling;
        }
    }
    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);
    function requiredContext(c) {
        if (c === NO_CONTEXT) throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
        return c;
    }
    function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        return rootInstance;
    }
    function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance, fiber);
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, NO_CONTEXT, fiber);
        var nextRootContext = getRootHostContext(nextRootInstance);
        pop(contextStackCursor$1, fiber);
        push(contextStackCursor$1, nextRootContext, fiber);
    }
    function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
        pop(rootInstanceStackCursor, fiber);
    }
    function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current);
        return context;
    }
    function pushHostContext(fiber) {
        var rootInstance = requiredContext(rootInstanceStackCursor.current);
        var context = requiredContext(contextStackCursor$1.current);
        var nextContext = getChildHostContext(context, fiber.type);
        if (context === nextContext) return;
        push(contextFiberStackCursor, fiber, fiber);
        push(contextStackCursor$1, nextContext, fiber);
    }
    function popHostContext(fiber) {
        if (contextFiberStackCursor.current !== fiber) return;
        pop(contextStackCursor$1, fiber);
        pop(contextFiberStackCursor, fiber);
    }
    var DefaultSuspenseContext = 0;
    var SubtreeSuspenseContextMask = 1;
    var InvisibleParentSuspenseContext = 1;
    var ForceSuspenseFallback = 2;
    var suspenseStackCursor = createCursor(DefaultSuspenseContext);
    function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0;
    }
    function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask;
    }
    function setShallowSuspenseContext(parentContext, shallowContext) {
        return parentContext & SubtreeSuspenseContextMask | shallowContext;
    }
    function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext;
    }
    function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber);
    }
    function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber);
    }
    function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        var nextState = workInProgress.memoizedState;
        if (nextState !== null) {
            if (nextState.dehydrated !== null) return true;
            return false;
        }
        var props = workInProgress.memoizedProps;
        return true;
    }
    function findFirstSuspended(row) {
        var node = row;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) {
                    var dehydrated = state.dehydrated;
                    if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) return node;
                }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {
                var didSuspend = (node.flags & DidCapture) !== NoFlags;
                if (didSuspend) return node;
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === row) return null;
            while(node.sibling === null){
                if (node.return === null || node.return === row) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return null;
    }
    var NoFlags$1 = 0;
    var HasEffect = 1;
    var Insertion = 2;
    var Layout = 4;
    var Passive$1 = 8;
    var workInProgressSources = [];
    function resetWorkInProgressVersions() {
        for(var i = 0; i < workInProgressSources.length; i++){
            var mutableSource = workInProgressSources[i];
            mutableSource._workInProgressVersionPrimary = null;
        }
        workInProgressSources.length = 0;
    }
    function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion;
        var version = getVersion(mutableSource._source);
        if (root.mutableSourceEagerHydrationData == null) root.mutableSourceEagerHydrationData = [
            mutableSource,
            version
        ];
        else root.mutableSourceEagerHydrationData.push(mutableSource, version);
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
    var didWarnAboutMismatchedHooksForComponent;
    var didWarnUncachedGetSnapshot;
    didWarnAboutMismatchedHooksForComponent = new Set();
    var renderLanes = NoLanes;
    var currentlyRenderingFiber$1 = null;
    var currentHook = null;
    var workInProgressHook = null;
    var didScheduleRenderPhaseUpdate = false;
    var didScheduleRenderPhaseUpdateDuringThisPass = false;
    var localIdCounter = 0;
    var globalClientIdCounter = 0;
    var RE_RENDER_LIMIT = 25;
    var currentHookNameInDev = null;
    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;
    var ignorePreviousDependencies = false;
    function mountHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev === null) hookTypesDev = [
            hookName
        ];
        else hookTypesDev.push(hookName);
    }
    function updateHookTypesDev() {
        var hookName = currentHookNameInDev;
        if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++;
            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) warnOnHookMismatchInDev(hookName);
        }
    }
    function checkDepsAreArrayDev(deps) {
        if (deps !== undefined && deps !== null && !isArray(deps)) error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
    }
    function warnOnHookMismatchInDev(currentHookName) {
        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName);
            if (hookTypesDev !== null) {
                var table = '';
                var secondColumnStart = 30;
                for(var i = 0; i <= hookTypesUpdateIndexDev; i++){
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while(row.length < secondColumnStart)row += ' ';
                    row += newHookName + '\n';
                    table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
            }
        }
    }
    function throwInvalidHookError() {
        throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
    }
    function areHookInputsEqual(nextDeps, prevDeps) {
        if (ignorePreviousDependencies) return false;
        if (prevDeps === null) {
            error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            return false;
        }
        if (nextDeps.length !== prevDeps.length) error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
        for(var i = 0; i < prevDeps.length && i < nextDeps.length; i++){
            if (objectIs(nextDeps[i], prevDeps[i])) continue;
            return false;
        }
        return true;
    }
    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber$1 = workInProgress;
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
        workInProgress.memoizedState = null;
        workInProgress.updateQueue = null;
        workInProgress.lanes = NoLanes;
        if (current !== null && current.memoizedState !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        else if (hookTypesDev !== null) ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        else ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        var children = Component(props, secondArg);
        if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                numberOfReRenders += 1;
                ignorePreviousDependencies = false;
                currentHook = null;
                workInProgressHook = null;
                workInProgress.updateQueue = null;
                hookTypesUpdateIndexDev = -1;
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
            }while (didScheduleRenderPhaseUpdateDuringThisPass)
        }
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        workInProgress._debugHookTypes = hookTypesDev;
        var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && (current.mode & ConcurrentMode) !== NoMode) error("Internal React error: Expected static flag was missing. Please notify the React team.");
        didScheduleRenderPhaseUpdate = false;
        if (didRenderTooFewHooks) throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
        return children;
    }
    function checkDidRenderIdHook() {
        var didRenderIdHook = localIdCounter !== 0;
        localIdCounter = 0;
        return didRenderIdHook;
    }
    function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue;
        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
        else workInProgress.flags &= ~(Passive | Update);
        current.lanes = removeLanes(current.lanes, lanes);
    }
    function resetHooksAfterThrow() {
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
        if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while(hook !== null){
                var queue = hook.queue;
                if (queue !== null) queue.pending = null;
                hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = NoLanes;
        currentlyRenderingFiber$1 = null;
        currentHook = null;
        workInProgressHook = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
        isUpdatingOpaqueValueInRenderPhase = false;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        localIdCounter = 0;
    }
    function mountWorkInProgressHook() {
        var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
        };
        if (workInProgressHook === null) currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
        else workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
    }
    function updateWorkInProgressHook() {
        var nextCurrentHook;
        if (currentHook === null) {
            var current = currentlyRenderingFiber$1.alternate;
            if (current !== null) nextCurrentHook = current.memoizedState;
            else nextCurrentHook = null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook;
        if (workInProgressHook === null) nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
        else nextWorkInProgressHook = workInProgressHook.next;
        if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
        } else {
            if (nextCurrentHook === null) throw new Error('Rendered more hooks than during the previous render.');
            currentHook = nextCurrentHook;
            var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
            };
            if (workInProgressHook === null) currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            else workInProgressHook = workInProgressHook.next = newHook;
        }
        return workInProgressHook;
    }
    function createFunctionComponentUpdateQueue() {
        return {
            lastEffect: null,
            stores: null
        };
    }
    function basicStateReducer(state, action) {
        return typeof action === 'function' ? action(state) : action;
    }
    function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook();
        var initialState;
        if (init !== undefined) initialState = init(initialArg);
        else initialState = initialArg;
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer;
        var current = currentHook;
        var baseQueue = current.baseQueue;
        var pendingQueue = queue.pending;
        if (pendingQueue !== null) {
            if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
            }
            if (current.baseQueue !== baseQueue) error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
            current.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
        }
        if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
                var updateLane = update.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                    var clone = {
                        lane: updateLane,
                        action: update.action,
                        hasEagerState: update.hasEagerState,
                        eagerState: update.eagerState,
                        next: null
                    };
                    if (newBaseQueueLast === null) {
                        newBaseQueueFirst = newBaseQueueLast = clone;
                        newBaseState = newState;
                    } else newBaseQueueLast = newBaseQueueLast.next = clone;
                    currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                    markSkippedUpdateLanes(updateLane);
                } else {
                    if (newBaseQueueLast !== null) {
                        var _clone = {
                            lane: NoLane,
                            action: update.action,
                            hasEagerState: update.hasEagerState,
                            eagerState: update.eagerState,
                            next: null
                        };
                        newBaseQueueLast = newBaseQueueLast.next = _clone;
                    }
                    if (update.hasEagerState) newState = update.eagerState;
                    else {
                        var action = update.action;
                        newState = reducer(newState, action);
                    }
                }
                update = update.next;
            }while (update !== null && update !== first)
            if (newBaseQueueLast === null) newBaseState = newState;
            else newBaseQueueLast.next = newBaseQueueFirst;
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
        }
        var lastInterleaved = queue.interleaved;
        if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
            }while (interleaved !== lastInterleaved)
        } else if (baseQueue === null) queue.lanes = NoLanes;
        var dispatch = queue.dispatch;
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook();
        var queue = hook.queue;
        if (queue === null) throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch;
        var lastRenderPhaseUpdate = queue.pending;
        var newState = hook.memoizedState;
        if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
                var action = update.action;
                newState = reducer(newState, action);
                update = update.next;
            }while (update !== firstRenderPhaseUpdate)
            if (!objectIs(newState, hook.memoizedState)) markWorkInProgressReceivedUpdate();
            hook.memoizedState = newState;
            if (hook.baseQueue === null) hook.baseState = newState;
            queue.lastRenderedState = newState;
        }
        return [
            newState,
            dispatch
        ];
    }
    function mountMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function updateMutableSource(source, getSnapshot, subscribe) {
        return undefined;
    }
    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = mountWorkInProgressHook();
        var nextSnapshot;
        var isHydrating = getIsHydrating();
        if (isHydrating) {
            if (getServerSnapshot === undefined) throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            nextSnapshot = getServerSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                    error('The result of getServerSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
        } else {
            nextSnapshot = getSnapshot();
            if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error('The result of getSnapshot should be cached to avoid an infinite loop');
                    didWarnUncachedGetSnapshot = true;
                }
            }
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        hook.memoizedState = nextSnapshot;
        var inst = {
            value: nextSnapshot,
            getSnapshot: getSnapshot
        };
        hook.queue = inst;
        mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]);
        fiber.flags |= Passive;
        pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
        return nextSnapshot;
    }
    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber$1;
        var hook = updateWorkInProgressHook();
        var nextSnapshot = getSnapshot();
        if (!didWarnUncachedGetSnapshot) {
            var cachedSnapshot = getSnapshot();
            if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error('The result of getSnapshot should be cached to avoid an infinite loop');
                didWarnUncachedGetSnapshot = true;
            }
        }
        var prevSnapshot = hook.memoizedState;
        var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
        if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
        }
        var inst = hook.queue;
        updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
        ]);
        if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
            var root = getWorkInProgressRoot();
            if (root === null) throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
            if (!includesBlockingLane(root, renderLanes)) pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
        }
        return nextSnapshot;
    }
    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= StoreConsistency;
        var check = {
            getSnapshot: getSnapshot,
            value: renderedSnapshot
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [
                check
            ];
        } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) componentUpdateQueue.stores = [
                check
            ];
            else stores.push(check);
        }
    }
    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        if (checkIfSnapshotChanged(inst)) forceStoreRerender(fiber);
    }
    function subscribeToStore(fiber, inst, subscribe) {
        var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) forceStoreRerender(fiber);
        };
        return subscribe(handleStoreChange);
    }
    function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        var prevValue = inst.value;
        try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
        } catch (error) {
            return true;
        }
    }
    function forceStoreRerender(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    }
    function mountState(initialState) {
        var hook = mountWorkInProgressHook();
        if (typeof initialState === 'function') initialState = initialState();
        hook.memoizedState = hook.baseState = initialState;
        var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
        };
        hook.queue = queue;
        var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
        return [
            hook.memoizedState,
            dispatch
        ];
    }
    function updateState(initialState) {
        return updateReducer(basicStateReducer);
    }
    function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer);
    }
    function pushEffect(tag, create, destroy, deps) {
        var effect = {
            tag: tag,
            create: create,
            destroy: destroy,
            deps: deps,
            next: null
        };
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
        if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) componentUpdateQueue.lastEffect = effect.next = effect;
            else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
            }
        }
        return effect;
    }
    function mountRef(initialValue) {
        var hook = mountWorkInProgressHook();
        var _ref2 = {
            current: initialValue
        };
        hook.memoizedState = _ref2;
        return _ref2;
    }
    function updateRef(initialValue) {
        var hook = updateWorkInProgressHook();
        return hook.memoizedState;
    }
    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
    }
    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var destroy = undefined;
        if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                    hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                    return;
                }
            }
        }
        currentlyRenderingFiber$1.flags |= fiberFlags;
        hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
    }
    function mountEffect(create, deps) {
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
        else return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
    }
    function updateEffect(create, deps) {
        return updateEffectImpl(Passive, Passive$1, create, deps);
    }
    function mountInsertionEffect(create, deps) {
        return mountEffectImpl(Update, Insertion, create, deps);
    }
    function updateInsertionEffect(create, deps) {
        return updateEffectImpl(Update, Insertion, create, deps);
    }
    function mountLayoutEffect(create, deps) {
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, create, deps);
    }
    function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps);
    }
    function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
                refCallback(null);
            };
        } else if (ref !== null && ref !== undefined) {
            var refObject = ref;
            if (!refObject.hasOwnProperty('current')) error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
                refObject.current = null;
            };
        }
    }
    function mountImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        var fiberFlags = Update;
        fiberFlags |= LayoutStatic;
        if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) fiberFlags |= MountLayoutDev;
        return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function updateImperativeHandle(ref, create, deps) {
        if (typeof create !== 'function') error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : 'null');
        var effectDeps = deps !== null && deps !== undefined ? deps.concat([
            ref
        ]) : null;
        return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }
    function mountDebugValue(value, formatterFn) {}
    var updateDebugValue = mountDebugValue;
    function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        hook.memoizedState = [
            callback,
            nextDeps
        ];
        return callback;
    }
    function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        var nextDeps = deps === undefined ? null : deps;
        var prevState = hook.memoizedState;
        if (prevState !== null) {
            if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) return prevState[0];
            }
        }
        var nextValue = nextCreate();
        hook.memoizedState = [
            nextValue,
            nextDeps
        ];
        return nextValue;
    }
    function mountDeferredValue(value) {
        var hook = mountWorkInProgressHook();
        hook.memoizedState = value;
        return value;
    }
    function updateDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        var resolvedCurrentHook = currentHook;
        var prevValue = resolvedCurrentHook.memoizedState;
        return updateDeferredValueImpl(hook, prevValue, value);
    }
    function rerenderDeferredValue(value) {
        var hook = updateWorkInProgressHook();
        if (currentHook === null) {
            hook.memoizedState = value;
            return value;
        } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
        }
    }
    function updateDeferredValueImpl(hook, prevValue, value) {
        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
        if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
            }
            return prevValue;
        } else {
            if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
        }
    }
    function startTransition(setPending, callback, options) {
        var previousPriority = getCurrentUpdatePriority();
        setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
        setPending(true);
        var prevTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition = {};
        var currentTransition = ReactCurrentBatchConfig$2.transition;
        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();
        try {
            setPending(false);
            callback();
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    function mountTransition() {
        var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
        var start = startTransition.bind(null, setPending);
        var hook = mountWorkInProgressHook();
        hook.memoizedState = start;
        return [
            isPending,
            start
        ];
    }
    function updateTransition() {
        var _updateState = updateState(), isPending = _updateState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    function rerenderTransition() {
        var _rerenderState = rerenderState(), isPending = _rerenderState[0];
        var hook = updateWorkInProgressHook();
        var start = hook.memoizedState;
        return [
            isPending,
            start
        ];
    }
    var isUpdatingOpaqueValueInRenderPhase = false;
    function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        return isUpdatingOpaqueValueInRenderPhase;
    }
    function mountId() {
        var hook = mountWorkInProgressHook();
        var root = getWorkInProgressRoot();
        var identifierPrefix = root.identifierPrefix;
        var id;
        if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ':' + identifierPrefix + 'R' + treeId;
            var localId = localIdCounter++;
            if (localId > 0) id += 'H' + localId.toString(32);
            id += ':';
        } else {
            var globalClientId = globalClientIdCounter++;
            id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
        }
        hook.memoizedState = id;
        return id;
    }
    function updateId() {
        var hook = updateWorkInProgressHook();
        var id = hook.memoizedState;
        return id;
    }
    function dispatchReducerAction(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function dispatchSetState(fiber, queue, action) {
        if (typeof arguments[3] === 'function') error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
        var lane = requestUpdateLane(fiber);
        var update = {
            lane: lane,
            action: action,
            hasEagerState: false,
            eagerState: null,
            next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                    var prevDispatcher;
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                    try {
                        var currentState = queue.lastRenderedState;
                        var eagerState = lastRenderedReducer(currentState, action);
                        update.hasEagerState = true;
                        update.eagerState = eagerState;
                        if (objectIs(eagerState, currentState)) {
                            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                            return;
                        }
                    } catch (error) {} finally{
                        ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                }
            }
            var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root, fiber, lane, eventTime);
                entangleTransitionUpdate(root, queue, lane);
            }
        }
        markUpdateInDevTools(fiber, lane);
    }
    function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
    }
    function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        if (pending === null) update.next = update;
        else {
            update.next = pending.next;
            pending.next = update;
        }
        queue.pending = update;
    }
    function entangleTransitionUpdate(root, queue, lane) {
        if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root, newQueueLanes);
        }
    }
    function markUpdateInDevTools(fiber, lane, action) {
        markStateUpdateScheduled(fiber, lane);
    }
    var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var HooksDispatcherOnRerenderInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
    var warnInvalidContextAccess = function() {
        error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
    };
    var warnInvalidHookAccess = function() {
        error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
    };
    HooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            mountHookTypesDev();
            checkDepsAreArrayDev(deps);
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    HooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountRef(initialValue);
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            mountHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
            try {
                return mountState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            mountHookTypesDev();
            return mountId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    InvalidNestedHooksDispatcherOnRerenderInDEV = {
        readContext: function(context) {
            warnInvalidContextAccess();
            return readContext(context);
        },
        useCallback: function(callback, deps) {
            currentHookNameInDev = 'useCallback';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateCallback(callback, deps);
        },
        useContext: function(context) {
            currentHookNameInDev = 'useContext';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return readContext(context);
        },
        useEffect: function(create, deps) {
            currentHookNameInDev = 'useEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateEffect(create, deps);
        },
        useImperativeHandle: function(ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateImperativeHandle(ref, create, deps);
        },
        useInsertionEffect: function(create, deps) {
            currentHookNameInDev = 'useInsertionEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateInsertionEffect(create, deps);
        },
        useLayoutEffect: function(create, deps) {
            currentHookNameInDev = 'useLayoutEffect';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateLayoutEffect(create, deps);
        },
        useMemo: function(create, deps) {
            currentHookNameInDev = 'useMemo';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return updateMemo(create, deps);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useReducer: function(reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderReducer(reducer, initialArg, init);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useRef: function(initialValue) {
            currentHookNameInDev = 'useRef';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateRef();
        },
        useState: function(initialState) {
            currentHookNameInDev = 'useState';
            warnInvalidHookAccess();
            updateHookTypesDev();
            var prevDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            try {
                return rerenderState(initialState);
            } finally{
                ReactCurrentDispatcher$1.current = prevDispatcher;
            }
        },
        useDebugValue: function(value, formatterFn) {
            currentHookNameInDev = 'useDebugValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateDebugValue();
        },
        useDeferredValue: function(value) {
            currentHookNameInDev = 'useDeferredValue';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderDeferredValue(value);
        },
        useTransition: function() {
            currentHookNameInDev = 'useTransition';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return rerenderTransition();
        },
        useMutableSource: function(source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateMutableSource();
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
            currentHookNameInDev = 'useSyncExternalStore';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateSyncExternalStore(subscribe, getSnapshot);
        },
        useId: function() {
            currentHookNameInDev = 'useId';
            warnInvalidHookAccess();
            updateHookTypesDev();
            return updateId();
        },
        unstable_isNewReconciler: enableNewReconciler
    };
    var now$1 = Scheduler.unstable_now;
    var commitTime = 0;
    var layoutEffectStartTime = -1;
    var profilerStartTime = -1;
    var passiveEffectStartTime = -1;
    var currentUpdateIsNested = false;
    var nestedUpdateScheduled = false;
    function isCurrentUpdateNested() {
        return currentUpdateIsNested;
    }
    function markNestedUpdateScheduled() {
        nestedUpdateScheduled = true;
    }
    function resetNestedUpdateFlag() {
        currentUpdateIsNested = false;
        nestedUpdateScheduled = false;
    }
    function syncNestedUpdateFlag() {
        currentUpdateIsNested = nestedUpdateScheduled;
        nestedUpdateScheduled = false;
    }
    function getCommitTime() {
        return commitTime;
    }
    function recordCommitTime() {
        commitTime = now$1();
    }
    function startProfilerTimer(fiber) {
        profilerStartTime = now$1();
        if (fiber.actualStartTime < 0) fiber.actualStartTime = now$1();
    }
    function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1;
    }
    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
        if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) fiber.selfBaseDuration = elapsedTime;
            profilerStartTime = -1;
        }
    }
    function recordLayoutEffectDuration(fiber) {
        if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        root.effectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.effectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function recordPassiveEffectDuration(fiber) {
        if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while(parentFiber !== null){
                switch(parentFiber.tag){
                    case HostRoot:
                        var root = parentFiber.stateNode;
                        if (root !== null) root.passiveEffectDuration += elapsedTime;
                        return;
                    case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        if (parentStateNode !== null) parentStateNode.passiveEffectDuration += elapsedTime;
                        return;
                }
                parentFiber = parentFiber.return;
            }
        }
    }
    function startLayoutEffectTimer() {
        layoutEffectStartTime = now$1();
    }
    function startPassiveEffectTimer() {
        passiveEffectStartTime = now$1();
    }
    function transferActualDuration(fiber) {
        var child = fiber.child;
        while(child){
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
        }
    }
    function createCapturedValueAtFiber(value, source) {
        return {
            value: value,
            source: source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
        };
    }
    function createCapturedValue(value, digest, stack) {
        return {
            value: value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
        };
    }
    function showErrorDialog(boundary, errorInfo) {
        return true;
    }
    function logCapturedError(boundary, errorInfo) {
        try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) return;
            var error = errorInfo.value;
            var source = errorInfo.source;
            var stack = errorInfo.stack;
            var componentStack = stack !== null ? stack : '';
            if (error != null && error._suppressLogging) {
                if (boundary.tag === ClassComponent) return;
                console['error'](error);
            }
            var componentName = source ? getComponentNameFromFiber(source) : null;
            var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
            var errorBoundaryMessage;
            if (boundary.tag === HostRoot) errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
            else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
            }
            var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
            console['error'](combinedMessage);
        } catch (e) {
            setTimeout(function() {
                throw e;
            });
        }
    }
    var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;
    function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        update.payload = {
            element: null
        };
        var error = errorInfo.value;
        update.callback = function() {
            onUncaughtError(error);
            logCapturedError(fiber, errorInfo);
        };
        return update;
    }
    function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane);
        update.tag = CaptureUpdate;
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if (typeof getDerivedStateFromError === 'function') {
            var error$1 = errorInfo.value;
            update.payload = function() {
                return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
                markFailedErrorBoundaryForHotReloading(fiber);
                logCapturedError(fiber, errorInfo);
            };
        }
        var inst = fiber.stateNode;
        if (inst !== null && typeof inst.componentDidCatch === 'function') update.callback = function callback() {
            markFailedErrorBoundaryForHotReloading(fiber);
            logCapturedError(fiber, errorInfo);
            if (typeof getDerivedStateFromError !== 'function') markLegacyErrorBoundaryAsFailed(this);
            var error$1 = errorInfo.value;
            var stack = errorInfo.stack;
            this.componentDidCatch(error$1, {
                componentStack: stack !== null ? stack : ''
            });
            if (typeof getDerivedStateFromError !== 'function') {
                if (!includesSomeLane(fiber.lanes, SyncLane)) error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || 'Unknown');
            }
        };
        return update;
    }
    function attachPingListener(root, wakeable, lanes) {
        var pingCache = root.pingCache;
        var threadIDs;
        if (pingCache === null) {
            pingCache = root.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
        } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === undefined) {
                threadIDs = new Set();
                pingCache.set(wakeable, threadIDs);
            }
        }
        if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
            if (isDevToolsPresent) restorePendingUpdaters(root, lanes);
            wakeable.then(ping, ping);
        }
    }
    function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
        var wakeables = suspenseBoundary.updateQueue;
        if (wakeables === null) {
            var updateQueue = new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
        } else wakeables.add(wakeable);
    }
    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
        var tag = sourceFiber.tag;
        if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
            } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
            }
        }
    }
    function getNearestSuspenseBoundaryToCapture(returnFiber) {
        var node = returnFiber;
        do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) return node;
            node = node.return;
        }while (node !== null)
        return null;
    }
    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
        if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) suspenseBoundary.flags |= ShouldCapture;
            else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) sourceFiber.tag = IncompleteClassComponent;
                    else {
                        var update = createUpdate(NoTimestamp, SyncLane);
                        update.tag = ForceUpdate;
                        enqueueUpdate(sourceFiber, update, SyncLane);
                    }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
        }
        suspenseBoundary.flags |= ShouldCapture;
        suspenseBoundary.lanes = rootRenderLanes;
        return suspenseBoundary;
    }
    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= Incomplete;
        if (isDevToolsPresent) restorePendingUpdaters(root, rootRenderLanes);
        if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) markDidThrowWhileHydratingDEV();
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) attachPingListener(root, wakeable, rootRenderLanes);
                attachRetryListener(suspenseBoundary, root, wakeable);
                return;
            } else {
                if (!includesSyncLane(rootRenderLanes)) {
                    attachPingListener(root, wakeable, rootRenderLanes);
                    renderDidSuspendDelayIfPossible();
                    return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
            }
        } else if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
            markDidThrowWhileHydratingDEV();
            var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) _suspenseBoundary.flags |= ForceClientRender;
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
            }
        }
        value = createCapturedValueAtFiber(value, sourceFiber);
        renderDidError(value);
        var workInProgress = returnFiber;
        do {
            switch(workInProgress.tag){
                case HostRoot:
                    var _errorInfo = value;
                    workInProgress.flags |= ShouldCapture;
                    var lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                    var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
                    enqueueCapturedUpdate(workInProgress, update);
                    return;
                case ClassComponent:
                    var errorInfo = value;
                    var ctor = workInProgress.type;
                    var instance = workInProgress.stateNode;
                    if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                        workInProgress.flags |= ShouldCapture;
                        var _lane = pickArbitraryLane(rootRenderLanes);
                        workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);
                        var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);
                        enqueueCapturedUpdate(workInProgress, _update);
                        return;
                    }
                    break;
            }
            workInProgress = workInProgress.return;
        }while (workInProgress !== null)
    }
    function getSuspendedCache() {
        return null;
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass;
    var didWarnAboutModulePatternComponent;
    var didWarnAboutContextTypeOnFunctionComponent;
    var didWarnAboutGetDerivedStateOnFunctionComponent;
    var didWarnAboutFunctionRefs;
    var didWarnAboutReassigningProps;
    var didWarnAboutRevealOrder;
    var didWarnAboutTailOptions;
    didWarnAboutBadClass = {};
    didWarnAboutModulePatternComponent = {};
    didWarnAboutContextTypeOnFunctionComponent = {};
    didWarnAboutGetDerivedStateOnFunctionComponent = {};
    didWarnAboutFunctionRefs = {};
    didWarnAboutReassigningProps = false;
    didWarnAboutRevealOrder = {};
    didWarnAboutTailOptions = {};
    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
        if (current === null) workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
        else workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
    }
    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
        workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
    }
    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var render = Component.render;
        var ref = workInProgress.ref;
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (current === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {
                var resolvedType = type;
                resolvedType = resolveFunctionForHotReloading(type);
                workInProgress.tag = SimpleMemoComponent;
                workInProgress.type = resolvedType;
                validateFunctionComponentInDev(workInProgress, type);
                return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
            }
            var innerPropTypes = type.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(type));
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
            child.ref = workInProgress.ref;
            child.return = workInProgress;
            workInProgress.child = child;
            return child;
        }
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;
        if (_innerPropTypes) checkPropTypes(_innerPropTypes, nextProps, 'prop', getComponentNameFromType(_type));
        var currentChild = current.child;
        var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
        if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        workInProgress.flags |= PerformedWork;
        var newChild = createWorkInProgress(currentChild, nextProps);
        newChild.ref = workInProgress.ref;
        newChild.return = workInProgress;
        workInProgress.child = newChild;
        return newChild;
    }
    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            var outerMemoType = workInProgress.elementType;
            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    outerMemoType = init(payload);
                } catch (x) {
                    outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) checkPropTypes(outerPropTypes, nextProps, 'prop', getComponentNameFromType(outerMemoType));
            }
        }
        if (current !== null) {
            var prevProps = current.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {
                didReceiveUpdate = false;
                workInProgress.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current, renderLanes)) {
                    workInProgress.lanes = current.lanes;
                    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) didReceiveUpdate = true;
            }
        }
        return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
    }
    function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        var prevState = current !== null ? current.memoizedState : null;
        if (nextProps.mode === 'hidden' || enableLegacyHidden) {
            if ((workInProgress.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = nextState;
                pushRenderLanes(workInProgress, renderLanes);
            } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                    var prevBaseLanes = prevState.baseLanes;
                    nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
                } else nextBaseLanes = renderLanes;
                workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                    baseLanes: nextBaseLanes,
                    cachePool: spawnedCachePool,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState;
                workInProgress.updateQueue = null;
                pushRenderLanes(workInProgress, nextBaseLanes);
                return null;
            } else {
                var _nextState2 = {
                    baseLanes: NoLanes,
                    cachePool: null,
                    transitions: null
                };
                workInProgress.memoizedState = _nextState2;
                var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
                pushRenderLanes(workInProgress, subtreeRenderLanes);
            }
        } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);
                workInProgress.memoizedState = null;
            } else _subtreeRenderLanes = renderLanes;
            pushRenderLanes(workInProgress, _subtreeRenderLanes);
        }
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateProfiler(current, workInProgress, renderLanes) {
        workInProgress.flags |= Update;
        var stateNode = workInProgress.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function markRef(current, workInProgress) {
        var ref = workInProgress.ref;
        if (current === null && ref !== null || current !== null && current.ref !== ref) {
            workInProgress.flags |= Ref;
            workInProgress.flags |= RefStatic;
        }
    }
    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
        if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
        context = getMaskedContext(workInProgress, unmaskedContext);
        var nextChildren;
        var hasId;
        prepareToReadContext(workInProgress, renderLanes);
        markComponentRenderStarted(workInProgress);
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
        hasId = checkDidRenderIdHook();
        if (workInProgress.mode & StrictLegacyMode) {
            setIsStrictModeForDevtools(true);
            try {
                nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
                hasId = checkDidRenderIdHook();
            } finally{
                setIsStrictModeForDevtools(false);
            }
        }
        setIsRendering(false);
        markComponentRenderStopped();
        if (current !== null && !didReceiveUpdate) {
            bailoutHooks(current, workInProgress, renderLanes);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
        switch(shouldError(workInProgress)){
            case false:
                var _instance = workInProgress.stateNode;
                var ctor = workInProgress.type;
                var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
            case true:
                workInProgress.flags |= DidCapture;
                workInProgress.flags |= ShouldCapture;
                var error$1 = new Error('Simulated error coming from DevTools');
                var lane = pickArbitraryLane(renderLanes);
                workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
                var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
                enqueueCapturedUpdate(workInProgress, update);
                break;
        }
        if (workInProgress.type !== workInProgress.elementType) {
            var innerPropTypes = Component.propTypes;
            if (innerPropTypes) checkPropTypes(innerPropTypes, nextProps, 'prop', getComponentNameFromType(Component));
        }
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        var instance = workInProgress.stateNode;
        var shouldUpdate;
        if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);
            constructClassInstance(workInProgress, Component, nextProps);
            mountClassInstance(workInProgress, Component, nextProps, renderLanes);
            shouldUpdate = true;
        } else if (current === null) shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
        else shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
        var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);
        var inst = workInProgress.stateNode;
        if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress) || 'a component');
            didWarnAboutReassigningProps = true;
        }
        return nextUnitOfWork;
    }
    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
        markRef(current, workInProgress);
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;
        if (!shouldUpdate && !didCaptureError) {
            if (hasContext) invalidateContextProvider(workInProgress, Component, false);
            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
        }
        var instance = workInProgress.stateNode;
        ReactCurrentOwner$1.current = workInProgress;
        var nextChildren;
        if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
            nextChildren = null;
            stopProfilerTimerIfRunning();
        } else {
            markComponentRenderStarted(workInProgress);
            setIsRendering(true);
            nextChildren = instance.render();
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    instance.render();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            setIsRendering(false);
            markComponentRenderStopped();
        }
        workInProgress.flags |= PerformedWork;
        if (current !== null && didCaptureError) forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        workInProgress.memoizedState = instance.state;
        if (hasContext) invalidateContextProvider(workInProgress, Component, true);
        return workInProgress.child;
    }
    function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode;
        if (root.pendingContext) pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
        else if (root.context) pushTopLevelContextObject(workInProgress, root.context, false);
        pushHostContainer(workInProgress, root.containerInfo);
    }
    function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress);
        if (current === null) throw new Error('Should have a current fiber. This is a bug in React.');
        var nextProps = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        var prevChildren = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, nextProps, null, renderLanes);
        var nextState = workInProgress.memoizedState;
        var root = workInProgress.stateNode;
        var nextChildren = nextState.element;
        if (prevState.isDehydrated) {
            var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
            };
            var updateQueue = workInProgress.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress.memoizedState = overrideState;
            if (workInProgress.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
            } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress);
                return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
            } else {
                enterHydrationState(workInProgress);
                var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
                workInProgress.child = child;
                var node = child;
                while(node){
                    node.flags = node.flags & ~Placement | Hydrating;
                    node = node.sibling;
                }
            }
        } else {
            resetHydrationState();
            if (nextChildren === prevChildren) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        }
        return workInProgress.child;
    }
    function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
        resetHydrationState();
        queueHydrationError(recoverableError);
        workInProgress.flags |= ForceClientRender;
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress);
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        var type = workInProgress.type;
        var nextProps = workInProgress.pendingProps;
        var prevProps = current !== null ? current.memoizedProps : null;
        var nextChildren = nextProps.children;
        var isDirectTextChild = shouldSetTextContent(type, nextProps);
        if (isDirectTextChild) nextChildren = null;
        else if (prevProps !== null && shouldSetTextContent(type, prevProps)) workInProgress.flags |= ContentReset;
        markRef(current, workInProgress);
        reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    function updateHostText(current, workInProgress) {
        if (current === null) tryToClaimNextHydratableInstance(workInProgress);
        return null;
    }
    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var lazyComponent = elementType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;
        var Component = init(payload);
        workInProgress.type = Component;
        var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
        var resolvedProps = resolveDefaultProps(Component, props);
        var child;
        switch(resolvedTag){
            case FunctionComponent:
                validateFunctionComponentInDev(workInProgress, Component);
                workInProgress.type = Component = resolveFunctionForHotReloading(Component);
                child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ClassComponent:
                workInProgress.type = Component = resolveClassForHotReloading(Component);
                child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case ForwardRef:
                workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
                child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
                return child;
            case MemoComponent:
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, resolvedProps, 'prop', getComponentNameFromType(Component));
                }
                child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);
                return child;
        }
        var hint = '';
        if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) hint = ' Did you wrap a component in React.lazy() more than once?';
        throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
    }
    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        workInProgress.tag = ClassComponent;
        var hasContext;
        if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress);
        } else hasContext = false;
        prepareToReadContext(workInProgress, renderLanes);
        constructClassInstance(workInProgress, Component, nextProps);
        mountClassInstance(workInProgress, Component, nextProps, renderLanes);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
    }
    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
        resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
        var props = workInProgress.pendingProps;
        var context;
        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
        context = getMaskedContext(workInProgress, unmaskedContext);
        prepareToReadContext(workInProgress, renderLanes);
        var value;
        var hasId;
        markComponentRenderStarted(workInProgress);
        if (Component.prototype && typeof Component.prototype.render === 'function') {
            var componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
            }
        }
        if (workInProgress.mode & StrictLegacyMode) ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        setIsRendering(true);
        ReactCurrentOwner$1.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        hasId = checkDidRenderIdHook();
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
            }
        }
        if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
            var _componentName2 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
            }
            workInProgress.tag = ClassComponent;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress);
            } else hasContext = false;
            workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
            initializeUpdateQueue(workInProgress);
            adoptClassInstance(workInProgress, value);
            mountClassInstance(workInProgress, Component, props, renderLanes);
            return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
        } else {
            workInProgress.tag = FunctionComponent;
            if (workInProgress.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
                    hasId = checkDidRenderIdHook();
                } finally{
                    setIsStrictModeForDevtools(false);
                }
            }
            if (getIsHydrating() && hasId) pushMaterializedTreeId(workInProgress);
            reconcileChildren(null, workInProgress, value, renderLanes);
            validateFunctionComponentInDev(workInProgress, Component);
            return workInProgress.child;
        }
    }
    function validateFunctionComponentInDev(workInProgress, Component) {
        if (Component) {
            if (Component.childContextTypes) error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
        }
        if (workInProgress.ref !== null) {
            var info = '';
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
            var warningKey = ownerName || '';
            var debugSource = workInProgress._debugSource;
            if (debugSource) warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
            if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
            }
        }
        if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
            }
        }
        if (typeof Component.contextType === 'object' && Component.contextType !== null) {
            var _componentName4 = getComponentNameFromType(Component) || 'Unknown';
            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error('%s: Function components do not support contextType.', _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
            }
        }
    }
    var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: NoLane
    };
    function mountSuspenseOffscreenState(renderLanes) {
        return {
            baseLanes: renderLanes,
            cachePool: getSuspendedCache(),
            transitions: null
        };
    }
    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        var cachePool = null;
        return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
            cachePool: cachePool,
            transitions: prevOffscreenState.transitions
        };
    }
    function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
        if (current !== null) {
            var suspenseState = current.memoizedState;
            if (suspenseState === null) return false;
        }
        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
    }
    function getRemainingWorkInPrimaryTree(current, renderLanes) {
        return removeLanes(current.childLanes, renderLanes);
    }
    function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        if (shouldSuspend(workInProgress)) workInProgress.flags |= DidCapture;
        var suspenseContext = suspenseStackCursor.current;
        var showFallback = false;
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;
        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
            showFallback = true;
            workInProgress.flags &= ~DidCapture;
        } else if (current === null || current.memoizedState !== null) suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        pushSuspenseContext(workInProgress, suspenseContext);
        if (current === null) {
            tryToClaimNextHydratableInstance(workInProgress);
            var suspenseState = workInProgress.memoizedState;
            if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var primaryChildFragment = workInProgress.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
            } else return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
        } else {
            var prevState = current.memoizedState;
            if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
            }
            if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
                var _primaryChildFragment2 = workInProgress.child;
                var prevOffscreenState = current.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);
                workInProgress.memoizedState = null;
                return _primaryChildFragment3;
            }
        }
    }
    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
        var mode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
        primaryChildFragment.return = workInProgress;
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var progressedPrimaryFragment = workInProgress.child;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        var fallbackChildFragment;
        if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
        }
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
        return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
    }
    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
        return createWorkInProgress(current, offscreenProps);
    }
    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: 'visible',
            children: primaryChildren
        });
        if ((workInProgress.mode & ConcurrentMode) === NoMode) primaryChildFragment.lanes = renderLanes;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = null;
        if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress.deletions;
            if (deletions === null) {
                workInProgress.deletions = [
                    currentFallbackChildFragment
                ];
                workInProgress.flags |= ChildDeletion;
            } else deletions.push(currentFallbackChildFragment);
        }
        workInProgress.child = primaryChildFragment;
        return primaryChildFragment;
    }
    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var mode = workInProgress.mode;
        var currentPrimaryChildFragment = current.child;
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
        var primaryChildProps = {
            mode: 'hidden',
            children: primaryChildren
        };
        var primaryChildFragment;
        if ((mode & ConcurrentMode) === NoMode && workInProgress.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress.deletions = null;
        } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
        }
        var fallbackChildFragment;
        if (currentFallbackChildFragment !== null) fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
        else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
            fallbackChildFragment.flags |= Placement;
        }
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        return fallbackChildFragment;
    }
    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
        if (recoverableError !== null) queueHydrationError(recoverableError);
        reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        var nextProps = workInProgress.pendingProps;
        var primaryChildren = nextProps.children;
        var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);
        primaryChildFragment.flags |= Placement;
        workInProgress.memoizedState = null;
        return primaryChildFragment;
    }
    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
        var fiberMode = workInProgress.mode;
        var primaryChildProps = {
            mode: 'visible',
            children: primaryChildren
        };
        var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
        var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null);
        fallbackChildFragment.flags |= Placement;
        primaryChildFragment.return = workInProgress;
        fallbackChildFragment.return = workInProgress;
        primaryChildFragment.sibling = fallbackChildFragment;
        workInProgress.child = primaryChildFragment;
        if ((workInProgress.mode & ConcurrentMode) !== NoMode) reconcileChildFibers(workInProgress, current.child, null, renderLanes);
        return fallbackChildFragment;
    }
    function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            workInProgress.lanes = laneToLanes(SyncLane);
        } else if (isSuspenseInstanceFallback(suspenseInstance)) workInProgress.lanes = laneToLanes(DefaultHydrationLane);
        else workInProgress.lanes = laneToLanes(OffscreenLane);
        return null;
    }
    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
        if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress.mode & ConcurrentMode) === NoMode) return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);
            if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
                var error;
                if (message) error = new Error(message);
                else error = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                var capturedValue = createCapturedValue(error, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
            }
            var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);
            if (didReceiveUpdate || hasContextChanged) {
                var root = getWorkInProgressRoot();
                if (root !== null) {
                    var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);
                    if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                        suspenseState.retryLane = attemptHydrationAtLane;
                        var eventTime = NoTimestamp;
                        enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
                        scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
                    }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress.flags |= DidCapture;
                workInProgress.child = current.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
            } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
            }
        } else {
            if (workInProgress.flags & ForceClientRender) {
                workInProgress.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
            } else if (workInProgress.memoizedState !== null) {
                workInProgress.child = current.child;
                workInProgress.flags |= DidCapture;
                return null;
            } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
                var _primaryChildFragment4 = workInProgress.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
                workInProgress.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
            }
        }
    }
    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
    }
    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
        var node = firstChild;
        while(node !== null){
            if (node.tag === SuspenseComponent) {
                var state = node.memoizedState;
                if (state !== null) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            } else if (node.tag === SuspenseListComponent) scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function findLastContentRow(firstChild) {
        var row = firstChild;
        var lastContentRow = null;
        while(row !== null){
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) lastContentRow = row;
            row = row.sibling;
        }
        return lastContentRow;
    }
    function validateRevealOrder(revealOrder) {
        if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
            didWarnAboutRevealOrder[revealOrder] = true;
            if (typeof revealOrder === 'string') switch(revealOrder.toLowerCase()){
                case 'together':
                case 'forwards':
                case 'backwards':
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                case 'forward':
                case 'backward':
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
            }
            else error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
        }
    }
    function validateTailOptions(tailMode, revealOrder) {
        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
            } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
            }
        }
    }
    function validateSuspenseListNestedChild(childSlot, index) {
        var isAnArray = isArray(childSlot);
        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';
        if (isAnArray || isIterable) {
            var type = isAnArray ? 'array' : 'iterable';
            error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index, type);
            return false;
        }
        return true;
    }
    function validateSuspenseListChildren(children, revealOrder) {
        if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
            if (isArray(children)) for(var i = 0; i < children.length; i++){
                if (!validateSuspenseListNestedChild(children[i], i)) return;
            }
            else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === 'function') {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                        var step = childrenIterator.next();
                        var _i = 0;
                        for(; !step.done; step = childrenIterator.next()){
                            if (!validateSuspenseListNestedChild(step.value, _i)) return;
                            _i++;
                        }
                    }
                } else error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
            }
        }
    }
    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress.memoizedState;
        if (renderState === null) workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode
        };
        else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
        }
    }
    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps;
        var revealOrder = nextProps.revealOrder;
        var tailMode = nextProps.tail;
        var newChildren = nextProps.children;
        validateRevealOrder(revealOrder);
        validateTailOptions(tailMode, revealOrder);
        validateSuspenseListChildren(newChildren, revealOrder);
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        var suspenseContext = suspenseStackCursor.current;
        var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress.flags |= DidCapture;
        } else {
            var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
        }
        pushSuspenseContext(workInProgress, suspenseContext);
        if ((workInProgress.mode & ConcurrentMode) === NoMode) workInProgress.memoizedState = null;
        else switch(revealOrder){
            case 'forwards':
                var lastContentRow = findLastContentRow(workInProgress.child);
                var tail;
                if (lastContentRow === null) {
                    tail = workInProgress.child;
                    workInProgress.child = null;
                } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);
                break;
            case 'backwards':
                var _tail = null;
                var row = workInProgress.child;
                workInProgress.child = null;
                while(row !== null){
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                        workInProgress.child = row;
                        break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                }
                initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);
                break;
            case 'together':
                initSuspenseListRenderState(workInProgress, false, null, null, undefined);
                break;
            default:
                workInProgress.memoizedState = null;
        }
        return workInProgress.child;
    }
    function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        var nextChildren = workInProgress.pendingProps;
        if (current === null) workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
        else reconcileChildren(current, workInProgress, nextChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
    function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type;
        var context = providerType._context;
        var newProps = workInProgress.pendingProps;
        var oldProps = workInProgress.memoizedProps;
        var newValue = newProps.value;
        if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
            }
        }
        var providerPropTypes = workInProgress.type.propTypes;
        if (providerPropTypes) checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
        pushProvider(workInProgress, context, newValue);
        if (oldProps !== null) {
            var oldValue = oldProps.value;
            if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
            } else propagateContextChange(workInProgress, context, renderLanes);
        }
        var newChildren = newProps.children;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    var hasWarnedAboutUsingContextAsConsumer = false;
    function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type;
        if (context._context === undefined) {
            if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
            }
        } else context = context._context;
        var newProps = workInProgress.pendingProps;
        var render = newProps.children;
        if (typeof render !== 'function') error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
        prepareToReadContext(workInProgress, renderLanes);
        var newValue = readContext(context);
        markComponentRenderStarted(workInProgress);
        var newChildren;
        ReactCurrentOwner$1.current = workInProgress;
        setIsRendering(true);
        newChildren = render(newValue);
        setIsRendering(false);
        markComponentRenderStopped();
        workInProgress.flags |= PerformedWork;
        reconcileChildren(current, workInProgress, newChildren, renderLanes);
        return workInProgress.child;
    }
    function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true;
    }
    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
        if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            if (current !== null) {
                current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.flags |= Placement;
            }
        }
    }
    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
        if (current !== null) workInProgress.dependencies = current.dependencies;
        stopProfilerTimerIfRunning();
        markSkippedUpdateLanes(workInProgress.lanes);
        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) return null;
        cloneChildFibers(current, workInProgress);
        return workInProgress.child;
    }
    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        var returnFiber = oldWorkInProgress.return;
        if (returnFiber === null) throw new Error('Cannot swap the root fiber.');
        current.alternate = null;
        oldWorkInProgress.alternate = null;
        newWorkInProgress.index = oldWorkInProgress.index;
        newWorkInProgress.sibling = oldWorkInProgress.sibling;
        newWorkInProgress.return = oldWorkInProgress.return;
        newWorkInProgress.ref = oldWorkInProgress.ref;
        if (oldWorkInProgress === returnFiber.child) returnFiber.child = newWorkInProgress;
        else {
            var prevSibling = returnFiber.child;
            if (prevSibling === null) throw new Error('Expected parent to have a child.');
            while(prevSibling.sibling !== oldWorkInProgress){
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) throw new Error('Expected to find the previous sibling.');
            }
            prevSibling.sibling = newWorkInProgress;
        }
        var deletions = returnFiber.deletions;
        if (deletions === null) {
            returnFiber.deletions = [
                current
            ];
            returnFiber.flags |= ChildDeletion;
        } else deletions.push(current);
        newWorkInProgress.flags |= Placement;
        return newWorkInProgress;
    }
    function checkScheduledUpdateOrContext(current, renderLanes) {
        var updateLanes = current.lanes;
        if (includesSomeLane(updateLanes, renderLanes)) return true;
        return false;
    }
    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
        switch(workInProgress.tag){
            case HostRoot:
                pushHostRootContext(workInProgress);
                var root = workInProgress.stateNode;
                resetHydrationState();
                break;
            case HostComponent:
                pushHostContext(workInProgress);
                break;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) pushContextProvider(workInProgress);
                break;
            case HostPortal:
                pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
                break;
            case ContextProvider:
                var newValue = workInProgress.memoizedProps.value;
                var context = workInProgress.type._context;
                pushProvider(workInProgress, context, newValue);
                break;
            case Profiler:
                var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (hasChildWork) workInProgress.flags |= Update;
                var stateNode = workInProgress.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
                break;
            case SuspenseComponent:
                var state = workInProgress.memoizedState;
                if (state !== null) {
                    if (state.dehydrated !== null) {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        workInProgress.flags |= DidCapture;
                        return null;
                    }
                    var primaryChildFragment = workInProgress.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes, primaryChildLanes)) return updateSuspenseComponent(current, workInProgress, renderLanes);
                    else {
                        pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                        var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
                        if (child !== null) return child.sibling;
                        else return null;
                    }
                } else pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                break;
            case SuspenseListComponent:
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);
                if (didSuspendBefore) {
                    if (_hasChildWork) return updateSuspenseListComponent(current, workInProgress, renderLanes);
                    workInProgress.flags |= DidCapture;
                }
                var renderState = workInProgress.memoizedState;
                if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress, suspenseStackCursor.current);
                if (_hasChildWork) break;
                else return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                workInProgress.lanes = NoLanes;
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
    function beginWork(current, workInProgress, renderLanes) {
        if (workInProgress._debugNeedsRemount && current !== null) return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
        if (current !== null) {
            var oldProps = current.memoizedProps;
            var newProps = workInProgress.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) didReceiveUpdate = true;
            else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);
                if (!hasScheduledUpdateOrContext && (workInProgress.flags & DidCapture) === NoFlags) {
                    didReceiveUpdate = false;
                    return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
                }
                if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) didReceiveUpdate = true;
                else didReceiveUpdate = false;
            }
        } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress)) {
                var slotIndex = workInProgress.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress, numberOfForks, slotIndex);
            }
        }
        workInProgress.lanes = NoLanes;
        switch(workInProgress.tag){
            case IndeterminateComponent:
                return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
            case LazyComponent:
                var elementType = workInProgress.elementType;
                return mountLazyComponent(current, workInProgress, elementType, renderLanes);
            case FunctionComponent:
                var Component = workInProgress.type;
                var unresolvedProps = workInProgress.pendingProps;
                var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
            case ClassComponent:
                var _Component = workInProgress.type;
                var _unresolvedProps = workInProgress.pendingProps;
                var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
            case HostRoot:
                return updateHostRoot(current, workInProgress, renderLanes);
            case HostComponent:
                return updateHostComponent(current, workInProgress, renderLanes);
            case HostText:
                return updateHostText(current, workInProgress);
            case SuspenseComponent:
                return updateSuspenseComponent(current, workInProgress, renderLanes);
            case HostPortal:
                return updatePortalComponent(current, workInProgress, renderLanes);
            case ForwardRef:
                var type = workInProgress.type;
                var _unresolvedProps2 = workInProgress.pendingProps;
                var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
            case Fragment:
                return updateFragment(current, workInProgress, renderLanes);
            case Mode:
                return updateMode(current, workInProgress, renderLanes);
            case Profiler:
                return updateProfiler(current, workInProgress, renderLanes);
            case ContextProvider:
                return updateContextProvider(current, workInProgress, renderLanes);
            case ContextConsumer:
                return updateContextConsumer(current, workInProgress, renderLanes);
            case MemoComponent:
                var _type2 = workInProgress.type;
                var _unresolvedProps3 = workInProgress.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                if (workInProgress.type !== workInProgress.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) checkPropTypes(outerPropTypes, _resolvedProps3, 'prop', getComponentNameFromType(_type2));
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
            case SimpleMemoComponent:
                return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
            case IncompleteClassComponent:
                var _Component2 = workInProgress.type;
                var _unresolvedProps4 = workInProgress.pendingProps;
                var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
            case SuspenseListComponent:
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
            case ScopeComponent:
                break;
            case OffscreenComponent:
                return updateOffscreenComponent(current, workInProgress, renderLanes);
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    function markUpdate(workInProgress) {
        workInProgress.flags |= Update;
    }
    function markRef$1(workInProgress) {
        workInProgress.flags |= Ref;
        workInProgress.flags |= RefStatic;
    }
    var appendAllChildren;
    var updateHostContainer;
    var updateHostComponent$1;
    var updateHostText$1;
    appendAllChildren = function(parent, workInProgress, needsVisibilityToggle, isHidden) {
        var node = workInProgress.child;
        while(node !== null){
            if (node.tag === HostComponent || node.tag === HostText) appendInitialChild(parent, node.stateNode);
            else if (node.tag === HostPortal) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === workInProgress) return;
            while(node.sibling === null){
                if (node.return === null || node.return === workInProgress) return;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    };
    updateHostContainer = function(current, workInProgress) {};
    updateHostComponent$1 = function(current, workInProgress, type, newProps, rootContainerInstance) {
        var oldProps = current.memoizedProps;
        if (oldProps === newProps) return;
        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        workInProgress.updateQueue = updatePayload;
        if (updatePayload) markUpdate(workInProgress);
    };
    updateHostText$1 = function(current, workInProgress, oldText, newText) {
        if (oldText !== newText) markUpdate(workInProgress);
    };
    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) return;
        switch(renderState.tailMode){
            case 'hidden':
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while(tailNode !== null){
                    if (tailNode.alternate !== null) lastTailNode = tailNode;
                    tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) renderState.tail = null;
                else lastTailNode.sibling = null;
                break;
            case 'collapsed':
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while(_tailNode !== null){
                    if (_tailNode.alternate !== null) _lastTailNode = _tailNode;
                    _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                    if (!hasRenderedATailFallback && renderState.tail !== null) renderState.tail.sibling = null;
                    else renderState.tail = null;
                } else _lastTailNode.sibling = null;
                break;
        }
    }
    function bubbleProperties(completedWork) {
        var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
        var newChildLanes = NoLanes;
        var subtreeFlags = NoFlags;
        if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while(child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                    subtreeFlags |= child.subtreeFlags;
                    subtreeFlags |= child.flags;
                    actualDuration += child.actualDuration;
                    treeBaseDuration += child.treeBaseDuration;
                    child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
            } else {
                var _child = completedWork.child;
                while(_child !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                    subtreeFlags |= _child.subtreeFlags;
                    subtreeFlags |= _child.flags;
                    _child.return = completedWork;
                    _child = _child.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while(_child2 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                    subtreeFlags |= _child2.subtreeFlags & StaticMask;
                    subtreeFlags |= _child2.flags & StaticMask;
                    _treeBaseDuration += _child2.treeBaseDuration;
                    _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
                var _child3 = completedWork.child;
                while(_child3 !== null){
                    newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                    subtreeFlags |= _child3.subtreeFlags & StaticMask;
                    subtreeFlags |= _child3.flags & StaticMask;
                    _child3.return = completedWork;
                    _child3 = _child3.sibling;
                }
            }
            completedWork.subtreeFlags |= subtreeFlags;
        }
        completedWork.childLanes = newChildLanes;
        return didBailout;
    }
    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
        if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress);
            resetHydrationState();
            workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
        }
        var wasHydrated = popHydrationState(workInProgress);
        if (nextState !== null && nextState.dehydrated !== null) {
            if (current === null) {
                if (!wasHydrated) throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                prepareToHydrateHostSuspenseInstance(workInProgress);
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            } else {
                resetHydrationState();
                if ((workInProgress.flags & DidCapture) === NoFlags) workInProgress.memoizedState = null;
                workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                        var _primaryChildFragment = workInProgress.child;
                        if (_primaryChildFragment !== null) workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                }
                return false;
            }
        } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
        }
    }
    function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps;
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
                bubbleProperties(workInProgress);
                return null;
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostRoot:
                var fiberRoot = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                    fiberRoot.context = fiberRoot.pendingContext;
                    fiberRoot.pendingContext = null;
                }
                if (current === null || current.child === null) {
                    var wasHydrated = popHydrationState(workInProgress);
                    if (wasHydrated) markUpdate(workInProgress);
                    else if (current !== null) {
                        var prevState = current.memoizedState;
                        if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags) {
                            workInProgress.flags |= Snapshot;
                            upgradeHydrationErrorsToRecoverable();
                        }
                    }
                }
                updateHostContainer(current, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress.type;
                if (current !== null && workInProgress.stateNode != null) {
                    updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);
                    if (current.ref !== workInProgress.ref) markRef$1(workInProgress);
                } else {
                    if (!newProps) {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                        bubbleProperties(workInProgress);
                        return null;
                    }
                    var currentHostContext = getHostContext();
                    var _wasHydrated = popHydrationState(workInProgress);
                    if (_wasHydrated) {
                        if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) markUpdate(workInProgress);
                    } else {
                        var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                        appendAllChildren(instance, workInProgress, false, false);
                        workInProgress.stateNode = instance;
                        if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) markUpdate(workInProgress);
                    }
                    if (workInProgress.ref !== null) markRef$1(workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case HostText:
                var newText = newProps;
                if (current && workInProgress.stateNode != null) {
                    var oldText = current.memoizedProps;
                    updateHostText$1(current, workInProgress, oldText, newText);
                } else {
                    if (typeof newText !== 'string') {
                        if (workInProgress.stateNode === null) throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var _rootContainerInstance = getRootHostContainer();
                    var _currentHostContext = getHostContext();
                    var _wasHydrated2 = popHydrationState(workInProgress);
                    if (_wasHydrated2) {
                        if (prepareToHydrateHostTextInstance(workInProgress)) markUpdate(workInProgress);
                    } else workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
                }
                bubbleProperties(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var nextState = workInProgress.memoizedState;
                if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
                    var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);
                    if (!fallthroughToNormalSuspensePath) {
                        if (workInProgress.flags & ShouldCapture) return workInProgress;
                        else return null;
                    }
                }
                if ((workInProgress.flags & DidCapture) !== NoFlags) {
                    workInProgress.lanes = renderLanes;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current !== null && current.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                    if (nextDidTimeout) {
                        var _offscreenFiber2 = workInProgress.child;
                        _offscreenFiber2.flags |= Visibility;
                        if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
                            var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) renderDidSuspend();
                            else renderDidSuspendDelayIfPossible();
                        }
                    }
                }
                var wakeables = workInProgress.updateQueue;
                if (wakeables !== null) workInProgress.flags |= Update;
                bubbleProperties(workInProgress);
                if ((workInProgress.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                        var primaryChildFragment = workInProgress.child;
                        if (primaryChildFragment !== null) workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                }
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                updateHostContainer(current, workInProgress);
                if (current === null) preparePortalMount(workInProgress.stateNode.containerInfo);
                bubbleProperties(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case IncompleteClassComponent:
                var _Component = workInProgress.type;
                if (isContextProvider(_Component)) popContext(workInProgress);
                bubbleProperties(workInProgress);
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                var renderState = workInProgress.memoizedState;
                if (renderState === null) {
                    bubbleProperties(workInProgress);
                    return null;
                }
                var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                    if (!didSuspendAlready) {
                        var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);
                        if (!cannotBeSuspended) {
                            var row = workInProgress.child;
                            while(row !== null){
                                var suspended = findFirstSuspended(row);
                                if (suspended !== null) {
                                    didSuspendAlready = true;
                                    workInProgress.flags |= DidCapture;
                                    cutOffTailIfNeeded(renderState, false);
                                    var newThenables = suspended.updateQueue;
                                    if (newThenables !== null) {
                                        workInProgress.updateQueue = newThenables;
                                        workInProgress.flags |= Update;
                                    }
                                    workInProgress.subtreeFlags = NoFlags;
                                    resetChildFibers(workInProgress, renderLanes);
                                    pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                                    return workInProgress.child;
                                }
                                row = row.sibling;
                            }
                        }
                        if (renderState.tail !== null && now() > getRenderTargetTime()) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false);
                            workInProgress.lanes = SomeRetryLane;
                        }
                    } else cutOffTailIfNeeded(renderState, false);
                } else {
                    if (!didSuspendAlready) {
                        var _suspended = findFirstSuspended(renderedTail);
                        if (_suspended !== null) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            var _newThenables = _suspended.updateQueue;
                            if (_newThenables !== null) {
                                workInProgress.updateQueue = _newThenables;
                                workInProgress.flags |= Update;
                            }
                            cutOffTailIfNeeded(renderState, true);
                            if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating()) {
                                bubbleProperties(workInProgress);
                                return null;
                            }
                        } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
                            workInProgress.flags |= DidCapture;
                            didSuspendAlready = true;
                            cutOffTailIfNeeded(renderState, false);
                            workInProgress.lanes = SomeRetryLane;
                        }
                    }
                    if (renderState.isBackwards) {
                        renderedTail.sibling = workInProgress.child;
                        workInProgress.child = renderedTail;
                    } else {
                        var previousSibling = renderState.last;
                        if (previousSibling !== null) previousSibling.sibling = renderedTail;
                        else workInProgress.child = renderedTail;
                        renderState.last = renderedTail;
                    }
                }
                if (renderState.tail !== null) {
                    var next = renderState.tail;
                    renderState.rendering = next;
                    renderState.tail = next.sibling;
                    renderState.renderingStartTime = now();
                    next.sibling = null;
                    var suspenseContext = suspenseStackCursor.current;
                    if (didSuspendAlready) suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                    else suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                    pushSuspenseContext(workInProgress, suspenseContext);
                    return next;
                }
                bubbleProperties(workInProgress);
                return null;
            case ScopeComponent:
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                var _nextState = workInProgress.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current !== null) {
                    var _prevState = current.memoizedState;
                    var prevIsHidden = _prevState !== null;
                    if (prevIsHidden !== nextIsHidden && !enableLegacyHidden) workInProgress.flags |= Visibility;
                }
                if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) bubbleProperties(workInProgress);
                else if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress);
                    if (workInProgress.subtreeFlags & (Placement | Update)) workInProgress.flags |= Visibility;
                }
                return null;
            case CacheComponent:
                return null;
            case TracingMarkerComponent:
                return null;
        }
        throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
    }
    function unwindWork(current, workInProgress, renderLanes) {
        popTreeContext(workInProgress);
        switch(workInProgress.tag){
            case ClassComponent:
                var Component = workInProgress.type;
                if (isContextProvider(Component)) popContext(workInProgress);
                var flags = workInProgress.flags;
                if (flags & ShouldCapture) {
                    workInProgress.flags = flags & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case HostRoot:
                var root = workInProgress.stateNode;
                popHostContainer(workInProgress);
                popTopLevelContextObject(workInProgress);
                resetWorkInProgressVersions();
                var _flags = workInProgress.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                    workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
                    return workInProgress;
                }
                return null;
            case HostComponent:
                popHostContext(workInProgress);
                return null;
            case SuspenseComponent:
                popSuspenseContext(workInProgress);
                var suspenseState = workInProgress.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                    if (workInProgress.alternate === null) throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                    resetHydrationState();
                }
                var _flags2 = workInProgress.flags;
                if (_flags2 & ShouldCapture) {
                    workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;
                    if ((workInProgress.mode & ProfileMode) !== NoMode) transferActualDuration(workInProgress);
                    return workInProgress;
                }
                return null;
            case SuspenseListComponent:
                popSuspenseContext(workInProgress);
                return null;
            case HostPortal:
                popHostContainer(workInProgress);
                return null;
            case ContextProvider:
                var context = workInProgress.type._context;
                popProvider(context, workInProgress);
                return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(workInProgress);
                return null;
            case CacheComponent:
                return null;
            default:
                return null;
        }
    }
    function unwindInterruptedWork(current, interruptedWork, renderLanes) {
        popTreeContext(interruptedWork);
        switch(interruptedWork.tag){
            case ClassComponent:
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== undefined) popContext(interruptedWork);
                break;
            case HostRoot:
                var root = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
            case HostComponent:
                popHostContext(interruptedWork);
                break;
            case HostPortal:
                popHostContainer(interruptedWork);
                break;
            case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
            case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
            case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
        }
    }
    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    var offscreenSubtreeIsHidden = false;
    var offscreenSubtreeWasHidden = false;
    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var nextEffect = null;
    var inProgressLanes = null;
    var inProgressRoot = null;
    function reportUncaughtErrorInDEV(error) {
        invokeGuardedCallback(null, function() {
            throw error;
        });
        clearCaughtError();
    }
    var callComponentWillUnmountWithTimer = function(current, instance) {
        instance.props = current.memoizedProps;
        instance.state = current.memoizedState;
        if (current.mode & ProfileMode) try {
            startLayoutEffectTimer();
            instance.componentWillUnmount();
        } finally{
            recordLayoutEffectDuration(current);
        }
        else instance.componentWillUnmount();
    };
    function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
        try {
            commitHookEffectListMount(Layout, current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
        try {
            callComponentWillUnmountWithTimer(current, instance);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
        try {
            instance.componentDidMount();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyAttachRef(current, nearestMountedAncestor) {
        try {
            commitAttachRef(current);
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    function safelyDetachRef(current, nearestMountedAncestor) {
        var ref = current.ref;
        if (ref !== null) {
            if (typeof ref === 'function') {
                var retVal;
                try {
                    if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        retVal = ref(null);
                    } finally{
                        recordLayoutEffectDuration(current);
                    }
                    else retVal = ref(null);
                } catch (error1) {
                    captureCommitPhaseError(current, nearestMountedAncestor, error1);
                }
                if (typeof retVal === 'function') error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current));
            } else ref.current = null;
        }
    }
    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
        try {
            destroy();
        } catch (error) {
            captureCommitPhaseError(current, nearestMountedAncestor, error);
        }
    }
    var focusedInstanceHandle = null;
    var shouldFireAfterActiveInstanceBlur = false;
    function commitBeforeMutationEffects(root, firstChild) {
        focusedInstanceHandle = prepareForCommit(root.containerInfo);
        nextEffect = firstChild;
        commitBeforeMutationEffects_begin();
        var shouldFire = shouldFireAfterActiveInstanceBlur;
        shouldFireAfterActiveInstanceBlur = false;
        focusedInstanceHandle = null;
        return shouldFire;
    }
    function commitBeforeMutationEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitBeforeMutationEffects_complete();
        }
    }
    function commitBeforeMutationEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitBeforeMutationEffectsOnFiber(finishedWork) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch(finishedWork.tag){
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent:
                    break;
                case ClassComponent:
                    if (current !== null) {
                        var prevProps = current.memoizedProps;
                        var prevState = current.memoizedState;
                        var instance = finishedWork.stateNode;
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        }
                        var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                        var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                        if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                            didWarnSet.add(finishedWork.type);
                            error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                        }
                        instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                    }
                    break;
                case HostRoot:
                    var root = finishedWork.stateNode;
                    clearContainer(root.containerInfo);
                    break;
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                    break;
                default:
                    throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
            resetCurrentFiber();
        }
    }
    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    var destroy = effect.destroy;
                    effect.destroy = undefined;
                    if (destroy !== undefined) {
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStarted(finishedWork);
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStarted(finishedWork);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                        safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                        if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                        if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectUnmountStopped();
                        else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectUnmountStopped();
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitHookEffectListMount(flags, finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
        if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
                if ((effect.tag & flags) === flags) {
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStarted(finishedWork);
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStarted(finishedWork);
                    var create = effect.create;
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(true);
                    effect.destroy = create();
                    if ((flags & Insertion) !== NoFlags$1) setIsRunningInsertionEffect(false);
                    if ((flags & Passive$1) !== NoFlags$1) markComponentPassiveEffectMountStopped();
                    else if ((flags & Layout) !== NoFlags$1) markComponentLayoutEffectMountStopped();
                    var destroy = effect.destroy;
                    if (destroy !== undefined && typeof destroy !== 'function') {
                        var hookName = void 0;
                        if ((effect.tag & Layout) !== NoFlags) hookName = 'useLayoutEffect';
                        else if ((effect.tag & Insertion) !== NoFlags) hookName = 'useInsertionEffect';
                        else hookName = 'useEffect';
                        var addendum = void 0;
                        if (destroy === null) addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                        else if (typeof destroy.then === 'function') addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
                        else addendum = ' You returned: ' + destroy;
                        error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                }
                effect = effect.next;
            }while (effect !== firstEffect)
        }
    }
    function commitPassiveEffectDurations(finishedRoot, finishedWork) {
        if ((finishedWork.flags & Update) !== NoFlags) switch(finishedWork.tag){
            case Profiler:
                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                var commitTime = getCommitTime();
                var phase = finishedWork.alternate === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onPostCommit === 'function') onPostCommit(id, phase, passiveEffectDuration, commitTime);
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
        }
    }
    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
        if ((finishedWork.flags & LayoutMask) !== NoFlags) switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally{
                        recordLayoutEffectDuration(finishedWork);
                    }
                    else commitHookEffectListMount(Layout | HasEffect, finishedWork);
                }
                break;
            case ClassComponent:
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                        if (current === null) {
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidMount();
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidMount();
                        } else {
                            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
                            var prevState = current.memoizedState;
                            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                                if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                                if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                            }
                            if (finishedWork.mode & ProfileMode) try {
                                startLayoutEffectTimer();
                                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                            } finally{
                                recordLayoutEffectDuration(finishedWork);
                            }
                            else instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                    }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                        if (instance.state !== finishedWork.memoizedState) error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || 'instance');
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
            case HostRoot:
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) switch(finishedWork.child.tag){
                        case HostComponent:
                            _instance = getPublicInstance(finishedWork.child.stateNode);
                            break;
                        case ClassComponent:
                            _instance = finishedWork.child.stateNode;
                            break;
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
            case HostComponent:
                var _instance2 = finishedWork.stateNode;
                if (current === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                }
                break;
            case HostText:
                break;
            case HostPortal:
                break;
            case Profiler:
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime = getCommitTime();
                var phase = current === null ? 'mount' : 'update';
                if (isCurrentUpdateNested()) phase = 'nested-update';
                if (typeof onRender === 'function') onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
                if (typeof onCommit === 'function') onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
                enqueuePendingPassiveProfilerEffect(finishedWork);
                var parentFiber = finishedWork.return;
                outer: while(parentFiber !== null){
                    switch(parentFiber.tag){
                        case HostRoot:
                            var root = parentFiber.stateNode;
                            root.effectDuration += effectDuration;
                            break outer;
                        case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                    }
                    parentFiber = parentFiber.return;
                }
                break;
            case SuspenseComponent:
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
            case TracingMarkerComponent:
                break;
            default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
        }
        if (!offscreenSubtreeWasHidden) {
            if (finishedWork.flags & Ref) commitAttachRef(finishedWork);
        }
    }
    function reappearLayoutEffectsOnFiber(node) {
        switch(node.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (node.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally{
                    recordLayoutEffectDuration(node);
                }
                else safelyCallCommitHookLayoutEffectListMount(node, node.return);
                break;
            case ClassComponent:
                var instance = node.stateNode;
                if (typeof instance.componentDidMount === 'function') safelyCallComponentDidMount(node, node.return, instance);
                safelyAttachRef(node, node.return);
                break;
            case HostComponent:
                safelyAttachRef(node, node.return);
                break;
        }
    }
    function hideOrUnhideAllChildren(finishedWork, isHidden) {
        var hostSubtreeRoot = null;
        var node = finishedWork;
        while(true){
            if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node;
                    try {
                        var instance = node.stateNode;
                        if (isHidden) hideInstance(instance);
                        else unhideInstance(node.stateNode, node.memoizedProps);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
            } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) try {
                    var _instance3 = node.stateNode;
                    if (isHidden) hideTextInstance(_instance3);
                    else unhideTextInstance(_instance3, node.memoizedProps);
                } catch (error) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
            } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
            else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === finishedWork) return;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return;
                if (hostSubtreeRoot === node) hostSubtreeRoot = null;
                node = node.return;
            }
            if (hostSubtreeRoot === node) hostSubtreeRoot = null;
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref;
        if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch(finishedWork.tag){
                case HostComponent:
                    instanceToUse = getPublicInstance(instance);
                    break;
                default:
                    instanceToUse = instance;
            }
            if (typeof ref === 'function') {
                var retVal;
                if (finishedWork.mode & ProfileMode) try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                } finally{
                    recordLayoutEffectDuration(finishedWork);
                }
                else retVal = ref(instanceToUse);
                if (typeof retVal === 'function') error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
            } else {
                if (!ref.hasOwnProperty('current')) error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                ref.current = instanceToUse;
            }
        }
    }
    function detachFiberMutation(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) alternate.return = null;
        fiber.return = null;
    }
    function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
        }
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        if (fiber.tag === HostComponent) {
            var hostInstance = fiber.stateNode;
            if (hostInstance !== null) detachDeletedInstance(hostInstance);
        }
        fiber.stateNode = null;
        fiber._debugOwner = null;
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
    }
    function getHostParentFiber(fiber) {
        var parent = fiber.return;
        while(parent !== null){
            if (isHostParent(parent)) return parent;
            parent = parent.return;
        }
        throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
    }
    function isHostParent(fiber) {
        return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }
    function getHostSibling(fiber) {
        var node = fiber;
        siblings: while(true){
            while(node.sibling === null){
                if (node.return === null || isHostParent(node.return)) return null;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while(node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment){
                if (node.flags & Placement) continue siblings;
                if (node.child === null || node.tag === HostPortal) continue siblings;
                else {
                    node.child.return = node;
                    node = node.child;
                }
            }
            if (!(node.flags & Placement)) return node.stateNode;
        }
    }
    function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork);
        switch(parentFiber.tag){
            case HostComponent:
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                    resetTextContent(parent);
                    parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
            case HostRoot:
            case HostPortal:
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
            default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
        }
    }
    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertInContainerBefore(parent, stateNode, before);
            else appendChildToContainer(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        var isHost = tag === HostComponent || tag === HostText;
        if (isHost) {
            var stateNode = node.stateNode;
            if (before) insertBefore(parent, stateNode, before);
            else appendChild(parent, stateNode);
        } else if (tag === HostPortal) ;
        else {
            var child = node.child;
            if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while(sibling !== null){
                    insertOrAppendPlacementNode(sibling, before, parent);
                    sibling = sibling.sibling;
                }
            }
        }
    }
    var hostParent = null;
    var hostParentIsContainer = false;
    function commitDeletionEffects(root, returnFiber, deletedFiber) {
        var parent = returnFiber;
        findParent: while(parent !== null){
            switch(parent.tag){
                case HostComponent:
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                case HostRoot:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                case HostPortal:
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
            }
            parent = parent.return;
        }
        if (hostParent === null) throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
        hostParent = null;
        hostParentIsContainer = false;
        detachFiberMutation(deletedFiber);
    }
    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        var child = parent.child;
        while(child !== null){
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
        }
    }
    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        onCommitUnmount(deletedFiber);
        switch(deletedFiber.tag){
            case HostComponent:
                if (!offscreenSubtreeWasHidden) safelyDetachRef(deletedFiber, nearestMountedAncestor);
            case HostText:
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                    if (hostParentIsContainer) removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    else removeChild(hostParent, deletedFiber.stateNode);
                }
                return;
            case DehydratedFragment:
                if (hostParent !== null) {
                    if (hostParentIsContainer) clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    else clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                }
                return;
            case HostPortal:
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
                return;
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                if (!offscreenSubtreeWasHidden) {
                    var updateQueue = deletedFiber.updateQueue;
                    if (updateQueue !== null) {
                        var lastEffect = updateQueue.lastEffect;
                        if (lastEffect !== null) {
                            var firstEffect = lastEffect.next;
                            var effect = firstEffect;
                            do {
                                var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                                if (destroy !== undefined) {
                                    if ((tag & Insertion) !== NoFlags$1) safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                    else if ((tag & Layout) !== NoFlags$1) {
                                        markComponentLayoutEffectUnmountStarted(deletedFiber);
                                        if (deletedFiber.mode & ProfileMode) {
                                            startLayoutEffectTimer();
                                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                            recordLayoutEffectDuration(deletedFiber);
                                        } else safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                                        markComponentLayoutEffectUnmountStopped();
                                    }
                                }
                                effect = effect.next;
                            }while (effect !== firstEffect)
                        }
                    }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ClassComponent:
                if (!offscreenSubtreeWasHidden) {
                    safelyDetachRef(deletedFiber, nearestMountedAncestor);
                    var instance = deletedFiber.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case ScopeComponent:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
            case OffscreenComponent:
                if (deletedFiber.mode & ConcurrentMode) {
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                    recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                break;
            default:
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
        }
    }
    function commitSuspenseCallback(finishedWork) {
        var newState = finishedWork.memoizedState;
    }
    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState;
        if (newState === null) {
            var current = finishedWork.alternate;
            if (current !== null) {
                var prevState = current.memoizedState;
                if (prevState !== null) {
                    var suspenseInstance = prevState.dehydrated;
                    if (suspenseInstance !== null) commitHydratedSuspenseInstance(suspenseInstance);
                }
            }
        }
    }
    function attachSuspenseRetryListeners(finishedWork) {
        var wakeables = finishedWork.updateQueue;
        if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                    retryCache.add(wakeable);
                    if (isDevToolsPresent) {
                        if (inProgressLanes !== null && inProgressRoot !== null) restorePendingUpdaters(inProgressRoot, inProgressLanes);
                        else throw Error('Expected finished root and lanes to be set. This is a bug in React.');
                    }
                    wakeable.then(retry, retry);
                }
            });
        }
    }
    function commitMutationEffects(root, finishedWork, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        setCurrentFiber(finishedWork);
        commitMutationEffectsOnFiber(finishedWork, root);
        setCurrentFiber(finishedWork);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
        var deletions = parentFiber.deletions;
        if (deletions !== null) for(var i = 0; i < deletions.length; i++){
            var childToDelete = deletions[i];
            try {
                commitDeletionEffects(root, parentFiber, childToDelete);
            } catch (error) {
                captureCommitPhaseError(childToDelete, parentFiber, error);
            }
        }
        var prevDebugFiber = getCurrentFiber();
        if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while(child !== null){
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root);
                child = child.sibling;
            }
        }
        setCurrentFiber(prevDebugFiber);
    }
    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
        var current = finishedWork.alternate;
        var flags = finishedWork.flags;
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    try {
                        commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                        commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                    if (finishedWork.mode & ProfileMode) {
                        try {
                            startLayoutEffectTimer();
                            commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                        recordLayoutEffectDuration(finishedWork);
                    } else try {
                        commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error1) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error1);
                    }
                }
                return;
            case ClassComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                return;
            case HostComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                    if (current !== null) safelyDetachRef(current, current.return);
                }
                if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                        resetTextContent(instance);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                        var newProps = finishedWork.memoizedProps;
                        var oldProps = current !== null ? current.memoizedProps : newProps;
                        var type = finishedWork.type;
                        var updatePayload = finishedWork.updateQueue;
                        finishedWork.updateQueue = null;
                        if (updatePayload !== null) try {
                            commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostText:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (finishedWork.stateNode === null) throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current !== null ? current.memoizedProps : newText;
                    try {
                        commitTextUpdate(textInstance, oldText, newText);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                }
                return;
            case HostRoot:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                    if (current !== null) {
                        var prevRootState = current.memoizedState;
                        if (prevRootState.isDehydrated) try {
                            commitHydratedContainer(root.containerInfo);
                        } catch (error) {
                            captureCommitPhaseError(finishedWork, finishedWork.return, error);
                        }
                    }
                }
                return;
            case HostPortal:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
            case SuspenseComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                    var offscreenInstance = offscreenFiber.stateNode;
                    var newState = offscreenFiber.memoizedState;
                    var isHidden = newState !== null;
                    offscreenInstance.isHidden = isHidden;
                    if (isHidden) {
                        var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                        if (!wasHidden) markCommitTimeOfFallback();
                    }
                }
                if (flags & Update) {
                    try {
                        commitSuspenseCallback(finishedWork);
                    } catch (error) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error);
                    }
                    attachSuspenseRetryListeners(finishedWork);
                }
                return;
            case OffscreenComponent:
                var _wasHidden = current !== null && current.memoizedState !== null;
                if (finishedWork.mode & ConcurrentMode) {
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                    recursivelyTraverseMutationEffects(root, finishedWork);
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                    var _offscreenInstance = finishedWork.stateNode;
                    var _newState = finishedWork.memoizedState;
                    var _isHidden = _newState !== null;
                    var offscreenBoundary = finishedWork;
                    _offscreenInstance.isHidden = _isHidden;
                    if (_isHidden) {
                        if (!_wasHidden) {
                            if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                                nextEffect = offscreenBoundary;
                                var offscreenChild = offscreenBoundary.child;
                                while(offscreenChild !== null){
                                    nextEffect = offscreenChild;
                                    disappearLayoutEffects_begin(offscreenChild);
                                    offscreenChild = offscreenChild.sibling;
                                }
                            }
                        }
                    }
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
                return;
            case SuspenseListComponent:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) attachSuspenseRetryListeners(finishedWork);
                return;
            case ScopeComponent:
                return;
            default:
                recursivelyTraverseMutationEffects(root, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
        }
    }
    function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & Placement) {
            try {
                commitPlacement(finishedWork);
            } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
            }
            finishedWork.flags &= ~Placement;
        }
        if (flags & Hydrating) finishedWork.flags &= ~Hydrating;
    }
    function commitLayoutEffects(finishedWork, root, committedLanes) {
        inProgressLanes = committedLanes;
        inProgressRoot = root;
        nextEffect = finishedWork;
        commitLayoutEffects_begin(finishedWork, root, committedLanes);
        inProgressLanes = null;
        inProgressRoot = null;
    }
    function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
        var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                } else {
                    var current = fiber.alternate;
                    var wasHidden = current !== null && current.memoizedState !== null;
                    var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                    var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                    var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                    offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                    if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                        nextEffect = fiber;
                        reappearLayoutEffects_begin(fiber);
                    }
                    var child = firstChild;
                    while(child !== null){
                        nextEffect = child;
                        commitLayoutEffects_begin(child, root, committedLanes);
                        child = child.sibling;
                    }
                    nextEffect = fiber;
                    offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                    offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                    commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
                    continue;
                }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
        }
    }
    function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                    commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function disappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch(fiber.tag){
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent:
                    if (fiber.mode & ProfileMode) try {
                        startLayoutEffectTimer();
                        commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally{
                        recordLayoutEffectDuration(fiber);
                    }
                    else commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    break;
                case ClassComponent:
                    safelyDetachRef(fiber, fiber.return);
                    var instance = fiber.stateNode;
                    if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                    break;
                case HostComponent:
                    safelyDetachRef(fiber, fiber.return);
                    break;
                case OffscreenComponent:
                    var isHidden = fiber.memoizedState !== null;
                    if (isHidden) {
                        disappearLayoutEffects_complete(subtreeRoot);
                        continue;
                    }
                    break;
            }
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else disappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function disappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function reappearLayoutEffects_begin(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                    reappearLayoutEffects_complete(subtreeRoot);
                    continue;
                }
            }
            if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else reappearLayoutEffects_complete(subtreeRoot);
        }
    }
    function reappearLayoutEffects_complete(subtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
                reappearLayoutEffectsOnFiber(fiber);
            } catch (error) {
                captureCommitPhaseError(fiber, fiber.return, error);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
        nextEffect = finishedWork;
        commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
    }
    function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
            } else commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
        }
    }
    function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                    commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    try {
                        commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                    } finally{
                        recordPassiveEffectDuration(finishedWork);
                    }
                } else commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                break;
        }
    }
    function commitPassiveUnmountEffects(firstChild) {
        nextEffect = firstChild;
        commitPassiveUnmountEffects_begin();
    }
    function commitPassiveUnmountEffects_begin() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                    for(var i = 0; i < deletions.length; i++){
                        var fiberToDelete = deletions[i];
                        nextEffect = fiberToDelete;
                        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                    }
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                        var detachedChild = previousFiber.child;
                        if (detachedChild !== null) {
                            previousFiber.child = null;
                            do {
                                var detachedSibling = detachedChild.sibling;
                                detachedChild.sibling = null;
                                detachedChild = detachedSibling;
                            }while (detachedChild !== null)
                        }
                    }
                    nextEffect = fiber;
                }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffects_complete();
        }
    }
    function commitPassiveUnmountEffects_complete() {
        while(nextEffect !== null){
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
            }
            nextEffect = fiber.return;
        }
    }
    function commitPassiveUnmountOnFiber(finishedWork) {
        switch(finishedWork.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (finishedWork.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                    recordPassiveEffectDuration(finishedWork);
                } else commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                break;
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
                child.return = fiber;
                nextEffect = child;
            } else commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
        }
    }
    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
        while(nextEffect !== null){
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            detachFiberAfterEffects(fiber);
            if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
            }
            if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
            }
            nextEffect = returnFiber;
        }
    }
    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
        switch(current.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                if (current.mode & ProfileMode) {
                    startPassiveEffectTimer();
                    commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                    recordPassiveEffectDuration(current);
                } else commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
                break;
        }
    }
    function invokeLayoutEffectMountInDEV(fiber) {
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                try {
                    instance.componentDidMount();
                } catch (error1) {
                    captureCommitPhaseError(fiber, fiber.return, error1);
                }
                break;
        }
    }
    function invokePassiveEffectMountInDEV(fiber) {
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
        }
    }
    function invokeLayoutEffectUnmountInDEV(fiber) {
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
                break;
            case ClassComponent:
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === 'function') safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                break;
        }
    }
    function invokePassiveEffectUnmountInDEV(fiber) {
        switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error) {
                    captureCommitPhaseError(fiber, fiber.return, error);
                }
        }
    }
    var COMPONENT_TYPE = 0;
    var HAS_PSEUDO_CLASS_TYPE = 1;
    var ROLE_TYPE = 2;
    var TEST_NAME_TYPE = 3;
    var TEXT_TYPE = 4;
    if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for;
        COMPONENT_TYPE = symbolFor('selector.component');
        HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
        ROLE_TYPE = symbolFor('selector.role');
        TEST_NAME_TYPE = symbolFor('selector.test_id');
        TEXT_TYPE = symbolFor('selector.text');
    }
    var commitHooks = [];
    function onCommitRoot$1() {
        commitHooks.forEach(function(commitHook) {
            return commitHook();
        });
    }
    var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
    function isLegacyActEnvironment(fiber) {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;
        var jestIsDefined = typeof jest !== 'undefined';
        return jestIsDefined && isReactActEnvironmentGlobal !== false;
    }
    function isConcurrentActEnvironment() {
        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;
        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) error("The current testing environment is not configured to support act(...)");
        return isReactActEnvironmentGlobal;
    }
    var ceil = Math.ceil;
    var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
    var NoContext = 0;
    var BatchedContext = 1;
    var RenderContext = 2;
    var CommitContext = 4;
    var RootInProgress = 0;
    var RootFatalErrored = 1;
    var RootErrored = 2;
    var RootSuspended = 3;
    var RootSuspendedWithDelay = 4;
    var RootCompleted = 5;
    var RootDidNotComplete = 6;
    var executionContext = NoContext;
    var workInProgressRoot = null;
    var workInProgress = null;
    var workInProgressRootRenderLanes = NoLanes;
    var subtreeRenderLanes = NoLanes;
    var subtreeRenderLanesCursor = createCursor(NoLanes);
    var workInProgressRootExitStatus = RootInProgress;
    var workInProgressRootFatalError = null;
    var workInProgressRootIncludedLanes = NoLanes;
    var workInProgressRootSkippedLanes = NoLanes;
    var workInProgressRootInterleavedUpdatedLanes = NoLanes;
    var workInProgressRootPingedLanes = NoLanes;
    var workInProgressRootConcurrentErrors = null;
    var workInProgressRootRecoverableErrors = null;
    var globalMostRecentFallbackTime = 0;
    var FALLBACK_THROTTLE_MS = 500;
    var workInProgressRootRenderTargetTime = Infinity;
    var RENDER_TIMEOUT_MS = 500;
    var workInProgressTransitions = null;
    function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
    }
    function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime;
    }
    var hasUncaughtError = false;
    var firstUncaughtError = null;
    var legacyErrorBoundariesThatAlreadyFailed = null;
    var rootDoesHavePassiveEffects = false;
    var rootWithPendingPassiveEffects = null;
    var pendingPassiveEffectsLanes = NoLanes;
    var pendingPassiveProfilerEffects = [];
    var pendingPassiveTransitions = null;
    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var rootWithNestedUpdates = null;
    var isFlushingPassiveEffects = false;
    var didScheduleUpdateDuringPassiveEffects = false;
    var NESTED_PASSIVE_UPDATE_LIMIT = 50;
    var nestedPassiveUpdateCount = 0;
    var rootWithPassiveNestedUpdates = null;
    var currentEventTime = NoTimestamp;
    var currentEventTransitionLane = NoLanes;
    var isRunningInsertionEffect = false;
    function getWorkInProgressRoot() {
        return workInProgressRoot;
    }
    function requestEventTime() {
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) return now();
        if (currentEventTime !== NoTimestamp) return currentEventTime;
        currentEventTime = now();
        return currentEventTime;
    }
    function requestUpdateLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) return pickArbitraryLane(workInProgressRootRenderLanes);
        var isTransition = requestCurrentTransition() !== NoTransition;
        if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) transition._updatedFibers = new Set();
                transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) currentEventTransitionLane = claimNextTransitionLane();
            return currentEventTransitionLane;
        }
        var updateLane = getCurrentUpdatePriority();
        if (updateLane !== NoLane) return updateLane;
        var eventLane = getCurrentEventPriority();
        return eventLane;
    }
    function requestRetryLane(fiber) {
        var mode = fiber.mode;
        if ((mode & ConcurrentMode) === NoMode) return SyncLane;
        return claimNextRetryLane();
    }
    function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
        checkForNestedUpdates();
        if (isRunningInsertionEffect) error('useInsertionEffect must not schedule updates.');
        if (isFlushingPassiveEffects) didScheduleUpdateDuringPassiveEffects = true;
        markRootUpdated(root, lane, eventTime);
        if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) warnAboutRenderPhaseUpdatesInDEV(fiber);
        else {
            if (isDevToolsPresent) addFiberToLanesMap(root, fiber, lane);
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) markRootSuspended$1(root, workInProgressRootRenderLanes);
            }
            ensureRootIsScheduled(root, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
        var current = root.current;
        current.lanes = lane;
        markRootUpdated(root, lane, eventTime);
        ensureRootIsScheduled(root, eventTime);
    }
    function isUnsafeClassRenderPhaseUpdate(fiber) {
        return (executionContext & RenderContext) !== NoContext;
    }
    function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode;
        markStarvedLanesAsExpired(root, currentTime);
        var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) cancelCallback$1(existingCallbackNode);
            root.callbackNode = null;
            root.callbackPriority = NoLane;
            return;
        }
        var newCallbackPriority = getHighestPriorityLane(nextLanes);
        var existingCallbackPriority = root.callbackPriority;
        if (existingCallbackPriority === newCallbackPriority && !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
            return;
        }
        if (existingCallbackNode != null) cancelCallback$1(existingCallbackNode);
        var newCallbackNode;
        if (newCallbackPriority === SyncLane) {
            if (root.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
            } else scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
            if (ReactCurrentActQueue$1.current !== null) ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
            else scheduleMicrotask(function() {
                if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
            });
            newCallbackNode = null;
        } else {
            var schedulerPriorityLevel;
            switch(lanesToEventPriority(nextLanes)){
                case DiscreteEventPriority:
                    schedulerPriorityLevel = ImmediatePriority;
                    break;
                case ContinuousEventPriority:
                    schedulerPriorityLevel = UserBlockingPriority;
                    break;
                case DefaultEventPriority:
                    schedulerPriorityLevel = NormalPriority;
                    break;
                case IdleEventPriority:
                    schedulerPriorityLevel = IdlePriority;
                    break;
                default:
                    schedulerPriorityLevel = NormalPriority;
                    break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
        }
        root.callbackPriority = newCallbackPriority;
        root.callbackNode = newCallbackNode;
    }
    function performConcurrentWorkOnRoot(root, didTimeout) {
        resetNestedUpdateFlag();
        currentEventTime = NoTimestamp;
        currentEventTransitionLane = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        var originalCallbackNode = root.callbackNode;
        var didFlushPassiveEffects = flushPassiveEffects();
        if (didFlushPassiveEffects) {
            if (root.callbackNode !== originalCallbackNode) return null;
        }
        var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
        if (lanes === NoLanes) return null;
        var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;
        var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);
        if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                if (errorRetryLanes !== NoLanes) {
                    lanes = errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
                }
            }
            if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root, NoLanes);
                markRootSuspended$1(root, lanes);
                ensureRootIsScheduled(root, now());
                throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) markRootSuspended$1(root, lanes);
            else {
                var renderWasConcurrent = !includesBlockingLane(root, lanes);
                var finishedWork = root.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                    exitStatus = renderRootSync(root, lanes);
                    if (exitStatus === RootErrored) {
                        var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
                        if (_errorRetryLanes !== NoLanes) {
                            lanes = _errorRetryLanes;
                            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes);
                        }
                    }
                    if (exitStatus === RootFatalErrored) {
                        var _fatalError = workInProgressRootFatalError;
                        prepareFreshStack(root, NoLanes);
                        markRootSuspended$1(root, lanes);
                        ensureRootIsScheduled(root, now());
                        throw _fatalError;
                    }
                }
                root.finishedWork = finishedWork;
                root.finishedLanes = lanes;
                finishConcurrentRender(root, exitStatus, lanes);
            }
        }
        ensureRootIsScheduled(root, now());
        if (root.callbackNode === originalCallbackNode) return performConcurrentWorkOnRoot.bind(null, root);
        return null;
    }
    function recoverFromConcurrentError(root, errorRetryLanes) {
        var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
        if (isRootDehydrated(root)) {
            var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            errorHydratingContainer(root.containerInfo);
        }
        var exitStatus = renderRootSync(root, errorRetryLanes);
        if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) queueRecoverableErrors(errorsFromSecondAttempt);
        }
        return exitStatus;
    }
    function queueRecoverableErrors(errors) {
        if (workInProgressRootRecoverableErrors === null) workInProgressRootRecoverableErrors = errors;
        else workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
    }
    function finishConcurrentRender(root, exitStatus, lanes) {
        switch(exitStatus){
            case RootInProgress:
            case RootFatalErrored:
                throw new Error('Root did not complete. This is a bug in React.');
            case RootErrored:
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspended:
                markRootSuspended$1(root, lanes);
                if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                    var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                    if (msUntilTimeout > 10) {
                        var nextLanes = getNextLanes(root, NoLanes);
                        if (nextLanes !== NoLanes) break;
                        var suspendedLanes = root.suspendedLanes;
                        if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                            var eventTime = requestEventTime();
                            markRootPinged(root, suspendedLanes);
                            break;
                        }
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                        break;
                    }
                }
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootSuspendedWithDelay:
                markRootSuspended$1(root, lanes);
                if (includesOnlyTransitions(lanes)) break;
                if (!shouldForceFlushFallbacksInDEV()) {
                    var mostRecentEventTime = getMostRecentEventTime(root, lanes);
                    var eventTimeMs = mostRecentEventTime;
                    var timeElapsedMs = now() - eventTimeMs;
                    var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                    if (_msUntilTimeout > 10) {
                        root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                        break;
                    }
                }
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            case RootCompleted:
                commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
            default:
                throw new Error('Unknown root exit status.');
        }
    }
    function isRenderConsistentWithExternalStores(finishedWork) {
        var node = finishedWork;
        while(true){
            if (node.flags & StoreConsistency) {
                var updateQueue = node.updateQueue;
                if (updateQueue !== null) {
                    var checks = updateQueue.stores;
                    if (checks !== null) for(var i = 0; i < checks.length; i++){
                        var check = checks[i];
                        var getSnapshot = check.getSnapshot;
                        var renderedValue = check.value;
                        try {
                            if (!objectIs(getSnapshot(), renderedValue)) return false;
                        } catch (error) {
                            return false;
                        }
                    }
                }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node;
                node = child;
                continue;
            }
            if (node === finishedWork) return true;
            while(node.sibling === null){
                if (node.return === null || node.return === finishedWork) return true;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return true;
    }
    function markRootSuspended$1(root, suspendedLanes) {
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
        suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
        markRootSuspended(root, suspendedLanes);
    }
    function performSyncWorkOnRoot(root) {
        syncNestedUpdateFlag();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        flushPassiveEffects();
        var lanes = getNextLanes(root, NoLanes);
        if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root, now());
            return null;
        }
        var exitStatus = renderRootSync(root, lanes);
        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);
            if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
            }
        }
        if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root, NoLanes);
            markRootSuspended$1(root, lanes);
            ensureRootIsScheduled(root, now());
            throw fatalError;
        }
        if (exitStatus === RootDidNotComplete) throw new Error('Root did not complete. This is a bug in React.');
        var finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        root.finishedLanes = lanes;
        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
        ensureRootIsScheduled(root, now());
        return null;
    }
    function flushRoot(root, lanes) {
        if (lanes !== NoLanes) {
            markRootEntangled(root, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
            }
        }
    }
    function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        try {
            return fn(a);
        } finally{
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
            }
        }
    }
    function discreteUpdates(fn, a, b, c, d) {
        var previousPriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a, b, c, d);
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) resetRenderTimer();
        }
    }
    function flushSync(fn) {
        if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) flushPassiveEffects();
        var prevExecutionContext = executionContext;
        executionContext |= BatchedContext;
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        var previousPriority = getCurrentUpdatePriority();
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) return fn();
            else return undefined;
        } finally{
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) flushSyncCallbacks();
        }
    }
    function isAlreadyRendering() {
        return (executionContext & (RenderContext | CommitContext)) !== NoContext;
    }
    function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
        workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
    }
    function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current;
        pop(subtreeRenderLanesCursor, fiber);
    }
    function prepareFreshStack(root, lanes) {
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        var timeoutHandle = root.timeoutHandle;
        if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
        }
        if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while(interruptedWork !== null){
                var current = interruptedWork.alternate;
                unwindInterruptedWork(current, interruptedWork);
                interruptedWork = interruptedWork.return;
            }
        }
        workInProgressRoot = root;
        var rootWorkInProgress = createWorkInProgress(root.current, null);
        workInProgress = rootWorkInProgress;
        workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
        workInProgressRootExitStatus = RootInProgress;
        workInProgressRootFatalError = null;
        workInProgressRootSkippedLanes = NoLanes;
        workInProgressRootInterleavedUpdatedLanes = NoLanes;
        workInProgressRootPingedLanes = NoLanes;
        workInProgressRootConcurrentErrors = null;
        workInProgressRootRecoverableErrors = null;
        finishQueueingConcurrentUpdates();
        ReactStrictModeWarnings.discardPendingWarnings();
        return rootWorkInProgress;
    }
    function handleError(root, thrownValue) {
        do {
            var erroredWork = workInProgress;
            try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                    workInProgressRootExitStatus = RootFatalErrored;
                    workInProgressRootFatalError = thrownValue;
                    workInProgress = null;
                    return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                if (enableSchedulingProfiler) {
                    markComponentRenderStopped();
                    if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
                        var wakeable = thrownValue;
                        markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                    } else markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
                throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                    erroredWork = erroredWork.return;
                    workInProgress = erroredWork;
                } else erroredWork = workInProgress;
                continue;
            }
            return;
        }while (true)
    }
    function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current;
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
        if (prevDispatcher === null) return ContextOnlyDispatcher;
        else return prevDispatcher;
    }
    function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher;
    }
    function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now();
    }
    function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
    }
    function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootSuspended;
    }
    function renderDidSuspendDelayIfPossible() {
        if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) workInProgressRootExitStatus = RootSuspendedWithDelay;
        if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
    }
    function renderDidError(error) {
        if (workInProgressRootExitStatus !== RootSuspendedWithDelay) workInProgressRootExitStatus = RootErrored;
        if (workInProgressRootConcurrentErrors === null) workInProgressRootConcurrentErrors = [
            error
        ];
        else workInProgressRootConcurrentErrors.push(error);
    }
    function renderHasNotSuspendedYet() {
        return workInProgressRootExitStatus === RootInProgress;
    }
    function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopSync();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        executionContext = prevExecutionContext;
        popDispatcher(prevDispatcher);
        if (workInProgress !== null) throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
        markRenderStopped();
        workInProgressRoot = null;
        workInProgressRootRenderLanes = NoLanes;
        return workInProgressRootExitStatus;
    }
    function workLoopSync() {
        while(workInProgress !== null)performUnitOfWork(workInProgress);
    }
    function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= RenderContext;
        var prevDispatcher = pushDispatcher();
        if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
            if (isDevToolsPresent) {
                var memoizedUpdaters = root.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root, lanes);
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root, lanes);
        }
        markRenderStarted(lanes);
        for(;;)try {
            workLoopConcurrent();
            break;
        } catch (thrownValue) {
            handleError(root, thrownValue);
        }
        resetContextDependencies();
        popDispatcher(prevDispatcher);
        executionContext = prevExecutionContext;
        if (workInProgress !== null) {
            markRenderYielded();
            return RootInProgress;
        } else {
            markRenderStopped();
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
        }
    }
    function workLoopConcurrent() {
        while(workInProgress !== null && !shouldYield())performUnitOfWork(workInProgress);
    }
    function performUnitOfWork(unitOfWork) {
        var current = unitOfWork.alternate;
        setCurrentFiber(unitOfWork);
        var next;
        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
        } else next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
        resetCurrentFiber();
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        if (next === null) completeUnitOfWork(unitOfWork);
        else workInProgress = next;
        ReactCurrentOwner$2.current = null;
    }
    function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
            var current = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) next = completeWork(current, completedWork, subtreeRenderLanes);
                else {
                    startProfilerTimer(completedWork);
                    next = completeWork(current, completedWork, subtreeRenderLanes);
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next !== null) {
                    workInProgress = next;
                    return;
                }
            } else {
                var _next = unwindWork(current, completedWork);
                if (_next !== null) {
                    _next.flags &= HostEffectMask;
                    workInProgress = _next;
                    return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                    stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                    var actualDuration = completedWork.actualDuration;
                    var child = completedWork.child;
                    while(child !== null){
                        actualDuration += child.actualDuration;
                        child = child.sibling;
                    }
                    completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                    returnFiber.flags |= Incomplete;
                    returnFiber.subtreeFlags = NoFlags;
                    returnFiber.deletions = null;
                } else {
                    workInProgressRootExitStatus = RootDidNotComplete;
                    workInProgress = null;
                    return;
                }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
        }while (completedWork !== null)
        if (workInProgressRootExitStatus === RootInProgress) workInProgressRootExitStatus = RootCompleted;
    }
    function commitRoot(root, recoverableErrors, transitions) {
        var previousUpdateLanePriority = getCurrentUpdatePriority();
        var prevTransition = ReactCurrentBatchConfig$3.transition;
        try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
        } finally{
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
        }
        return null;
    }
    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
        do flushPassiveEffects();
        while (rootWithPendingPassiveEffects !== null)
        flushRenderPhaseStrictModeWarningsInDEV();
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Should not already be working.');
        var finishedWork = root.finishedWork;
        var lanes = root.finishedLanes;
        markCommitStarted(lanes);
        if (finishedWork === null) {
            markCommitStopped();
            return null;
        } else if (lanes === NoLanes) error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
        root.finishedWork = null;
        root.finishedLanes = NoLanes;
        if (finishedWork === root.current) throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
        root.callbackNode = null;
        root.callbackPriority = NoLane;
        var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
        markRootFinished(root, remainingLanes);
        if (root === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
        }
        if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                    flushPassiveEffects();
                    return null;
                });
            }
        }
        var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
        if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur = commitBeforeMutationEffects(root, finishedWork);
            recordCommitTime();
            commitMutationEffects(root, finishedWork, lanes);
            resetAfterCommit(root.containerInfo);
            root.current = finishedWork;
            markLayoutEffectsStarted(lanes);
            commitLayoutEffects(finishedWork, root, lanes);
            markLayoutEffectsStopped();
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
        } else {
            root.current = finishedWork;
            recordCommitTime();
        }
        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
        if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root;
            pendingPassiveEffectsLanes = lanes;
        } else {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
        }
        remainingLanes = root.pendingLanes;
        if (remainingLanes === NoLanes) legacyErrorBoundariesThatAlreadyFailed = null;
        if (!rootDidHavePassiveEffects) commitDoubleInvokeEffectsInDEV(root.current, false);
        onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
        if (isDevToolsPresent) root.memoizedUpdaters.clear();
        onCommitRoot$1();
        ensureRootIsScheduled(root, now());
        if (recoverableErrors !== null) {
            var onRecoverableError = root.onRecoverableError;
            for(var i = 0; i < recoverableErrors.length; i++){
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                    componentStack: componentStack,
                    digest: digest
                });
            }
        }
        if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
        }
        if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) flushPassiveEffects();
        remainingLanes = root.pendingLanes;
        if (includesSomeLane(remainingLanes, SyncLane)) {
            markNestedUpdateScheduled();
            if (root === rootWithNestedUpdates) nestedUpdateCount++;
            else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root;
            }
        } else nestedUpdateCount = 0;
        flushSyncCallbacks();
        markCommitStopped();
        return null;
    }
    function flushPassiveEffects() {
        if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
            } finally{
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
            }
        }
        return false;
    }
    function enqueuePendingPassiveProfilerEffect(fiber) {
        pendingPassiveProfilerEffects.push(fiber);
        if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
            });
        }
    }
    function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) return false;
        var transitions = pendingPassiveTransitions;
        pendingPassiveTransitions = null;
        var root = rootWithPendingPassiveEffects;
        var lanes = pendingPassiveEffectsLanes;
        rootWithPendingPassiveEffects = null;
        pendingPassiveEffectsLanes = NoLanes;
        if ((executionContext & (RenderContext | CommitContext)) !== NoContext) throw new Error('Cannot flush passive effects while already rendering.');
        isFlushingPassiveEffects = true;
        didScheduleUpdateDuringPassiveEffects = false;
        markPassiveEffectsStarted(lanes);
        var prevExecutionContext = executionContext;
        executionContext |= CommitContext;
        commitPassiveUnmountEffects(root.current);
        commitPassiveMountEffects(root, root.current, lanes, transitions);
        var profilerEffects = pendingPassiveProfilerEffects;
        pendingPassiveProfilerEffects = [];
        for(var i = 0; i < profilerEffects.length; i++){
            var _fiber = profilerEffects[i];
            commitPassiveEffectDurations(root, _fiber);
        }
        markPassiveEffectsStopped();
        commitDoubleInvokeEffectsInDEV(root.current, true);
        executionContext = prevExecutionContext;
        flushSyncCallbacks();
        if (didScheduleUpdateDuringPassiveEffects) {
            if (root === rootWithPassiveNestedUpdates) nestedPassiveUpdateCount++;
            else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root;
            }
        } else nestedPassiveUpdateCount = 0;
        isFlushingPassiveEffects = false;
        didScheduleUpdateDuringPassiveEffects = false;
        onPostCommitRoot(root);
        var stateNode = root.current.stateNode;
        stateNode.effectDuration = 0;
        stateNode.passiveEffectDuration = 0;
        return true;
    }
    function isAlreadyFailedLegacyErrorBoundary(instance) {
        return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }
    function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) legacyErrorBoundariesThatAlreadyFailed = new Set([
            instance
        ]);
        else legacyErrorBoundariesThatAlreadyFailed.add(instance);
    }
    function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error;
        }
    }
    var onUncaughtError = prepareToThrowUncaughtError;
    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
        var root = enqueueUpdate(rootFiber, update, SyncLane);
        var eventTime = requestEventTime();
        if (root !== null) {
            markRootUpdated(root, SyncLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
        reportUncaughtErrorInDEV(error$1);
        setIsRunningInsertionEffect(false);
        if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
        }
        var fiber = null;
        fiber = nearestMountedAncestor;
        while(fiber !== null){
            if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
            } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                    var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                    var root = enqueueUpdate(fiber, update, SyncLane);
                    var eventTime = requestEventTime();
                    if (root !== null) {
                        markRootUpdated(root, SyncLane, eventTime);
                        ensureRootIsScheduled(root, eventTime);
                    }
                    return;
                }
            }
            fiber = fiber.return;
        }
        error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
    }
    function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache;
        if (pingCache !== null) pingCache.delete(wakeable);
        var eventTime = requestEventTime();
        markRootPinged(root, pingedLanes);
        warnIfSuspenseResolutionNotWrappedWithActDEV(root);
        if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) prepareFreshStack(root, NoLanes);
            else workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
        }
        ensureRootIsScheduled(root, eventTime);
    }
    function retryTimedOutBoundary(boundaryFiber, retryLane) {
        if (retryLane === NoLane) retryLane = requestRetryLane(boundaryFiber);
        var eventTime = requestEventTime();
        var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        if (root !== null) {
            markRootUpdated(root, retryLane, eventTime);
            ensureRootIsScheduled(root, eventTime);
        }
    }
    function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState;
        var retryLane = NoLane;
        if (suspenseState !== null) retryLane = suspenseState.retryLane;
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane;
        var retryCache;
        switch(boundaryFiber.tag){
            case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) retryLane = suspenseState.retryLane;
                break;
            case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
            default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
        }
        if (retryCache !== null) retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
    }
    function jnd(timeElapsed) {
        return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
    }
    function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
        }
        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0;
            rootWithPassiveNestedUpdates = null;
            error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
        }
    }
    function flushRenderPhaseStrictModeWarningsInDEV() {
        ReactStrictModeWarnings.flushLegacyContextWarning();
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
    function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
        setCurrentFiber(fiber);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
        invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
        if (hasPassiveEffects) invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
        resetCurrentFiber();
    }
    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
        var current = firstChild;
        var subtreeRoot = null;
        while(current !== null){
            var primarySubtreeFlag = current.subtreeFlags & fiberFlags;
            if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) current = current.child;
            else {
                if ((current.flags & fiberFlags) !== NoFlags) invokeEffectFn(current);
                if (current.sibling !== null) current = current.sibling;
                else current = subtreeRoot = current.return;
            }
        }
    }
    var didWarnStateUpdateForNotYetMountedComponent = null;
    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        if ((executionContext & RenderContext) !== NoContext) return;
        if (!(fiber.mode & ConcurrentMode)) return;
        var tag = fiber.tag;
        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) return;
        var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';
        if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) return;
            didWarnStateUpdateForNotYetMountedComponent.add(componentName);
        } else didWarnStateUpdateForNotYetMountedComponent = new Set([
            componentName
        ]);
        var previousFiber = current;
        try {
            setCurrentFiber(fiber);
            error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
        } finally{
            if (previousFiber) setCurrentFiber(fiber);
            else resetCurrentFiber();
        }
    }
    var beginWork$1;
    var dummyFiber = null;
    beginWork$1 = function(current, unitOfWork, lanes) {
        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
        try {
            return beginWork(current, unitOfWork, lanes);
        } catch (originalError) {
            if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') throw originalError;
            resetContextDependencies();
            resetHooksAfterThrow();
            unwindInterruptedWork(current, unitOfWork);
            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
            if (unitOfWork.mode & ProfileMode) startProfilerTimer(unitOfWork);
            invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);
            if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) originalError._suppressLogging = true;
            }
            throw originalError;
        }
    };
    var didWarnAboutUpdateInRender = false;
    var didWarnAboutUpdateInRenderForAnotherComponent;
    didWarnAboutUpdateInRenderForAnotherComponent = new Set();
    function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) switch(fiber.tag){
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown';
                var dedupeKey = renderingComponentName;
                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                }
                break;
            case ClassComponent:
                if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                }
                break;
        }
    }
    function restorePendingUpdaters(root, lanes) {
        if (isDevToolsPresent) {
            var memoizedUpdaters = root.memoizedUpdaters;
            memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root, schedulingFiber, lanes);
            });
        }
    }
    var fakeActCallbackNode = {};
    function scheduleCallback$1(priorityLevel, callback) {
        var actQueue = ReactCurrentActQueue$1.current;
        if (actQueue !== null) {
            actQueue.push(callback);
            return fakeActCallbackNode;
        } else return scheduleCallback(priorityLevel, callback);
    }
    function cancelCallback$1(callbackNode) {
        if (callbackNode === fakeActCallbackNode) return;
        return cancelCallback(callbackNode);
    }
    function shouldForceFlushFallbacksInDEV() {
        return ReactCurrentActQueue$1.current !== null;
    }
    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
        if (fiber.mode & ConcurrentMode) {
            if (!isConcurrentActEnvironment()) return;
        } else {
            if (!isLegacyActEnvironment()) return;
            if (executionContext !== NoContext) return;
            if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) return;
        }
        if (ReactCurrentActQueue$1.current === null) {
            var previousFiber = current;
            try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
            } finally{
                if (previousFiber) setCurrentFiber(fiber);
                else resetCurrentFiber();
            }
        }
    }
    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
    }
    function setIsRunningInsertionEffect(isRunning) {
        isRunningInsertionEffect = isRunning;
    }
    var resolveFamily = null;
    var failedBoundaries = null;
    var setRefreshHandler = function(handler) {
        resolveFamily = handler;
    };
    function resolveFunctionForHotReloading(type) {
        if (resolveFamily === null) return type;
        var family = resolveFamily(type);
        if (family === undefined) return type;
        return family.current;
    }
    function resolveClassForHotReloading(type) {
        return resolveFunctionForHotReloading(type);
    }
    function resolveForwardRefForHotReloading(type) {
        if (resolveFamily === null) return type;
        var family = resolveFamily(type);
        if (family === undefined) {
            if (type !== null && type !== undefined && typeof type.render === 'function') {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                    var syntheticType = {
                        $$typeof: REACT_FORWARD_REF_TYPE,
                        render: currentRender
                    };
                    if (type.displayName !== undefined) syntheticType.displayName = type.displayName;
                    return syntheticType;
                }
            }
            return type;
        }
        return family.current;
    }
    function isCompatibleFamilyForHotReloading(fiber, element) {
        if (resolveFamily === null) return false;
        var prevType = fiber.elementType;
        var nextType = element.type;
        var needsCompareFamilies = false;
        var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;
        switch(fiber.tag){
            case ClassComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                break;
            case FunctionComponent:
                if (typeof nextType === 'function') needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case ForwardRef:
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            case MemoComponent:
            case SimpleMemoComponent:
                if ($$typeofNextType === REACT_MEMO_TYPE) needsCompareFamilies = true;
                else if ($$typeofNextType === REACT_LAZY_TYPE) needsCompareFamilies = true;
                break;
            default:
                return false;
        }
        if (needsCompareFamilies) {
            var prevFamily = resolveFamily(prevType);
            if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) return true;
        }
        return false;
    }
    function markFailedErrorBoundaryForHotReloading(fiber) {
        if (resolveFamily === null) return;
        if (typeof WeakSet !== 'function') return;
        if (failedBoundaries === null) failedBoundaries = new WeakSet();
        failedBoundaries.add(fiber);
    }
    var scheduleRefresh = function(root, update) {
        if (resolveFamily === null) return;
        var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
        flushPassiveEffects();
        flushSync(function() {
            scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
        });
    };
    var scheduleRoot = function(root, element) {
        if (root.context !== emptyContextObject) return;
        flushPassiveEffects();
        flushSync(function() {
            updateContainer(element, root, null, null);
        });
    };
    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
        var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        if (resolveFamily === null) throw new Error('Expected resolveFamily to be set during hot reload.');
        var needsRender = false;
        var needsRemount = false;
        if (candidateType !== null) {
            var family = resolveFamily(candidateType);
            if (family !== undefined) {
                if (staleFamilies.has(family)) needsRemount = true;
                else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) needsRemount = true;
                    else needsRender = true;
                }
            }
        }
        if (failedBoundaries !== null) {
            if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) needsRemount = true;
        }
        if (needsRemount) fiber._debugNeedsRemount = true;
        if (needsRemount || needsRender) {
            var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (_root !== null) scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
        }
        if (child !== null && !needsRemount) scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
        if (sibling !== null) scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
    var findHostInstancesForRefresh = function(root, families) {
        var hostInstances = new Set();
        var types = new Set(families.map(function(family) {
            return family.current;
        }));
        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
        return hostInstances;
    };
    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
        var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
        var candidateType = null;
        switch(tag){
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
                candidateType = type;
                break;
            case ForwardRef:
                candidateType = type.render;
                break;
        }
        var didMatch = false;
        if (candidateType !== null) {
            if (types.has(candidateType)) didMatch = true;
        }
        if (didMatch) findHostInstancesForFiberShallowly(fiber, hostInstances);
        else if (child !== null) findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
        if (sibling !== null) findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
    function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
        if (foundHostInstances) return;
        var node = fiber;
        while(true){
            switch(node.tag){
                case HostComponent:
                    hostInstances.add(node.stateNode);
                    return;
                case HostPortal:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
                case HostRoot:
                    hostInstances.add(node.stateNode.containerInfo);
                    return;
            }
            if (node.return === null) throw new Error('Expected to reach root first.');
            node = node.return;
        }
    }
    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        var node = fiber;
        var foundHostInstances = false;
        while(true){
            if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
            } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
            }
            if (node === fiber) return foundHostInstances;
            while(node.sibling === null){
                if (node.return === null || node.return === fiber) return foundHostInstances;
                node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
        return false;
    }
    var hasBadMapPolyfill;
    hasBadMapPolyfill = false;
    try {
        var nonExtensibleObject = Object.preventExtensions({});
        new Map([
            [
                nonExtensibleObject,
                null
            ]
        ]);
        new Set([
            nonExtensibleObject
        ]);
    } catch (e1) {
        hasBadMapPolyfill = true;
    }
    function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.elementType = null;
        this.type = null;
        this.stateNode = null;
        this.return = null;
        this.child = null;
        this.sibling = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = pendingProps;
        this.memoizedProps = null;
        this.updateQueue = null;
        this.memoizedState = null;
        this.dependencies = null;
        this.mode = mode;
        this.flags = NoFlags;
        this.subtreeFlags = NoFlags;
        this.deletions = null;
        this.lanes = NoLanes;
        this.childLanes = NoLanes;
        this.alternate = null;
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN;
        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugNeedsRemount = false;
        this._debugHookTypes = null;
        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') Object.preventExtensions(this);
    }
    var createFiber = function(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
    };
    function shouldConstruct$1(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function isSimpleFunctionComponent(type) {
        return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
    }
    function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
        else if (Component !== undefined && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) return ForwardRef;
            if ($$typeof === REACT_MEMO_TYPE) return MemoComponent;
        }
        return IndeterminateComponent;
    }
    function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate;
        if (workInProgress === null) {
            workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
            workInProgress.elementType = current.elementType;
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            workInProgress._debugSource = current._debugSource;
            workInProgress._debugOwner = current._debugOwner;
            workInProgress._debugHookTypes = current._debugHookTypes;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        } else {
            workInProgress.pendingProps = pendingProps;
            workInProgress.type = current.type;
            workInProgress.flags = NoFlags;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.actualDuration = 0;
            workInProgress.actualStartTime = -1;
        }
        workInProgress.flags = current.flags & StaticMask;
        workInProgress.childLanes = current.childLanes;
        workInProgress.lanes = current.lanes;
        workInProgress.child = current.child;
        workInProgress.memoizedProps = current.memoizedProps;
        workInProgress.memoizedState = current.memoizedState;
        workInProgress.updateQueue = current.updateQueue;
        var currentDependencies = current.dependencies;
        workInProgress.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
        };
        workInProgress.sibling = current.sibling;
        workInProgress.index = current.index;
        workInProgress.ref = current.ref;
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
        workInProgress._debugNeedsRemount = current._debugNeedsRemount;
        switch(workInProgress.tag){
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
                workInProgress.type = resolveFunctionForHotReloading(current.type);
                break;
            case ClassComponent:
                workInProgress.type = resolveClassForHotReloading(current.type);
                break;
            case ForwardRef:
                workInProgress.type = resolveForwardRefForHotReloading(current.type);
                break;
        }
        return workInProgress;
    }
    function resetWorkInProgress(workInProgress, renderLanes) {
        workInProgress.flags &= StaticMask | Placement;
        var current = workInProgress.alternate;
        if (current === null) {
            workInProgress.childLanes = NoLanes;
            workInProgress.lanes = renderLanes;
            workInProgress.child = null;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.memoizedProps = null;
            workInProgress.memoizedState = null;
            workInProgress.updateQueue = null;
            workInProgress.dependencies = null;
            workInProgress.stateNode = null;
            workInProgress.selfBaseDuration = 0;
            workInProgress.treeBaseDuration = 0;
        } else {
            workInProgress.childLanes = current.childLanes;
            workInProgress.lanes = current.lanes;
            workInProgress.child = current.child;
            workInProgress.subtreeFlags = NoFlags;
            workInProgress.deletions = null;
            workInProgress.memoizedProps = current.memoizedProps;
            workInProgress.memoizedState = current.memoizedState;
            workInProgress.updateQueue = current.updateQueue;
            workInProgress.type = current.type;
            var currentDependencies = current.dependencies;
            workInProgress.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
            };
            workInProgress.selfBaseDuration = current.selfBaseDuration;
            workInProgress.treeBaseDuration = current.treeBaseDuration;
        }
        return workInProgress;
    }
    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
        var mode;
        if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                mode |= StrictEffectsMode;
            }
        } else mode = NoMode;
        if (isDevToolsPresent) mode |= ProfileMode;
        return createFiber(HostRoot, null, null, mode);
    }
    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = IndeterminateComponent;
        var resolvedType = type;
        if (typeof type === 'function') {
            if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                resolvedType = resolveClassForHotReloading(resolvedType);
            } else resolvedType = resolveFunctionForHotReloading(resolvedType);
        } else if (typeof type === 'string') fiberTag = HostComponent;
        else getTag: switch(type){
            case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) mode |= StrictEffectsMode;
                break;
            case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
            case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
            case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_SCOPE_TYPE:
            case REACT_CACHE_TYPE:
            case REACT_TRACING_MARKER_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            default:
                if (typeof type === 'object' && type !== null) switch(type.$$typeof){
                    case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                    case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                    case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        break getTag;
                    case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                    case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                }
                var info = '';
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                if (ownerName) info += '\n\nCheck the render method of `' + ownerName + '`.';
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
        }
        var fiber = createFiber(fiberTag, pendingProps, key, mode);
        fiber.elementType = type;
        fiber.type = resolvedType;
        fiber.lanes = lanes;
        fiber._debugOwner = owner;
        return fiber;
    }
    function createFiberFromElement(element, mode, lanes) {
        var owner = null;
        owner = element._owner;
        var type = element.type;
        var key = element.key;
        var pendingProps = element.props;
        var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
        return fiber;
    }
    function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        if (typeof pendingProps.id !== 'string') error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
        fiber.elementType = REACT_PROFILER_TYPE;
        fiber.lanes = lanes;
        fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0
        };
        return fiber;
    }
    function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
        fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
        fiber.elementType = REACT_OFFSCREEN_TYPE;
        fiber.lanes = lanes;
        var primaryChildInstance = {
            isHidden: false
        };
        fiber.stateNode = primaryChildInstance;
        return fiber;
    }
    function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode);
        fiber.lanes = lanes;
        return fiber;
    }
    function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode);
        fiber.elementType = 'DELETED';
        return fiber;
    }
    function createFiberFromDehydratedFragment(dehydratedNode) {
        var fiber = createFiber(DehydratedFragment, null, null, NoMode);
        fiber.stateNode = dehydratedNode;
        return fiber;
    }
    function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : [];
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
        fiber.lanes = lanes;
        fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
        };
        return fiber;
    }
    function assignFiberPropertiesInDEV(target, source) {
        if (target === null) target = createFiber(IndeterminateComponent, null, null, NoMode);
        target.tag = source.tag;
        target.key = source.key;
        target.elementType = source.elementType;
        target.type = source.type;
        target.stateNode = source.stateNode;
        target.return = source.return;
        target.child = source.child;
        target.sibling = source.sibling;
        target.index = source.index;
        target.ref = source.ref;
        target.pendingProps = source.pendingProps;
        target.memoizedProps = source.memoizedProps;
        target.updateQueue = source.updateQueue;
        target.memoizedState = source.memoizedState;
        target.dependencies = source.dependencies;
        target.mode = source.mode;
        target.flags = source.flags;
        target.subtreeFlags = source.subtreeFlags;
        target.deletions = source.deletions;
        target.lanes = source.lanes;
        target.childLanes = source.childLanes;
        target.alternate = source.alternate;
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
        target._debugSource = source._debugSource;
        target._debugOwner = source._debugOwner;
        target._debugNeedsRemount = source._debugNeedsRemount;
        target._debugHookTypes = source._debugHookTypes;
        return target;
    }
    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
        this.tag = tag;
        this.containerInfo = containerInfo;
        this.pendingChildren = null;
        this.current = null;
        this.pingCache = null;
        this.finishedWork = null;
        this.timeoutHandle = noTimeout;
        this.context = null;
        this.pendingContext = null;
        this.callbackNode = null;
        this.callbackPriority = NoLane;
        this.eventTimes = createLaneMap(NoLanes);
        this.expirationTimes = createLaneMap(NoTimestamp);
        this.pendingLanes = NoLanes;
        this.suspendedLanes = NoLanes;
        this.pingedLanes = NoLanes;
        this.expiredLanes = NoLanes;
        this.mutableReadLanes = NoLanes;
        this.finishedLanes = NoLanes;
        this.entangledLanes = NoLanes;
        this.entanglements = createLaneMap(NoLanes);
        this.identifierPrefix = identifierPrefix;
        this.onRecoverableError = onRecoverableError;
        this.mutableSourceEagerHydrationData = null;
        this.effectDuration = 0;
        this.passiveEffectDuration = 0;
        this.memoizedUpdaters = new Set();
        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
        for(var _i = 0; _i < TotalLanes; _i++)pendingUpdatersLaneMap.push(new Set());
        switch(tag){
            case ConcurrentRoot:
                this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
                break;
            case LegacyRoot:
                this._debugRootType = hydrate ? 'hydrate()' : 'render()';
                break;
        }
    }
    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
        var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
        root.current = uninitializedFiber;
        uninitializedFiber.stateNode = root;
        var _initialState = {
            element: initialChildren,
            isDehydrated: hydrate,
            cache: null,
            transitions: null,
            pendingSuspenseBoundaries: null
        };
        uninitializedFiber.memoizedState = _initialState;
        initializeUpdateQueue(uninitializedFiber);
        return root;
    }
    var ReactVersion = '18.2.0';
    function createPortal(children, containerInfo, implementation) {
        var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        checkKeyStringCoercion(key);
        return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : '' + key,
            children: children,
            containerInfo: containerInfo,
            implementation: implementation
        };
    }
    var didWarnAboutNestedUpdates;
    var didWarnAboutFindNodeInStrictMode;
    didWarnAboutNestedUpdates = false;
    didWarnAboutFindNodeInStrictMode = {};
    function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        var fiber = get(parentComponent);
        var parentContext = findCurrentUnmaskedContext(fiber);
        if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) return processChildContext(fiber, Component, parentContext);
        }
        return parentContext;
    }
    function findHostInstanceWithWarning(component, methodName) {
        var fiber = get(component);
        if (fiber === undefined) {
            if (typeof component.render === 'function') throw new Error('Unable to find node on an unmounted component.');
            else {
                var keys = Object.keys(component).join(',');
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
            }
        }
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        if (hostFiber.mode & StrictLegacyMode) {
            var componentName = getComponentNameFromFiber(fiber) || 'Component';
            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    else error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                } finally{
                    if (previousFiber) setCurrentFiber(previousFiber);
                    else resetCurrentFiber();
                }
            }
        }
        return hostFiber.stateNode;
    }
    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = false;
        var initialChildren = null;
        return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
    }
    function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
        var hydrate = true;
        var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        root.context = getContextForSubtree(null);
        var current = root.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current);
        var update = createUpdate(eventTime, lane);
        update.callback = callback !== undefined && callback !== null ? callback : null;
        enqueueUpdate(current, update, lane);
        scheduleInitialHydrationOnRoot(root, lane, eventTime);
        return root;
    }
    function updateContainer(element, container, parentComponent, callback) {
        onScheduleRoot(container, element);
        var current$1 = container.current;
        var eventTime = requestEventTime();
        var lane = requestUpdateLane(current$1);
        markRenderScheduled(lane);
        var context = getContextForSubtree(parentComponent);
        if (container.context === null) container.context = context;
        else container.pendingContext = context;
        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true;
            error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || 'Unknown');
        }
        var update = createUpdate(eventTime, lane);
        update.payload = {
            element: element
        };
        callback = callback === undefined ? null : callback;
        if (callback !== null) {
            if (typeof callback !== 'function') error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
            update.callback = callback;
        }
        var root = enqueueUpdate(current$1, update, lane);
        if (root !== null) {
            scheduleUpdateOnFiber(root, current$1, lane, eventTime);
            entangleTransitions(root, current$1, lane);
        }
        return lane;
    }
    function getPublicRootInstance(container) {
        var containerFiber = container.current;
        if (!containerFiber.child) return null;
        switch(containerFiber.child.tag){
            case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
            default:
                return containerFiber.child.stateNode;
        }
    }
    function attemptSynchronousHydration$1(fiber) {
        switch(fiber.tag){
            case HostRoot:
                var root = fiber.stateNode;
                if (isRootDehydrated(root)) {
                    var lanes = getHighestPriorityPendingLanes(root);
                    flushRoot(root, lanes);
                }
                break;
            case SuspenseComponent:
                flushSync(function() {
                    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                    if (root !== null) {
                        var eventTime = requestEventTime();
                        scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
                    }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
        }
    }
    function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState;
        if (suspenseState !== null && suspenseState.dehydrated !== null) suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
    }
    function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        var alternate = fiber.alternate;
        if (alternate) markRetryLaneImpl(alternate, retryLane);
    }
    function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) return;
        var lane = SelectiveHydrationLane;
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) return;
        var lane = requestUpdateLane(fiber);
        var root = enqueueConcurrentRenderForLane(fiber, lane);
        if (root !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root, fiber, lane, eventTime);
        }
        markRetryLaneIfNotHydrated(fiber, lane);
    }
    function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    var shouldErrorImpl = function(fiber) {
        return null;
    };
    function shouldError(fiber) {
        return shouldErrorImpl(fiber);
    }
    var shouldSuspendImpl = function(fiber) {
        return false;
    };
    function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber);
    }
    var overrideHookState = null;
    var overrideHookStateDeletePath = null;
    var overrideHookStateRenamePath = null;
    var overrideProps = null;
    var overridePropsDeletePath = null;
    var overridePropsRenamePath = null;
    var scheduleUpdate = null;
    var setErrorHandler = null;
    var setSuspenseHandler = null;
    var copyWithDeleteImpl = function(obj, path, index) {
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === path.length) {
            if (isArray(updated)) updated.splice(key, 1);
            else delete updated[key];
            return updated;
        }
        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
        return updated;
    };
    var copyWithDelete = function(obj, path) {
        return copyWithDeleteImpl(obj, path, 0);
    };
    var copyWithRenameImpl = function(obj, oldPath, newPath, index) {
        var oldKey = oldPath[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        if (index + 1 === oldPath.length) {
            var newKey = newPath[index];
            updated[newKey] = updated[oldKey];
            if (isArray(updated)) updated.splice(oldKey, 1);
            else delete updated[oldKey];
        } else updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);
        return updated;
    };
    var copyWithRename = function(obj, oldPath, newPath) {
        if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length');
            return;
        } else {
            for(var i = 0; i < newPath.length - 1; i++)if (oldPath[i] !== newPath[i]) {
                warn('copyWithRename() expects paths to be the same except for the deepest key');
                return;
            }
        }
        return copyWithRenameImpl(obj, oldPath, newPath, 0);
    };
    var copyWithSetImpl = function(obj, path, index, value) {
        if (index >= path.length) return value;
        var key = path[index];
        var updated = isArray(obj) ? obj.slice() : assign({}, obj);
        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
        return updated;
    };
    var copyWithSet = function(obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
    };
    var findHook = function(fiber, id) {
        var currentHook = fiber.memoizedState;
        while(currentHook !== null && id > 0){
            currentHook = currentHook.next;
            id--;
        }
        return currentHook;
    };
    overrideHookState = function(fiber, id, path, value) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateDeletePath = function(fiber, id, path) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
        var hook = findHook(fiber, id);
        if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
            hook.memoizedState = newState;
            hook.baseState = newState;
            fiber.memoizedProps = assign({}, fiber.memoizedProps);
            var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
        }
    };
    overrideProps = function(fiber, path, value) {
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsDeletePath = function(fiber, path) {
        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    overridePropsRenamePath = function(fiber, oldPath, newPath) {
        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
        if (fiber.alternate) fiber.alternate.pendingProps = fiber.pendingProps;
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    scheduleUpdate = function(fiber) {
        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);
        if (root !== null) scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
    };
    setErrorHandler = function(newShouldErrorImpl) {
        shouldErrorImpl = newShouldErrorImpl;
    };
    setSuspenseHandler = function(newShouldSuspendImpl) {
        shouldSuspendImpl = newShouldSuspendImpl;
    };
    function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber);
        if (hostFiber === null) return null;
        return hostFiber.stateNode;
    }
    function emptyFindFiberByHostInstance(instance) {
        return null;
    }
    function getCurrentFiberForDevTools() {
        return current;
    }
    function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState: overrideHookState,
            overrideHookStateDeletePath: overrideHookStateDeletePath,
            overrideHookStateRenamePath: overrideHookStateRenamePath,
            overrideProps: overrideProps,
            overridePropsDeletePath: overridePropsDeletePath,
            overridePropsRenamePath: overridePropsRenamePath,
            setErrorHandler: setErrorHandler,
            setSuspenseHandler: setSuspenseHandler,
            scheduleUpdate: scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher,
            findHostInstanceByFiber: findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh: findHostInstancesForRefresh,
            scheduleRefresh: scheduleRefresh,
            scheduleRoot: scheduleRoot,
            setRefreshHandler: setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools,
            reconcilerVersion: ReactVersion
        });
    }
    var defaultOnRecoverableError = typeof reportError === 'function' ? reportError : function(error) {
        console['error'](error);
    };
    function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root = this._internalRoot;
        if (root === null) throw new Error('Cannot update an unmounted root.');
        if (typeof arguments[1] === 'function') error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        else if (isValidContainer(arguments[1])) error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
        else if (typeof arguments[1] !== 'undefined') error("You passed a second argument to root.render(...) but it only accepts one argument.");
        var container = root.containerInfo;
        if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
            }
        }
        updateContainer(children, root, null, null);
    };
    ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        if (typeof arguments[0] === 'function') error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
        var root = this._internalRoot;
        if (root !== null) {
            this._internalRoot = null;
            var container = root.containerInfo;
            if (isAlreadyRendering()) error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
            flushSync(function() {
                updateContainer(null, root, null, null);
            });
            unmarkContainerAsRoot(container);
        }
    };
    function createRoot(container, options) {
        if (!isValidContainer(container)) throw new Error('createRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        var transitionCallbacks = null;
        if (options !== null && options !== undefined) {
            if (options.hydrate) warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');
            else if (typeof options === 'object' && options !== null && options.$$typeof === REACT_ELEMENT_TYPE) error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
            if (options.transitionCallbacks !== undefined) transitionCallbacks = options.transitionCallbacks;
        }
        var root = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
        listenToAllSupportedEvents(rootContainerElement);
        return new ReactDOMRoot(root);
    }
    function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
    }
    function scheduleHydration(target) {
        if (target) queueExplicitHydrationTarget(target);
    }
    ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
    function hydrateRoot(container, initialChildren, options) {
        if (!isValidContainer(container)) throw new Error('hydrateRoot(...): Target container is not a DOM element.');
        warnIfReactDOMContainerInDEV(container);
        if (initialChildren === undefined) error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
        var hydrationCallbacks = options != null ? options : null;
        var mutableSources = options != null && options.hydratedSources || null;
        var isStrictMode = false;
        var concurrentUpdatesByDefaultOverride = false;
        var identifierPrefix = '';
        var onRecoverableError = defaultOnRecoverableError;
        if (options !== null && options !== undefined) {
            if (options.unstable_strictMode === true) isStrictMode = true;
            if (options.identifierPrefix !== undefined) identifierPrefix = options.identifierPrefix;
            if (options.onRecoverableError !== undefined) onRecoverableError = options.onRecoverableError;
        }
        var root = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        markContainerAsRoot(root.current, container);
        listenToAllSupportedEvents(container);
        if (mutableSources) for(var i = 0; i < mutableSources.length; i++){
            var mutableSource = mutableSources[i];
            registerMutableSourceForHydration(root, mutableSource);
        }
        return new ReactDOMHydrationRoot(root);
    }
    function isValidContainer(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
    }
    function isValidContainerLegacy(node) {
        return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }
    function warnIfReactDOMContainerInDEV(container) {
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
        if (isContainerMarkedAsRoot(container)) {
            if (container._reactRootContainer) error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
            else error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
        }
    }
    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings;
    topLevelUpdateWarnings = function(container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
            if (hostInstance) {
                if (hostInstance.parentNode !== container) error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
            }
        }
        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
        if (hasNonRootReactChild && !isRootRenderedBySomeReact) error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
        if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
    };
    function getReactRootElementInContainer(container) {
        if (!container) return null;
        if (container.nodeType === DOCUMENT_NODE) return container.documentElement;
        else return container.firstChild;
    }
    function noopOnRecoverableError() {}
    function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
        if (isHydrationContainer) {
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            var root = createHydrationContainer(initialChildren, callback, container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = root;
            markContainerAsRoot(root.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync();
            return root;
        } else {
            var rootSibling;
            while(rootSibling = container.lastChild)container.removeChild(rootSibling);
            if (typeof callback === 'function') {
                var _originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(_root);
                    _originalCallback.call(instance);
                };
            }
            var _root = createContainer(container, LegacyRoot, null, false, false, '', noopOnRecoverableError);
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
        }
    }
    function warnOnInvalidCallback$1(callback, callerName) {
        if (callback !== null && typeof callback !== 'function') error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
    }
    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
        topLevelUpdateWarnings(container);
        warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
        var maybeRoot = container._reactRootContainer;
        var root;
        if (!maybeRoot) root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
        else {
            root = maybeRoot;
            if (typeof callback === 'function') {
                var originalCallback = callback;
                callback = function() {
                    var instance = getPublicRootInstance(root);
                    originalCallback.call(instance);
                };
            }
            updateContainer(children, root, parentComponent, callback);
        }
        return getPublicRootInstance(root);
    }
    function findDOMNode(componentOrElement) {
        var owner = ReactCurrentOwner$3.current;
        if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            if (!warnedAboutRefsInRender) error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || 'A component');
            owner.stateNode._warnedAboutRefsInRender = true;
        }
        if (componentOrElement == null) return null;
        if (componentOrElement.nodeType === ELEMENT_NODE) return componentOrElement;
        return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
    }
    function hydrate(element, container, callback) {
        error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
    }
    function render(element, container, callback) {
        error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(container)) throw new Error('Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
    }
    function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
        if (!isValidContainerLegacy(containerNode)) throw new Error('Target container is not a DOM element.');
        if (parentComponent == null || !has(parentComponent)) throw new Error('parentComponent must be a valid React Component');
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
    }
    function unmountComponentAtNode(container) {
        if (!isValidContainerLegacy(container)) throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');
        var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;
        if (isModernRoot) error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
        if (container._reactRootContainer) {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
            if (renderedByDifferentReact) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
            flushSync(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                    container._reactRootContainer = null;
                    unmarkContainerAsRoot(container);
                });
            });
            return true;
        } else {
            var _rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
            if (hasNonRootReactChild) error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
            return false;
        }
    }
    setAttemptSynchronousHydration(attemptSynchronousHydration$1);
    setAttemptContinuousHydration(attemptContinuousHydration$1);
    setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
    setGetCurrentUpdatePriority(getCurrentUpdatePriority);
    setAttemptHydrationAtPriority(runWithPriority);
    if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
    setRestoreImplementation(restoreControlledState$3);
    setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync);
    function createPortal$1(children, container) {
        var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        if (!isValidContainer(container)) throw new Error('Target container is not a DOM element.');
        return createPortal(children, container, null, key);
    }
    function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
        return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
    }
    var Internals = {
        usingClientEntryPoint: false,
        Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            batchedUpdates$1
        ]
    };
    function createRoot$1(container, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return createRoot(container, options);
    }
    function hydrateRoot$1(container, initialChildren, options) {
        if (!Internals.usingClientEntryPoint && true) error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
        return hydrateRoot(container, initialChildren, options);
    }
    function flushSync$1(fn) {
        if (isAlreadyRendering()) error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
        return flushSync(fn);
    }
    var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom'
    });
    if (!foundDevTools && canUseDOM && window.top === window.self) {
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
            var protocol = window.location.protocol;
            if (/^(https?|file):$/.test(protocol)) console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === 'file:' ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ''), 'font-weight:bold');
        }
    }
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
    exports.createPortal = createPortal$1;
    exports.createRoot = createRoot$1;
    exports.findDOMNode = findDOMNode;
    exports.flushSync = flushSync$1;
    exports.hydrate = hydrate;
    exports.hydrateRoot = hydrateRoot$1;
    exports.render = render;
    exports.unmountComponentAtNode = unmountComponentAtNode;
    exports.unstable_batchedUpdates = batchedUpdates$1;
    exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
    exports.version = ReactVersion;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();
},
"../../node_modules/react-dom/index.js": function (module, exports, __webpack_require__) {
"use strict";
function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') return;
    var err;
    throw new Error('^_^');
}
module.exports = __webpack_require__("../../node_modules/react-dom/cjs/react-dom.development.js");
},
"../../node_modules/react-is/cjs/react-is.development.js": function (module, exports, __webpack_require__) {
"use strict";
(function() {
    'use strict';
    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
    var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
    var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
    var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
    function isValidElementType(type) {
        return typeof type === 'string' || typeof type === 'function' || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
    }
    function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
            var $$typeof = object.$$typeof;
            switch($$typeof){
                case REACT_ELEMENT_TYPE:
                    var type = object.type;
                    switch(type){
                        case REACT_ASYNC_MODE_TYPE:
                        case REACT_CONCURRENT_MODE_TYPE:
                        case REACT_FRAGMENT_TYPE:
                        case REACT_PROFILER_TYPE:
                        case REACT_STRICT_MODE_TYPE:
                        case REACT_SUSPENSE_TYPE:
                            return type;
                        default:
                            var $$typeofType = type && type.$$typeof;
                            switch($$typeofType){
                                case REACT_CONTEXT_TYPE:
                                case REACT_FORWARD_REF_TYPE:
                                case REACT_LAZY_TYPE:
                                case REACT_MEMO_TYPE:
                                case REACT_PROVIDER_TYPE:
                                    return $$typeofType;
                                default:
                                    return $$typeof;
                            }
                    }
                case REACT_PORTAL_TYPE:
                    return $$typeof;
            }
        }
        return undefined;
    }
    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false;
    function isAsyncMode(object) {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true;
            console['warn']("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
        }
        return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }
    function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }
    function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
    }
    function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE;
    }
    function isElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }
    function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
    }
    function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
    }
    function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE;
    }
    function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
    }
    function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
    }
    function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }
    function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
    }
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
    exports.isValidElementType = isValidElementType;
    exports.typeOf = typeOf;
})();
},
"../../node_modules/react-is/index.js": function (module, exports, __webpack_require__) {
"use strict";
module.exports = __webpack_require__("../../node_modules/react-is/cjs/react-is.development.js");
},
"../../node_modules/react-transition-group/esm/CSSTransition.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _objectWithoutPropertiesLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"));
var _inheritsLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/prop-types/index.js"));
var _addClass = __webpack_require__.ir(__webpack_require__("../../node_modules/dom-helpers/esm/addClass.js"));
var _removeClass = __webpack_require__.ir(__webpack_require__("../../node_modules/dom-helpers/esm/removeClass.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _Transition = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/Transition.js"));
var _PropTypes = __webpack_require__("../../node_modules/react-transition-group/esm/utils/PropTypes.js");
var _addClass1 = function addClass(node, classes) {
    return node && classes && classes.split(' ').forEach(function(c) {
        return (0, _addClass.default)(node, c);
    });
};
var removeClass = function removeClass(node, classes) {
    return node && classes && classes.split(' ').forEach(function(c) {
        return (0, _removeClass.default)(node, c);
    });
};
var CSSTransition = function(_React$Component) {
    (0, _inheritsLoose.default)(CSSTransition, _React$Component);
    function CSSTransition() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.appliedClasses = {
            appear: {},
            enter: {},
            exit: {}
        };
        _this.onEnter = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
            _this.removeClasses(node, 'exit');
            _this.addClass(node, appearing ? 'appear' : 'enter', 'base');
            if (_this.props.onEnter) _this.props.onEnter(maybeNode, maybeAppearing);
        };
        _this.onEntering = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
            var type = appearing ? 'appear' : 'enter';
            _this.addClass(node, type, 'active');
            if (_this.props.onEntering) _this.props.onEntering(maybeNode, maybeAppearing);
        };
        _this.onEntered = function(maybeNode, maybeAppearing) {
            var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
            var type = appearing ? 'appear' : 'enter';
            _this.removeClasses(node, type);
            _this.addClass(node, type, 'done');
            if (_this.props.onEntered) _this.props.onEntered(maybeNode, maybeAppearing);
        };
        _this.onExit = function(maybeNode) {
            var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
            _this.removeClasses(node, 'appear');
            _this.removeClasses(node, 'enter');
            _this.addClass(node, 'exit', 'base');
            if (_this.props.onExit) _this.props.onExit(maybeNode);
        };
        _this.onExiting = function(maybeNode) {
            var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
            _this.addClass(node, 'exit', 'active');
            if (_this.props.onExiting) _this.props.onExiting(maybeNode);
        };
        _this.onExited = function(maybeNode) {
            var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
            _this.removeClasses(node, 'exit');
            _this.addClass(node, 'exit', 'done');
            if (_this.props.onExited) _this.props.onExited(maybeNode);
        };
        _this.resolveArguments = function(maybeNode, maybeAppearing) {
            return _this.props.nodeRef ? [
                _this.props.nodeRef.current,
                maybeNode
            ] : [
                maybeNode,
                maybeAppearing
            ];
        };
        _this.getClassNames = function(type) {
            var classNames = _this.props.classNames;
            var isStringClassNames = typeof classNames === 'string';
            var prefix = isStringClassNames && classNames ? classNames + "-" : '';
            var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
            var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
            var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
            return {
                baseClassName: baseClassName,
                activeClassName: activeClassName,
                doneClassName: doneClassName
            };
        };
        return _this;
    }
    var _proto = CSSTransition.prototype;
    _proto.addClass = function addClass(node, type, phase) {
        var className = this.getClassNames(type)[phase + "ClassName"];
        var _this$getClassNames = this.getClassNames('enter'), doneClassName = _this$getClassNames.doneClassName;
        if (type === 'appear' && phase === 'done' && doneClassName) className += " " + doneClassName;
        if (phase === 'active') node && node.scrollTop;
        if (className) {
            this.appliedClasses[type][phase] = className;
            _addClass1(node, className);
        }
    };
    _proto.removeClasses = function removeClasses(node, type) {
        var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
        this.appliedClasses[type] = {};
        if (baseClassName) removeClass(node, baseClassName);
        if (activeClassName) removeClass(node, activeClassName);
        if (doneClassName) removeClass(node, doneClassName);
    };
    _proto.render = function render() {
        var _this$props = this.props, _ = _this$props.classNames, props = (0, _objectWithoutPropertiesLoose.default)(_this$props, [
            "classNames"
        ]);
        return _index1.default.createElement(_Transition.default, (0, _extends.default)({}, props, {
            onEnter: this.onEnter,
            onEntered: this.onEntered,
            onEntering: this.onEntering,
            onExit: this.onExit,
            onExiting: this.onExiting,
            onExited: this.onExited
        }));
    };
    return CSSTransition;
}(_index1.default.Component);
CSSTransition.defaultProps = {
    classNames: ''
};
CSSTransition.propTypes = (0, _extends.default)({}, _Transition.default.propTypes, {
    classNames: _PropTypes.classNamesShape,
    onEnter: _index.default.func,
    onEntering: _index.default.func,
    onEntered: _index.default.func,
    onExit: _index.default.func,
    onExiting: _index.default.func,
    onExited: _index.default.func
});
var _default = CSSTransition;
},
"../../node_modules/react-transition-group/esm/ReplaceTransition.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _objectWithoutPropertiesLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"));
var _inheritsLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/prop-types/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/react-dom/index.js"));
var _TransitionGroup = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/TransitionGroup.js"));
var ReplaceTransition = function(_React$Component) {
    (0, _inheritsLoose.default)(ReplaceTransition, _React$Component);
    function ReplaceTransition() {
        var _this;
        for(var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++)_args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(_args)) || this;
        _this.handleEnter = function() {
            for(var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
            return _this.handleLifecycle('onEnter', 0, args);
        };
        _this.handleEntering = function() {
            for(var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++)args[_key3] = arguments[_key3];
            return _this.handleLifecycle('onEntering', 0, args);
        };
        _this.handleEntered = function() {
            for(var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)args[_key4] = arguments[_key4];
            return _this.handleLifecycle('onEntered', 0, args);
        };
        _this.handleExit = function() {
            for(var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++)args[_key5] = arguments[_key5];
            return _this.handleLifecycle('onExit', 1, args);
        };
        _this.handleExiting = function() {
            for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
            return _this.handleLifecycle('onExiting', 1, args);
        };
        _this.handleExited = function() {
            for(var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++)args[_key7] = arguments[_key7];
            return _this.handleLifecycle('onExited', 1, args);
        };
        return _this;
    }
    var _proto = ReplaceTransition.prototype;
    _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
        var _child$props;
        var children = this.props.children;
        var child = _index1.default.Children.toArray(children)[idx];
        if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
        if (this.props[handler]) {
            var maybeNode = child.props.nodeRef ? undefined : _index2.default.findDOMNode(this);
            this.props[handler](maybeNode);
        }
    };
    _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, inProp = _this$props.in, props = (0, _objectWithoutPropertiesLoose.default)(_this$props, [
            "children",
            "in"
        ]);
        var _React$Children$toArr = _index1.default.Children.toArray(children), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
        delete props.onEnter;
        delete props.onEntering;
        delete props.onEntered;
        delete props.onExit;
        delete props.onExiting;
        delete props.onExited;
        return _index1.default.createElement(_TransitionGroup.default, props, inProp ? _index1.default.cloneElement(first, {
            key: 'first',
            onEnter: this.handleEnter,
            onEntering: this.handleEntering,
            onEntered: this.handleEntered
        }) : _index1.default.cloneElement(second, {
            key: 'second',
            onEnter: this.handleExit,
            onEntering: this.handleExiting,
            onEntered: this.handleExited
        }));
    };
    return ReplaceTransition;
}(_index1.default.Component);
ReplaceTransition.propTypes = {
    in: _index.default.bool.isRequired,
    children: function children(props, propName) {
        if (_index1.default.Children.count(props[propName]) !== 2) return new Error("\"" + propName + "\" must be exactly two transition components.");
        return null;
    }
};
var _default = ReplaceTransition;
},
"../../node_modules/react-transition-group/esm/SwitchTransition.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    modes: function() {
        return modes;
    },
    default: function() {
        return _default;
    }
});
var _inheritsLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/prop-types/index.js"));
var _Transition = __webpack_require__("../../node_modules/react-transition-group/esm/Transition.js");
var _TransitionGroupContext = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/TransitionGroupContext.js"));
var _leaveRenders, _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
    if (oldChildren === newChildren) return false;
    if (_index.default.isValidElement(oldChildren) && _index.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) return false;
    return true;
}
var modes = {
    out: 'out-in',
    in: 'in-out'
};
var callHook = function callHook(element, name, cb) {
    return function() {
        var _element$props;
        element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
        cb();
    };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
    var current = _ref.current, changeState = _ref.changeState;
    return _index.default.cloneElement(current, {
        in: false,
        onExited: callHook(current, 'onExited', function() {
            changeState(_Transition.ENTERING, null);
        })
    });
}, _leaveRenders[modes.in] = function(_ref2) {
    var current = _ref2.current, changeState = _ref2.changeState, children = _ref2.children;
    return [
        current,
        _index.default.cloneElement(children, {
            in: true,
            onEntered: callHook(children, 'onEntered', function() {
                changeState(_Transition.ENTERING);
            })
        })
    ];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
    var children = _ref3.children, changeState = _ref3.changeState;
    return _index.default.cloneElement(children, {
        in: true,
        onEntered: callHook(children, 'onEntered', function() {
            changeState(_Transition.ENTERED, _index.default.cloneElement(children, {
                in: true
            }));
        })
    });
}, _enterRenders[modes.in] = function(_ref4) {
    var current = _ref4.current, children = _ref4.children, changeState = _ref4.changeState;
    return [
        _index.default.cloneElement(current, {
            in: false,
            onExited: callHook(current, 'onExited', function() {
                changeState(_Transition.ENTERED, _index.default.cloneElement(children, {
                    in: true
                }));
            })
        }),
        _index.default.cloneElement(children, {
            in: true
        })
    ];
}, _enterRenders);
var SwitchTransition = function(_React$Component) {
    (0, _inheritsLoose.default)(SwitchTransition, _React$Component);
    function SwitchTransition() {
        var _this;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        _this = _React$Component.call.apply(_React$Component, [
            this
        ].concat(args)) || this;
        _this.state = {
            status: _Transition.ENTERED,
            current: null
        };
        _this.appeared = false;
        _this.changeState = function(status, current) {
            if (current === void 0) current = _this.state.current;
            _this.setState({
                status: status,
                current: current
            });
        };
        return _this;
    }
    var _proto = SwitchTransition.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.appeared = true;
    };
    SwitchTransition.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        if (props.children == null) return {
            current: null
        };
        if (state.status === _Transition.ENTERING && props.mode === modes.in) return {
            status: _Transition.ENTERING
        };
        if (state.current && areChildrenDifferent(state.current, props.children)) return {
            status: _Transition.EXITING
        };
        return {
            current: _index.default.cloneElement(props.children, {
                in: true
            })
        };
    };
    _proto.render = function render() {
        var _this$props = this.props, children = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
        var data = {
            children: children,
            current: current,
            changeState: this.changeState,
            status: status
        };
        var component;
        switch(status){
            case _Transition.ENTERING:
                component = enterRenders[mode](data);
                break;
            case _Transition.EXITING:
                component = leaveRenders[mode](data);
                break;
            case _Transition.ENTERED:
                component = current;
        }
        return _index.default.createElement(_TransitionGroupContext.default.Provider, {
            value: {
                isMounting: !this.appeared
            }
        }, component);
    };
    return SwitchTransition;
}(_index.default.Component);
SwitchTransition.propTypes = {
    mode: _index1.default.oneOf([
        modes.in,
        modes.out
    ]),
    children: _index1.default.oneOfType([
        _index1.default.element.isRequired
    ])
};
SwitchTransition.defaultProps = {
    mode: modes.out
};
var _default = SwitchTransition;
},
"../../node_modules/react-transition-group/esm/Transition.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    UNMOUNTED: function() {
        return UNMOUNTED;
    },
    EXITED: function() {
        return EXITED;
    },
    ENTERING: function() {
        return ENTERING;
    },
    ENTERED: function() {
        return ENTERED;
    },
    EXITING: function() {
        return EXITING;
    },
    default: function() {
        return _default;
    }
});
var _objectWithoutPropertiesLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"));
var _inheritsLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/prop-types/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/react-dom/index.js"));
var _config = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/config.js"));
var _PropTypes = __webpack_require__("../../node_modules/react-transition-group/esm/utils/PropTypes.js");
var _TransitionGroupContext = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/TransitionGroupContext.js"));
var UNMOUNTED = 'unmounted';
var EXITED = 'exited';
var ENTERING = 'entering';
var ENTERED = 'entered';
var EXITING = 'exiting';
var Transition = function(_React$Component) {
    (0, _inheritsLoose.default)(Transition, _React$Component);
    function Transition(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var parentGroup = context;
        var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
        var initialStatus;
        _this.appearStatus = null;
        if (props.in) {
            if (appear) {
                initialStatus = EXITED;
                _this.appearStatus = ENTERING;
            } else initialStatus = ENTERED;
        } else if (props.unmountOnExit || props.mountOnEnter) initialStatus = UNMOUNTED;
        else initialStatus = EXITED;
        _this.state = {
            status: initialStatus
        };
        _this.nextCallback = null;
        return _this;
    }
    Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
        var nextIn = _ref.in;
        if (nextIn && prevState.status === UNMOUNTED) return {
            status: EXITED
        };
        return null;
    };
    var _proto = Transition.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
        var nextStatus = null;
        if (prevProps !== this.props) {
            var status = this.state.status;
            if (this.props.in) {
                if (status !== ENTERING && status !== ENTERED) nextStatus = ENTERING;
            } else if (status === ENTERING || status === ENTERED) nextStatus = EXITING;
        }
        this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
        var timeout = this.props.timeout;
        var exit, enter, appear;
        exit = enter = appear = timeout;
        if (timeout != null && typeof timeout !== 'number') {
            exit = timeout.exit;
            enter = timeout.enter;
            appear = timeout.appear !== undefined ? timeout.appear : enter;
        }
        return {
            exit: exit,
            enter: enter,
            appear: appear
        };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
        if (mounting === void 0) mounting = false;
        if (nextStatus !== null) {
            this.cancelNextCallback();
            if (nextStatus === ENTERING) this.performEnter(mounting);
            else this.performExit();
        } else if (this.props.unmountOnExit && this.state.status === EXITED) this.setState({
            status: UNMOUNTED
        });
    };
    _proto.performEnter = function performEnter(mounting) {
        var _this2 = this;
        var enter = this.props.enter;
        var appearing = this.context ? this.context.isMounting : mounting;
        var _ref2 = this.props.nodeRef ? [
            appearing
        ] : [
            _index2.default.findDOMNode(this),
            appearing
        ], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
        var timeouts = this.getTimeouts();
        var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
        if (!mounting && !enter || _config.default.disabled) {
            this.safeSetState({
                status: ENTERED
            }, function() {
                _this2.props.onEntered(maybeNode);
            });
            return;
        }
        this.props.onEnter(maybeNode, maybeAppearing);
        this.safeSetState({
            status: ENTERING
        }, function() {
            _this2.props.onEntering(maybeNode, maybeAppearing);
            _this2.onTransitionEnd(enterTimeout, function() {
                _this2.safeSetState({
                    status: ENTERED
                }, function() {
                    _this2.props.onEntered(maybeNode, maybeAppearing);
                });
            });
        });
    };
    _proto.performExit = function performExit() {
        var _this3 = this;
        var exit = this.props.exit;
        var timeouts = this.getTimeouts();
        var maybeNode = this.props.nodeRef ? undefined : _index2.default.findDOMNode(this);
        if (!exit || _config.default.disabled) {
            this.safeSetState({
                status: EXITED
            }, function() {
                _this3.props.onExited(maybeNode);
            });
            return;
        }
        this.props.onExit(maybeNode);
        this.safeSetState({
            status: EXITING
        }, function() {
            _this3.props.onExiting(maybeNode);
            _this3.onTransitionEnd(timeouts.exit, function() {
                _this3.safeSetState({
                    status: EXITED
                }, function() {
                    _this3.props.onExited(maybeNode);
                });
            });
        });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
        if (this.nextCallback !== null) {
            this.nextCallback.cancel();
            this.nextCallback = null;
        }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
        callback = this.setNextCallback(callback);
        this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
        var _this4 = this;
        var active = true;
        this.nextCallback = function(event) {
            if (active) {
                active = false;
                _this4.nextCallback = null;
                callback(event);
            }
        };
        this.nextCallback.cancel = function() {
            active = false;
        };
        return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
        this.setNextCallback(handler);
        var node = this.props.nodeRef ? this.props.nodeRef.current : _index2.default.findDOMNode(this);
        var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;
        if (!node || doesNotHaveTimeoutOrListener) {
            setTimeout(this.nextCallback, 0);
            return;
        }
        if (this.props.addEndListener) {
            var _ref3 = this.props.nodeRef ? [
                this.nextCallback
            ] : [
                node,
                this.nextCallback
            ], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
            this.props.addEndListener(maybeNode, maybeNextCallback);
        }
        if (timeout != null) setTimeout(this.nextCallback, timeout);
    };
    _proto.render = function render() {
        var status = this.state.status;
        if (status === UNMOUNTED) return null;
        var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = (0, _objectWithoutPropertiesLoose.default)(_this$props, [
            "children",
            "in",
            "mountOnEnter",
            "unmountOnExit",
            "appear",
            "enter",
            "exit",
            "timeout",
            "addEndListener",
            "onEnter",
            "onEntering",
            "onEntered",
            "onExit",
            "onExiting",
            "onExited",
            "nodeRef"
        ]);
        return _index1.default.createElement(_TransitionGroupContext.default.Provider, {
            value: null
        }, typeof children === 'function' ? children(status, childProps) : _index1.default.cloneElement(_index1.default.Children.only(children), childProps));
    };
    return Transition;
}(_index1.default.Component);
Transition.contextType = _TransitionGroupContext.default;
Transition.propTypes = {
    nodeRef: _index.default.shape({
        current: typeof Element === 'undefined' ? _index.default.any : function(propValue, key, componentName, location, propFullName, secret) {
            var value = propValue[key];
            return _index.default.instanceOf(value && 'ownerDocument' in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
        }
    }),
    children: _index.default.oneOfType([
        _index.default.func.isRequired,
        _index.default.element.isRequired
    ]).isRequired,
    in: _index.default.bool,
    mountOnEnter: _index.default.bool,
    unmountOnExit: _index.default.bool,
    appear: _index.default.bool,
    enter: _index.default.bool,
    exit: _index.default.bool,
    timeout: function timeout(props) {
        var pt = _PropTypes.timeoutsShape;
        if (!props.addEndListener) pt = pt.isRequired;
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        return pt.apply(void 0, [
            props
        ].concat(args));
    },
    addEndListener: _index.default.func,
    onEnter: _index.default.func,
    onEntering: _index.default.func,
    onEntered: _index.default.func,
    onExit: _index.default.func,
    onExiting: _index.default.func,
    onExited: _index.default.func
};
function noop() {}
Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var _default = Transition;
},
"../../node_modules/react-transition-group/esm/TransitionGroup.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _objectWithoutPropertiesLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"));
var _extends = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/extends.js"));
var _assertThisInitialized = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"));
var _inheritsLoose = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"));
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/prop-types/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _TransitionGroupContext = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/TransitionGroupContext.js"));
var _ChildMapping = __webpack_require__("../../node_modules/react-transition-group/esm/utils/ChildMapping.js");
var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
        return obj[k];
    });
};
var defaultProps = {
    component: 'div',
    childFactory: function childFactory(child) {
        return child;
    }
};
var TransitionGroup = function(_React$Component) {
    (0, _inheritsLoose.default)(TransitionGroup, _React$Component);
    function TransitionGroup(props, context) {
        var _this;
        _this = _React$Component.call(this, props, context) || this;
        var handleExited = _this.handleExited.bind((0, _assertThisInitialized.default)(_this));
        _this.state = {
            contextValue: {
                isMounting: true
            },
            handleExited: handleExited,
            firstRender: true
        };
        return _this;
    }
    var _proto = TransitionGroup.prototype;
    _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        this.setState({
            contextValue: {
                isMounting: false
            }
        });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
    };
    TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
        var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
        return {
            children: firstRender ? (0, _ChildMapping.getInitialChildMapping)(nextProps, handleExited) : (0, _ChildMapping.getNextChildMapping)(nextProps, prevChildMapping, handleExited),
            firstRender: false
        };
    };
    _proto.handleExited = function handleExited(child, node) {
        var currentChildMapping = (0, _ChildMapping.getChildMapping)(this.props.children);
        if (child.key in currentChildMapping) return;
        if (child.props.onExited) child.props.onExited(node);
        if (this.mounted) this.setState(function(state) {
            var children = (0, _extends.default)({}, state.children);
            delete children[child.key];
            return {
                children: children
            };
        });
    };
    _proto.render = function render() {
        var _this$props = this.props, Component = _this$props.component, childFactory = _this$props.childFactory, props = (0, _objectWithoutPropertiesLoose.default)(_this$props, [
            "component",
            "childFactory"
        ]);
        var contextValue = this.state.contextValue;
        var children = values(this.state.children).map(childFactory);
        delete props.appear;
        delete props.enter;
        delete props.exit;
        if (Component === null) return _index1.default.createElement(_TransitionGroupContext.default.Provider, {
            value: contextValue
        }, children);
        return _index1.default.createElement(_TransitionGroupContext.default.Provider, {
            value: contextValue
        }, _index1.default.createElement(Component, props, children));
    };
    return TransitionGroup;
}(_index1.default.Component);
TransitionGroup.propTypes = {
    component: _index.default.any,
    children: _index.default.node,
    appear: _index.default.bool,
    enter: _index.default.bool,
    exit: _index.default.bool,
    childFactory: _index.default.func
};
TransitionGroup.defaultProps = defaultProps;
var _default = TransitionGroup;
},
"../../node_modules/react-transition-group/esm/TransitionGroupContext.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _default = _index.default.createContext(null);
},
"../../node_modules/react-transition-group/esm/config.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _default = {
    disabled: false
};
},
"../../node_modules/react-transition-group/esm/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    CSSTransition: function() {
        return _CSSTransition.default;
    },
    ReplaceTransition: function() {
        return _ReplaceTransition.default;
    },
    SwitchTransition: function() {
        return _SwitchTransition.default;
    },
    TransitionGroup: function() {
        return _TransitionGroup.default;
    },
    Transition: function() {
        return _Transition.default;
    },
    config: function() {
        return _config.default;
    }
});
var _CSSTransition = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/CSSTransition.js"));
var _ReplaceTransition = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/ReplaceTransition.js"));
var _SwitchTransition = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/SwitchTransition.js"));
var _TransitionGroup = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/TransitionGroup.js"));
var _Transition = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/Transition.js"));
var _config = __webpack_require__.ir(__webpack_require__("../../node_modules/react-transition-group/esm/config.js"));
},
"../../node_modules/react-transition-group/esm/utils/ChildMapping.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getChildMapping: function() {
        return getChildMapping;
    },
    mergeChildMappings: function() {
        return mergeChildMappings;
    },
    getInitialChildMapping: function() {
        return getInitialChildMapping;
    },
    getNextChildMapping: function() {
        return getNextChildMapping;
    }
});
var _index = __webpack_require__("../../node_modules/react/index.js");
function getChildMapping(children, mapFn) {
    var mapper = function mapper(child) {
        return mapFn && (0, _index.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = Object.create(null);
    if (children) _index.Children.map(children, function(c) {
        return c;
    }).forEach(function(child) {
        result[child.key] = mapper(child);
    });
    return result;
}
function mergeChildMappings(prev, next) {
    prev = prev || {};
    next = next || {};
    function getValueForKey(key) {
        return key in next ? next[key] : prev[key];
    }
    var nextKeysPending = Object.create(null);
    var pendingKeys = [];
    for(var prevKey in prev){
        if (prevKey in next) {
            if (pendingKeys.length) {
                nextKeysPending[prevKey] = pendingKeys;
                pendingKeys = [];
            }
        } else pendingKeys.push(prevKey);
    }
    var i;
    var childMapping = {};
    for(var nextKey in next){
        if (nextKeysPending[nextKey]) for(i = 0; i < nextKeysPending[nextKey].length; i++){
            var pendingNextKey = nextKeysPending[nextKey][i];
            childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
        childMapping[nextKey] = getValueForKey(nextKey);
    }
    for(i = 0; i < pendingKeys.length; i++)childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    return childMapping;
}
function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
        return (0, _index.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            appear: getProp(child, 'appear', props),
            enter: getProp(child, 'enter', props),
            exit: getProp(child, 'exit', props)
        });
    });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
        var child = children[key];
        if (!(0, _index.isValidElement)(child)) return;
        var hasPrev = key in prevChildMapping;
        var hasNext = key in nextChildMapping;
        var prevChild = prevChildMapping[key];
        var isLeaving = (0, _index.isValidElement)(prevChild) && !prevChild.props.in;
        if (hasNext && (!hasPrev || isLeaving)) children[key] = (0, _index.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: true,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
        else if (!hasNext && hasPrev && !isLeaving) children[key] = (0, _index.cloneElement)(child, {
            in: false
        });
        else if (hasNext && hasPrev && (0, _index.isValidElement)(prevChild)) children[key] = (0, _index.cloneElement)(child, {
            onExited: onExited.bind(null, child),
            in: prevChild.props.in,
            exit: getProp(child, 'exit', nextProps),
            enter: getProp(child, 'enter', nextProps)
        });
    });
    return children;
}
},
"../../node_modules/react-transition-group/esm/utils/PropTypes.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    timeoutsShape: function() {
        return timeoutsShape;
    },
    classNamesShape: function() {
        return classNamesShape;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/prop-types/index.js"));
var timeoutsShape = _index.default.oneOfType([
    _index.default.number,
    _index.default.shape({
        enter: _index.default.number,
        exit: _index.default.number,
        appear: _index.default.number
    }).isRequired
]);
var classNamesShape = _index.default.oneOfType([
    _index.default.string,
    _index.default.shape({
        enter: _index.default.string,
        exit: _index.default.string,
        active: _index.default.string
    }),
    _index.default.shape({
        enter: _index.default.string,
        enterDone: _index.default.string,
        enterActive: _index.default.string,
        exit: _index.default.string,
        exitDone: _index.default.string,
        exitActive: _index.default.string
    })
]);
},
"../../node_modules/react/cjs/react-jsx-runtime.development.js": function (module, exports, __webpack_require__) {
"use strict";
(function() {
    'use strict';
    var React = __webpack_require__("../../node_modules/react/index.js");
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return String(item);
        });
        argsWithFormat.unshift('Warning: ' + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromType(type) {
        if (type == null) return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var assign = Object.assign;
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            var props = {
                configurable: true,
                enumerable: true,
                writable: true
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher.current;
        ReactCurrentDispatcher.current = null;
        disableLogs();
        try {
            if (construct) {
                var Fake = function() {
                    throw Error();
                };
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            if (sample && control && typeof sample.stack === 'string') {
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])c--;
                for(; s >= 1 && c >= 0; s--, c--)if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
        return isArrayImpl(a);
    }
    function typeName(value) {
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    }
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
        }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            ref: ref,
            props: props,
            _owner: owner
        };
        element._store = {};
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        });
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        });
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    function jsxDEV(type, config, maybeKey, source, self) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        if (maybeKey !== undefined) {
            checkKeyStringCoercion(maybeKey);
            key = '' + maybeKey;
        }
        if (hasValidKey(config)) {
            checkKeyStringCoercion(config.key);
            key = '' + config.key;
        }
        if (hasValidRef(config)) {
            ref = config.ref;
            warnIfStringRefCannotBeAutoConverted(config, self);
        }
        for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner$1.current) {
            var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
        var validType = isValidElementType(type);
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendum(source);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self);
        if (element == null) return element;
        if (validType) {
            var children = props.children;
            if (children !== undefined) {
                if (isStaticChildren) {
                    if (isArray(children)) {
                        for(var i = 0; i < children.length; i++)validateChildKeys(children[i], type);
                        if (Object.freeze) Object.freeze(children);
                    } else error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                } else validateChildKeys(children, type);
            }
        }
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    function jsxWithValidationStatic(type, props, key) {
        return jsxWithValidation(type, props, key, true);
    }
    function jsxWithValidationDynamic(type, props, key) {
        return jsxWithValidation(type, props, key, false);
    }
    var jsx = jsxWithValidationDynamic;
    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
})();
},
"../../node_modules/react/cjs/react.development.js": function (module, exports, __webpack_require__) {
"use strict";
(function() {
    'use strict';
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var ReactVersion = '18.2.0';
    var REACT_ELEMENT_TYPE = Symbol.for('react.element');
    var REACT_PORTAL_TYPE = Symbol.for('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
    var REACT_CONTEXT_TYPE = Symbol.for('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol.for('react.memo');
    var REACT_LAZY_TYPE = Symbol.for('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') return null;
        var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
        if (typeof maybeIterator === 'function') return maybeIterator;
        return null;
    }
    var ReactCurrentDispatcher = {
        current: null
    };
    var ReactCurrentBatchConfig = {
        transition: null
    };
    var ReactCurrentActQueue = {
        current: null,
        isBatchingLegacy: false,
        didScheduleLegacyUpdate: false
    };
    var ReactCurrentOwner = {
        current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
        currentExtraStackFrame = stack;
    }
    ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
        currentExtraStackFrame = stack;
    };
    ReactDebugCurrentFrame.getCurrentStack = null;
    ReactDebugCurrentFrame.getStackAddendum = function() {
        var stack = '';
        if (currentExtraStackFrame) stack += currentExtraStackFrame;
        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) stack += impl() || '';
        return stack;
    };
    var enableScopeAPI = false;
    var enableCacheElement = false;
    var enableTransitionTracing = false;
    var enableLegacyHidden = false;
    var enableDebugTracing = false;
    var ReactSharedInternals = {
        ReactCurrentDispatcher: ReactCurrentDispatcher,
        ReactCurrentBatchConfig: ReactCurrentBatchConfig,
        ReactCurrentOwner: ReactCurrentOwner
    };
    ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
    ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    function warn(format) {
        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
        printWarning('warn', format, args);
    }
    function error(format) {
        for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
        printWarning('error', format, args);
    }
    function printWarning(level, format, args) {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
            format += '%s';
            args = args.concat([
                stack
            ]);
        }
        var argsWithFormat = args.map(function(item) {
            return String(item);
        });
        argsWithFormat.unshift('Warning: ' + format);
        Function.prototype.apply.call(console[level], console, argsWithFormat);
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) return;
        error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
    }
    var ReactNoopUpdateQueue = {
        isMounted: function(publicInstance) {
            return false;
        },
        enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate');
        },
        enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, 'replaceState');
        },
        enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, 'setState');
        }
    };
    var assign = Object.assign;
    var emptyObject = {};
    Object.freeze(emptyObject);
    function Component(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    Component.prototype.setState = function(partialState, callback) {
        if (typeof partialState !== 'object' && typeof partialState !== 'function' && partialState != null) throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    Component.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    var deprecatedAPIs = {
        isMounted: [
            'isMounted',
            "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."
        ],
        replaceState: [
            'replaceState',
            "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."
        ]
    };
    var defineDeprecationWarning = function(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
            get: function() {
                warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
                return undefined;
            }
        });
    };
    for(var fnName in deprecatedAPIs)if (deprecatedAPIs.hasOwnProperty(fnName)) defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    function PureComponent(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent;
    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;
    function createRef() {
        var refObject = {
            current: null
        };
        Object.seal(refObject);
        return refObject;
    }
    var isArrayImpl = Array.isArray;
    function isArray(a) {
        return isArrayImpl(a);
    }
    function typeName(value) {
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
    }
    function willCoercionThrow(value) {
        try {
            testStringCoercion(value);
            return false;
        } catch (e) {
            return true;
        }
    }
    function testStringCoercion(value) {
        return '' + value;
    }
    function checkKeyStringCoercion(value) {
        if (willCoercionThrow(value)) {
            error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
            return testStringCoercion(value);
        }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
        var displayName = outerType.displayName;
        if (displayName) return displayName;
        var functionName = innerType.displayName || innerType.name || '';
        return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    }
    function getContextName(type) {
        return type.displayName || 'Context';
    }
    function getComponentNameFromType(type) {
        if (type == null) return null;
        if (typeof type.tag === 'number') error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
        if (typeof type === 'function') return type.displayName || type.name || null;
        if (typeof type === 'string') return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return 'Fragment';
            case REACT_PORTAL_TYPE:
                return 'Portal';
            case REACT_PROFILER_TYPE:
                return 'Profiler';
            case REACT_STRICT_MODE_TYPE:
                return 'StrictMode';
            case REACT_SUSPENSE_TYPE:
                return 'Suspense';
            case REACT_SUSPENSE_LIST_TYPE:
                return 'SuspenseList';
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + '.Consumer';
            case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + '.Provider';
            case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef');
            case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) return outerName;
                return getComponentNameFromType(type.type) || 'Memo';
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return getComponentNameFromType(init(payload));
                } catch (x) {
                    return null;
                }
        }
        return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
        key: true,
        ref: true,
        __self: true,
        __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    didWarnAboutStringRefs = {};
    function hasValidRef(config) {
        if (hasOwnProperty.call(config, 'ref')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.ref !== undefined;
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, 'key')) {
            var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
            if (getter && getter.isReactWarning) return false;
        }
        return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        var warnAboutAccessingKey = function() {
            if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true
        });
    }
    function defineRefPropWarningGetter(props, displayName) {
        var warnAboutAccessingRef = function() {
            if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
            }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true
        });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
            var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                didWarnAboutStringRefs[componentName] = true;
            }
        }
    }
    var ReactElement = function(type, key, ref, self, source, owner, props) {
        var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            ref: ref,
            props: props,
            _owner: owner
        };
        element._store = {};
        Object.defineProperty(element._store, 'validated', {
            configurable: false,
            enumerable: false,
            writable: true,
            value: false
        });
        Object.defineProperty(element, '_self', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: self
        });
        Object.defineProperty(element, '_source', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: source
        });
        if (Object.freeze) {
            Object.freeze(element.props);
            Object.freeze(element);
        }
        return element;
    };
    function createElement(type, config, children) {
        var propName;
        var props = {};
        var key = null;
        var ref = null;
        var self = null;
        var source = null;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                warnIfStringRefCannotBeAutoConverted(config);
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            }
            self = config.__self === undefined ? null : config.__self;
            source = config.__source === undefined ? null : config.__source;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) props[propName] = config[propName];
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            if (Object.freeze) Object.freeze(childArray);
            props.children = childArray;
        }
        if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for(propName in defaultProps)if (props[propName] === undefined) props[propName] = defaultProps[propName];
        }
        if (key || ref) {
            var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
            if (key) defineKeyPropWarningGetter(props, displayName);
            if (ref) defineRefPropWarningGetter(props, displayName);
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
        var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
        return newElement;
    }
    function cloneElement(element, config, children) {
        if (element === null || element === undefined) throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
        var propName;
        var props = assign({}, element.props);
        var key = element.key;
        var ref = element.ref;
        var self = element._self;
        var source = element._source;
        var owner = element._owner;
        if (config != null) {
            if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config)) {
                checkKeyStringCoercion(config.key);
                key = '' + config.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) defaultProps = element.type.defaultProps;
            for(propName in config)if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config[propName] === undefined && defaultProps !== undefined) props[propName] = defaultProps[propName];
                else props[propName] = config[propName];
            }
        }
        var childrenLength = arguments.length - 2;
        if (childrenLength === 1) props.children = children;
        else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for(var i = 0; i < childrenLength; i++)childArray[i] = arguments[i + 2];
            props.children = childArray;
        }
        return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    function isValidElement(object) {
        return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    function escape(key) {
        var escapeRegex = /[=:]/g;
        var escaperLookup = {
            '=': '=0',
            ':': '=2'
        };
        var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
        });
        return '$' + escapedString;
    }
    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
        return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    function getElementKey(element, index) {
        if (typeof element === 'object' && element !== null && element.key != null) {
            checkKeyStringCoercion(element.key);
            return escape('' + element.key);
        }
        return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if (type === 'undefined' || type === 'boolean') children = null;
        var invokeCallback = false;
        if (children === null) invokeCallback = true;
        else switch(type){
            case 'string':
            case 'number':
                invokeCallback = true;
                break;
            case 'object':
                switch(children.$$typeof){
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                        invokeCallback = true;
                }
        }
        if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (isArray(mappedChild)) {
                var escapedChildKey = '';
                if (childKey != null) escapedChildKey = escapeUserProvidedKey(childKey) + '/';
                mapIntoArray(mappedChild, array, escapedChildKey, '', function(c) {
                    return c;
                });
            } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) checkKeyStringCoercion(mappedChild.key);
                    mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
                }
                array.push(mappedChild);
            }
            return 1;
        }
        var child;
        var nextName;
        var subtreeCount = 0;
        var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
        if (isArray(children)) for(var i = 0; i < children.length; i++){
            child = children[i];
            nextName = nextNamePrefix + getElementKey(child, i);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
        else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === 'function') {
                var iterableChildren = children;
                if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    didWarnAboutMaps = true;
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while(!(step = iterator.next()).done){
                    child = step.value;
                    nextName = nextNamePrefix + getElementKey(child, ii++);
                    subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
            } else if (type === 'object') {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
            }
        }
        return subtreeCount;
    }
    function mapChildren(children, func, context) {
        if (children == null) return children;
        var result = [];
        var count = 0;
        mapIntoArray(children, result, '', '', function(child) {
            return func.call(context, child, count++);
        });
        return result;
    }
    function countChildren(children) {
        var n = 0;
        mapChildren(children, function() {
            n++;
        });
        return n;
    }
    function forEachChildren(children, forEachFunc, forEachContext) {
        mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
        }, forEachContext);
    }
    function toArray(children) {
        return mapChildren(children, function(child) {
            return child;
        }) || [];
    }
    function onlyChild(children) {
        if (!isValidElement(children)) throw new Error('React.Children.only expected to receive a single React element child.');
        return children;
    }
    function createContext(defaultValue) {
        var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null,
            _defaultValue: null,
            _globalName: null
        };
        context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
        };
        var hasWarnedAboutUsingNestedContextConsumers = false;
        var hasWarnedAboutUsingConsumerProvider = false;
        var hasWarnedAboutDisplayNameOnConsumer = false;
        var Consumer = {
            $$typeof: REACT_CONTEXT_TYPE,
            _context: context
        };
        Object.defineProperties(Consumer, {
            Provider: {
                get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                        hasWarnedAboutUsingConsumerProvider = true;
                        error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                },
                set: function(_Provider) {
                    context.Provider = _Provider;
                }
            },
            _currentValue: {
                get: function() {
                    return context._currentValue;
                },
                set: function(_currentValue) {
                    context._currentValue = _currentValue;
                }
            },
            _currentValue2: {
                get: function() {
                    return context._currentValue2;
                },
                set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                }
            },
            _threadCount: {
                get: function() {
                    return context._threadCount;
                },
                set: function(_threadCount) {
                    context._threadCount = _threadCount;
                }
            },
            Consumer: {
                get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                        hasWarnedAboutUsingNestedContextConsumers = true;
                        error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                }
            },
            displayName: {
                get: function() {
                    return context.displayName;
                },
                set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                        warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                        hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                }
            }
        });
        context.Consumer = Consumer;
        context._currentRenderer = null;
        context._currentRenderer2 = null;
        return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
        if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            thenable.then(function(moduleObject) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    var resolved = payload;
                    resolved._status = Resolved;
                    resolved._result = moduleObject;
                }
            }, function(error) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                    var rejected = payload;
                    rejected._status = Rejected;
                    rejected._result = error;
                }
            });
            if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
            }
        }
        if (payload._status === Resolved) {
            var moduleObject = payload._result;
            if (moduleObject === undefined) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
            if (!('default' in moduleObject)) error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
            return moduleObject.default;
        } else throw payload._result;
    }
    function lazy(ctor) {
        var payload = {
            _status: Uninitialized,
            _result: ctor
        };
        var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
        };
        var defaultProps;
        var propTypes;
        Object.defineProperties(lazyType, {
            defaultProps: {
                configurable: true,
                get: function() {
                    return defaultProps;
                },
                set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, 'defaultProps', {
                        enumerable: true
                    });
                }
            },
            propTypes: {
                configurable: true,
                get: function() {
                    return propTypes;
                },
                set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, 'propTypes', {
                        enumerable: true
                    });
                }
            }
        });
        return lazyType;
    }
    function forwardRef(render) {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
        else if (typeof render !== 'function') error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        else if (render.length !== 0 && render.length !== 2) error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
        if (render != null) {
            if (render.defaultProps != null || render.propTypes != null) error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
        }
        var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (!render.name && !render.displayName) render.displayName = name;
            }
        });
        return elementType;
    }
    var REACT_MODULE_REFERENCE;
    REACT_MODULE_REFERENCE = Symbol.for('react.module.reference');
    function isValidElementType(type) {
        if (typeof type === 'string' || typeof type === 'function') return true;
        if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) return true;
        if (typeof type === 'object' && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) return true;
        }
        return false;
    }
    function memo(type, compare) {
        if (!isValidElementType(type)) error("memo: The first argument must be a component. Instead received: %s", type === null ? 'null' : typeof type);
        var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare
        };
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
            enumerable: false,
            configurable: true,
            get: function() {
                return ownName;
            },
            set: function(name) {
                ownName = name;
                if (!type.name && !type.displayName) type.displayName = name;
            }
        });
        return elementType;
    }
    function resolveDispatcher() {
        var dispatcher = ReactCurrentDispatcher.current;
        if (dispatcher === null) error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        return dispatcher;
    }
    function useContext(Context) {
        var dispatcher = resolveDispatcher();
        if (Context._context !== undefined) {
            var realContext = Context._context;
            if (realContext.Consumer === Context) error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
            else if (realContext.Provider === Context) error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
        }
        return dispatcher.useContext(Context);
    }
    function useState(initialState) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
    }
    function useTransition() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDeferredValue(value);
    }
    function useId() {
        var dispatcher = resolveDispatcher();
        return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var dispatcher = resolveDispatcher();
        return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
        if (disabledDepth === 0) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (disabledDepth === 0) {
            var props = {
                configurable: true,
                enumerable: true,
                writable: true
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        if (disabledDepth < 0) error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
        if (prefix === undefined) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
        }
        return '\n' + prefix + name;
    }
    var reentry = false;
    var componentFrameCache;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
    componentFrameCache = new PossiblyWeakMap();
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return '';
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) return frame;
        var control;
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = undefined;
        var previousDispatcher;
        previousDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = null;
        disableLogs();
        try {
            if (construct) {
                var Fake = function() {
                    throw Error();
                };
                Object.defineProperty(Fake.prototype, 'props', {
                    set: function() {
                        throw Error();
                    }
                });
                if (typeof Reflect === 'object' && Reflect.construct) {
                    try {
                        Reflect.construct(Fake, []);
                    } catch (x) {
                        control = x;
                    }
                    Reflect.construct(fn, [], Fake);
                } else {
                    try {
                        Fake.call();
                    } catch (x) {
                        control = x;
                    }
                    fn.call(Fake.prototype);
                }
            } else {
                try {
                    throw Error();
                } catch (x) {
                    control = x;
                }
                fn();
            }
        } catch (sample) {
            if (sample && control && typeof sample.stack === 'string') {
                var sampleLines = sample.stack.split('\n');
                var controlLines = control.stack.split('\n');
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c])c--;
                for(; s >= 1 && c >= 0; s--, c--)if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                            var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');
                            if (fn.displayName && _frame.includes('<anonymous>')) _frame = _frame.replace('<anonymous>', fn.displayName);
                            if (typeof fn === 'function') componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                    }while (s >= 1 && c >= 0)
                    break;
                }
            }
        } finally{
            reentry = false;
            ReactCurrentDispatcher$1.current = previousDispatcher;
            reenableLogs();
            Error.prepareStackTrace = previousPrepareStackTrace;
        }
        var name = fn ? fn.displayName || fn.name : '';
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
        if (typeof fn === 'function') componentFrameCache.set(fn, syntheticFrame);
        return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
        return describeNativeComponentFrame(fn, false);
    }
    function shouldConstruct(Component) {
        var prototype = Component.prototype;
        return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) return '';
        if (typeof type === 'function') return describeNativeComponentFrame(type, shouldConstruct(type));
        if (typeof type === 'string') return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame('Suspense');
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame('SuspenseList');
        }
        if (typeof type === 'object') switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
            case REACT_LAZY_TYPE:
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x) {}
        }
        return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
        var has = Function.call.bind(hasOwnProperty);
        for(var typeSpecName in typeSpecs)if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0;
            try {
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                    err.name = 'Invariant Violation';
                    throw err;
                }
                error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
                error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element);
                error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || 'React class', location, typeSpecName, typeof error$1);
                setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                loggedTypeFailures[error$1.message] = true;
                setCurrentlyValidatingElement(element);
                error('Failed %s type: %s', location, error$1.message);
                setCurrentlyValidatingElement(null);
            }
        }
    }
    function setCurrentlyValidatingElement$1(element) {
        if (element) {
            var owner = element._owner;
            var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
            setExtraStackFrame(stack);
        } else setExtraStackFrame(null);
    }
    var propTypesMisspellWarningShown;
    propTypesMisspellWarningShown = false;
    function getDeclarationErrorAddendum() {
        if (ReactCurrentOwner.current) {
            var name = getComponentNameFromType(ReactCurrentOwner.current.type);
            if (name) return '\n\nCheck the render method of `' + name + '`.';
        }
        return '';
    }
    function getSourceInfoErrorAddendum(source) {
        if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '');
            var lineNumber = source.lineNumber;
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
        if (elementProps !== null && elementProps !== undefined) return getSourceInfoErrorAddendum(elementProps.__source);
        return '';
    }
    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
        var info = getDeclarationErrorAddendum();
        if (!info) {
            var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
            if (parentName) info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
        return info;
    }
    function validateExplicitKey(element, parentType) {
        if (!element._store || element._store.validated || element.key != null) return;
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) return;
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner.current) childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
    }
    function validateChildKeys(node, parentType) {
        if (typeof node !== 'object') return;
        if (isArray(node)) for(var i = 0; i < node.length; i++){
            var child = node[i];
            if (isValidElement(child)) validateExplicitKey(child, parentType);
        }
        else if (isValidElement(node)) {
            if (node._store) node._store.validated = true;
        } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === 'function') {
                if (iteratorFn !== node.entries) {
                    var iterator = iteratorFn.call(node);
                    var step;
                    while(!(step = iterator.next()).done)if (isValidElement(step.value)) validateExplicitKey(step.value, parentType);
                }
            }
        }
    }
    function validatePropTypes(element) {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') return;
        var propTypes;
        if (typeof type === 'function') propTypes = type.propTypes;
        else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) propTypes = type.propTypes;
        else return;
        if (propTypes) {
            var name = getComponentNameFromType(type);
            checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
            propTypesMisspellWarningShown = true;
            var _name = getComponentNameFromType(type);
            error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
    }
    function validateFragmentProps(fragment) {
        var keys = Object.keys(fragment.props);
        for(var i = 0; i < keys.length; i++){
            var key = keys[i];
            if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
            }
        }
        if (fragment.ref !== null) {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid attribute `ref` supplied to `React.Fragment`.');
            setCurrentlyValidatingElement$1(null);
        }
    }
    function createElementWithValidation(type, props, children) {
        var validType = isValidElementType(type);
        if (!validType) {
            var info = '';
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) info += sourceInfo;
            else info += getDeclarationErrorAddendum();
            var typeString;
            if (type === null) typeString = 'null';
            else if (isArray(type)) typeString = 'array';
            else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
                info = ' Did you accidentally export a JSX literal instead of a component?';
            } else typeString = typeof type;
            error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
        }
        var element = createElement.apply(this, arguments);
        if (element == null) return element;
        if (validType) for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], type);
        if (type === REACT_FRAGMENT_TYPE) validateFragmentProps(element);
        else validatePropTypes(element);
        return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
        var validatedFactory = createElementWithValidation.bind(null, type);
        validatedFactory.type = type;
        if (!didWarnAboutDeprecatedCreateFactory) {
            didWarnAboutDeprecatedCreateFactory = true;
            warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
        }
        Object.defineProperty(validatedFactory, 'type', {
            enumerable: false,
            get: function() {
                warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, 'type', {
                    value: type
                });
                return type;
            }
        });
        return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
        var newElement = cloneElement.apply(this, arguments);
        for(var i = 2; i < arguments.length; i++)validateChildKeys(arguments[i], newElement.type);
        validatePropTypes(newElement);
        return newElement;
    }
    function startTransition(scope, options) {
        var prevTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition = {};
        var currentTransition = ReactCurrentBatchConfig.transition;
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
        try {
            scope();
        } finally{
            ReactCurrentBatchConfig.transition = prevTransition;
            if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                currentTransition._updatedFibers.clear();
            }
        }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
        if (enqueueTaskImpl === null) try {
            var requireString = ('require' + Math.random()).slice(0, 7);
            var nodeRequire = module && module[requireString];
            enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
        } catch (_err) {
            enqueueTaskImpl = function(callback) {
                if (didWarnAboutMessageChannel === false) {
                    didWarnAboutMessageChannel = true;
                    if (typeof MessageChannel === 'undefined') error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                }
                var channel = new MessageChannel();
                channel.port1.onmessage = callback;
                channel.port2.postMessage(undefined);
            };
        }
        return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) ReactCurrentActQueue.current = [];
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
            ReactCurrentActQueue.isBatchingLegacy = true;
            result = callback();
            if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                var queue = ReactCurrentActQueue.current;
                if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                }
            }
        } catch (error1) {
            popActScope(prevActScopeDepth);
            throw error1;
        } finally{
            ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && typeof result === 'object' && typeof result.then === 'function') {
            var thenableResult = result;
            var wasAwaited = false;
            var thenable = {
                then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue) {
                        popActScope(prevActScopeDepth);
                        if (actScopeDepth === 0) recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        else resolve(returnValue);
                    }, function(error) {
                        popActScope(prevActScopeDepth);
                        reject(error);
                    });
                }
            };
            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') Promise.resolve().then(function() {}).then(function() {
                if (!wasAwaited) {
                    didWarnNoAwaitAct = true;
                    error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                }
            });
            return thenable;
        } else {
            var returnValue = result;
            popActScope(prevActScopeDepth);
            if (actScopeDepth === 0) {
                var _queue = ReactCurrentActQueue.current;
                if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                }
                var _thenable = {
                    then: function(resolve, reject) {
                        if (ReactCurrentActQueue.current === null) {
                            ReactCurrentActQueue.current = [];
                            recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                        } else resolve(returnValue);
                    }
                };
                return _thenable;
            } else {
                var _thenable2 = {
                    then: function(resolve, reject) {
                        resolve(returnValue);
                    }
                };
                return _thenable2;
            }
        }
    }
    function popActScope(prevActScopeDepth) {
        if (prevActScopeDepth !== actScopeDepth - 1) error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
        actScopeDepth = prevActScopeDepth;
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) try {
            flushActQueue(queue);
            enqueueTask(function() {
                if (queue.length === 0) {
                    ReactCurrentActQueue.current = null;
                    resolve(returnValue);
                } else recursivelyFlushAsyncActWork(returnValue, resolve, reject);
            });
        } catch (error) {
            reject(error);
        }
        else resolve(returnValue);
    }
    var isFlushing = false;
    function flushActQueue(queue) {
        if (!isFlushing) {
            isFlushing = true;
            var i = 0;
            try {
                for(; i < queue.length; i++){
                    var callback = queue[i];
                    do callback = callback(true);
                    while (callback !== null)
                }
                queue.length = 0;
            } catch (error) {
                queue = queue.slice(i + 1);
                throw error;
            } finally{
                isFlushing = false;
            }
        }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();
},
"../../node_modules/react/index.js": function (module, exports, __webpack_require__) {
"use strict";
module.exports = __webpack_require__("../../node_modules/react/cjs/react.development.js");
},
"../../node_modules/react/jsx-runtime.js": function (module, exports, __webpack_require__) {
"use strict";
module.exports = __webpack_require__("../../node_modules/react/cjs/react-jsx-runtime.development.js");
},
"../../node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var MapShim = function() {
    if (typeof Map !== 'undefined') return Map;
    function getIndex(arr, key) {
        var result = -1;
        arr.some(function(entry, index) {
            if (entry[0] === key) {
                result = index;
                return true;
            }
            return false;
        });
        return result;
    }
    return function() {
        function class_1() {
            this.__entries__ = [];
        }
        Object.defineProperty(class_1.prototype, "size", {
            get: function() {
                return this.__entries__.length;
            },
            enumerable: true,
            configurable: true
        });
        class_1.prototype.get = function(key) {
            var index = getIndex(this.__entries__, key);
            var entry = this.__entries__[index];
            return entry && entry[1];
        };
        class_1.prototype.set = function(key, value) {
            var index = getIndex(this.__entries__, key);
            if (~index) this.__entries__[index][1] = value;
            else this.__entries__.push([
                key,
                value
            ]);
        };
        class_1.prototype.delete = function(key) {
            var entries = this.__entries__;
            var index = getIndex(entries, key);
            if (~index) entries.splice(index, 1);
        };
        class_1.prototype.has = function(key) {
            return !!~getIndex(this.__entries__, key);
        };
        class_1.prototype.clear = function() {
            this.__entries__.splice(0);
        };
        class_1.prototype.forEach = function(callback, ctx) {
            if (ctx === void 0) ctx = null;
            for(var _i = 0, _a = this.__entries__; _i < _a.length; _i++){
                var entry = _a[_i];
                callback.call(ctx, entry[1], entry[0]);
            }
        };
        return class_1;
    }();
}();
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;
var global$1 = function() {
    if (typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.Math === Math) return __webpack_require__.g;
    if (typeof self !== 'undefined' && self.Math === Math) return self;
    if (typeof window !== 'undefined' && window.Math === Math) return window;
    return Function('return this')();
}();
var requestAnimationFrame$1 = function() {
    if (typeof requestAnimationFrame === 'function') return requestAnimationFrame.bind(global$1);
    return function(callback) {
        return setTimeout(function() {
            return callback(Date.now());
        }, 1000 / 60);
    };
}();
var trailingTimeout = 2;
function throttle(callback, delay) {
    var leadingCall = false, trailingCall = false, lastCallTime = 0;
    function resolvePending() {
        if (leadingCall) {
            leadingCall = false;
            callback();
        }
        if (trailingCall) proxy();
    }
    function timeoutCallback() {
        requestAnimationFrame$1(resolvePending);
    }
    function proxy() {
        var timeStamp = Date.now();
        if (leadingCall) {
            if (timeStamp - lastCallTime < trailingTimeout) return;
            trailingCall = true;
        } else {
            leadingCall = true;
            trailingCall = false;
            setTimeout(timeoutCallback, delay);
        }
        lastCallTime = timeStamp;
    }
    return proxy;
}
var REFRESH_DELAY = 20;
var transitionKeys = [
    'top',
    'right',
    'bottom',
    'left',
    'width',
    'height',
    'size',
    'weight'
];
var mutationObserverSupported = typeof MutationObserver !== 'undefined';
var ResizeObserverController = function() {
    function ResizeObserverController() {
        this.connected_ = false;
        this.mutationEventsAdded_ = false;
        this.mutationsObserver_ = null;
        this.observers_ = [];
        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);
        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);
    }
    ResizeObserverController.prototype.addObserver = function(observer) {
        if (!~this.observers_.indexOf(observer)) this.observers_.push(observer);
        if (!this.connected_) this.connect_();
    };
    ResizeObserverController.prototype.removeObserver = function(observer) {
        var observers = this.observers_;
        var index = observers.indexOf(observer);
        if (~index) observers.splice(index, 1);
        if (!observers.length && this.connected_) this.disconnect_();
    };
    ResizeObserverController.prototype.refresh = function() {
        var changesDetected = this.updateObservers_();
        if (changesDetected) this.refresh();
    };
    ResizeObserverController.prototype.updateObservers_ = function() {
        var activeObservers = this.observers_.filter(function(observer) {
            return observer.gatherActive(), observer.hasActive();
        });
        activeObservers.forEach(function(observer) {
            return observer.broadcastActive();
        });
        return activeObservers.length > 0;
    };
    ResizeObserverController.prototype.connect_ = function() {
        if (!isBrowser || this.connected_) return;
        document.addEventListener('transitionend', this.onTransitionEnd_);
        window.addEventListener('resize', this.refresh);
        if (mutationObserverSupported) {
            this.mutationsObserver_ = new MutationObserver(this.refresh);
            this.mutationsObserver_.observe(document, {
                attributes: true,
                childList: true,
                characterData: true,
                subtree: true
            });
        } else {
            document.addEventListener('DOMSubtreeModified', this.refresh);
            this.mutationEventsAdded_ = true;
        }
        this.connected_ = true;
    };
    ResizeObserverController.prototype.disconnect_ = function() {
        if (!isBrowser || !this.connected_) return;
        document.removeEventListener('transitionend', this.onTransitionEnd_);
        window.removeEventListener('resize', this.refresh);
        if (this.mutationsObserver_) this.mutationsObserver_.disconnect();
        if (this.mutationEventsAdded_) document.removeEventListener('DOMSubtreeModified', this.refresh);
        this.mutationsObserver_ = null;
        this.mutationEventsAdded_ = false;
        this.connected_ = false;
    };
    ResizeObserverController.prototype.onTransitionEnd_ = function(_a) {
        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;
        var isReflowProperty = transitionKeys.some(function(key) {
            return !!~propertyName.indexOf(key);
        });
        if (isReflowProperty) this.refresh();
    };
    ResizeObserverController.getInstance = function() {
        if (!this.instance_) this.instance_ = new ResizeObserverController();
        return this.instance_;
    };
    ResizeObserverController.instance_ = null;
    return ResizeObserverController;
}();
var defineConfigurable = function(target, props) {
    for(var _i = 0, _a = Object.keys(props); _i < _a.length; _i++){
        var key = _a[_i];
        Object.defineProperty(target, key, {
            value: props[key],
            enumerable: false,
            writable: false,
            configurable: true
        });
    }
    return target;
};
var getWindowOf = function(target) {
    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;
    return ownerGlobal || global$1;
};
var emptyRect = createRectInit(0, 0, 0, 0);
function toFloat(value) {
    return parseFloat(value) || 0;
}
function getBordersSize(styles) {
    var positions = [];
    for(var _i = 1; _i < arguments.length; _i++)positions[_i - 1] = arguments[_i];
    return positions.reduce(function(size, position) {
        var value = styles['border-' + position + '-width'];
        return size + toFloat(value);
    }, 0);
}
function getPaddings(styles) {
    var positions = [
        'top',
        'right',
        'bottom',
        'left'
    ];
    var paddings = {};
    for(var _i = 0, positions_1 = positions; _i < positions_1.length; _i++){
        var position = positions_1[_i];
        var value = styles['padding-' + position];
        paddings[position] = toFloat(value);
    }
    return paddings;
}
function getSVGContentRect(target) {
    var bbox = target.getBBox();
    return createRectInit(0, 0, bbox.width, bbox.height);
}
function getHTMLElementContentRect(target) {
    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;
    if (!clientWidth && !clientHeight) return emptyRect;
    var styles = getWindowOf(target).getComputedStyle(target);
    var paddings = getPaddings(styles);
    var horizPad = paddings.left + paddings.right;
    var vertPad = paddings.top + paddings.bottom;
    var width = toFloat(styles.width), height = toFloat(styles.height);
    if (styles.boxSizing === 'border-box') {
        if (Math.round(width + horizPad) !== clientWidth) width -= getBordersSize(styles, 'left', 'right') + horizPad;
        if (Math.round(height + vertPad) !== clientHeight) height -= getBordersSize(styles, 'top', 'bottom') + vertPad;
    }
    if (!isDocumentElement(target)) {
        var vertScrollbar = Math.round(width + horizPad) - clientWidth;
        var horizScrollbar = Math.round(height + vertPad) - clientHeight;
        if (Math.abs(vertScrollbar) !== 1) width -= vertScrollbar;
        if (Math.abs(horizScrollbar) !== 1) height -= horizScrollbar;
    }
    return createRectInit(paddings.left, paddings.top, width, height);
}
var isSVGGraphicsElement = function() {
    if (typeof SVGGraphicsElement !== 'undefined') return function(target) {
        return target instanceof getWindowOf(target).SVGGraphicsElement;
    };
    return function(target) {
        return target instanceof getWindowOf(target).SVGElement && typeof target.getBBox === 'function';
    };
}();
function isDocumentElement(target) {
    return target === getWindowOf(target).document.documentElement;
}
function getContentRect(target) {
    if (!isBrowser) return emptyRect;
    if (isSVGGraphicsElement(target)) return getSVGContentRect(target);
    return getHTMLElementContentRect(target);
}
function createReadOnlyRect(_a) {
    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;
    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;
    var rect = Object.create(Constr.prototype);
    defineConfigurable(rect, {
        x: x,
        y: y,
        width: width,
        height: height,
        top: y,
        right: x + width,
        bottom: height + y,
        left: x
    });
    return rect;
}
function createRectInit(x, y, width, height) {
    return {
        x: x,
        y: y,
        width: width,
        height: height
    };
}
var ResizeObservation = function() {
    function ResizeObservation(target) {
        this.broadcastWidth = 0;
        this.broadcastHeight = 0;
        this.contentRect_ = createRectInit(0, 0, 0, 0);
        this.target = target;
    }
    ResizeObservation.prototype.isActive = function() {
        var rect = getContentRect(this.target);
        this.contentRect_ = rect;
        return rect.width !== this.broadcastWidth || rect.height !== this.broadcastHeight;
    };
    ResizeObservation.prototype.broadcastRect = function() {
        var rect = this.contentRect_;
        this.broadcastWidth = rect.width;
        this.broadcastHeight = rect.height;
        return rect;
    };
    return ResizeObservation;
}();
var ResizeObserverEntry = function() {
    function ResizeObserverEntry(target, rectInit) {
        var contentRect = createReadOnlyRect(rectInit);
        defineConfigurable(this, {
            target: target,
            contentRect: contentRect
        });
    }
    return ResizeObserverEntry;
}();
var ResizeObserverSPI = function() {
    function ResizeObserverSPI(callback, controller, callbackCtx) {
        this.activeObservations_ = [];
        this.observations_ = new MapShim();
        if (typeof callback !== 'function') throw new TypeError('The callback provided as parameter 1 is not a function.');
        this.callback_ = callback;
        this.controller_ = controller;
        this.callbackCtx_ = callbackCtx;
    }
    ResizeObserverSPI.prototype.observe = function(target) {
        if (!arguments.length) throw new TypeError('1 argument required, but only 0 present.');
        if (typeof Element === 'undefined' || !(Element instanceof Object)) return;
        if (!(target instanceof getWindowOf(target).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var observations = this.observations_;
        if (observations.has(target)) return;
        observations.set(target, new ResizeObservation(target));
        this.controller_.addObserver(this);
        this.controller_.refresh();
    };
    ResizeObserverSPI.prototype.unobserve = function(target) {
        if (!arguments.length) throw new TypeError('1 argument required, but only 0 present.');
        if (typeof Element === 'undefined' || !(Element instanceof Object)) return;
        if (!(target instanceof getWindowOf(target).Element)) throw new TypeError('parameter 1 is not of type "Element".');
        var observations = this.observations_;
        if (!observations.has(target)) return;
        observations.delete(target);
        if (!observations.size) this.controller_.removeObserver(this);
    };
    ResizeObserverSPI.prototype.disconnect = function() {
        this.clearActive();
        this.observations_.clear();
        this.controller_.removeObserver(this);
    };
    ResizeObserverSPI.prototype.gatherActive = function() {
        var _this = this;
        this.clearActive();
        this.observations_.forEach(function(observation) {
            if (observation.isActive()) _this.activeObservations_.push(observation);
        });
    };
    ResizeObserverSPI.prototype.broadcastActive = function() {
        if (!this.hasActive()) return;
        var ctx = this.callbackCtx_;
        var entries = this.activeObservations_.map(function(observation) {
            return new ResizeObserverEntry(observation.target, observation.broadcastRect());
        });
        this.callback_.call(ctx, entries, ctx);
        this.clearActive();
    };
    ResizeObserverSPI.prototype.clearActive = function() {
        this.activeObservations_.splice(0);
    };
    ResizeObserverSPI.prototype.hasActive = function() {
        return this.activeObservations_.length > 0;
    };
    return ResizeObserverSPI;
}();
var observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();
var ResizeObserver = function() {
    function ResizeObserver(callback) {
        if (!(this instanceof ResizeObserver)) throw new TypeError('Cannot call a class as a function.');
        if (!arguments.length) throw new TypeError('1 argument required, but only 0 present.');
        var controller = ResizeObserverController.getInstance();
        var observer = new ResizeObserverSPI(callback, controller, this);
        observers.set(this, observer);
    }
    return ResizeObserver;
}();
[
    'observe',
    'unobserve',
    'disconnect'
].forEach(function(method) {
    ResizeObserver.prototype[method] = function() {
        var _a;
        return (_a = observers.get(this))[method].apply(_a, arguments);
    };
});
var index = function() {
    if (typeof global$1.ResizeObserver !== 'undefined') return global$1.ResizeObserver;
    return ResizeObserver;
}();
var _default = index;
},
"../../node_modules/scheduler/cjs/scheduler.development.js": function (module, exports, __webpack_require__) {
"use strict";
(function() {
    'use strict';
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var enableSchedulerDebugging = false;
    var enableProfiling = false;
    var frameYieldMs = 5;
    function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        siftUp(heap, node, index);
    }
    function peek(heap) {
        return heap.length === 0 ? null : heap[0];
    }
    function pop(heap) {
        if (heap.length === 0) return null;
        var first = heap[0];
        var last = heap.pop();
        if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
        }
        return first;
    }
    function siftUp(heap, node, i) {
        var index = i;
        while(index > 0){
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
                heap[parentIndex] = node;
                heap[index] = parent;
                index = parentIndex;
            } else return;
        }
    }
    function siftDown(heap, node, i) {
        var index = i;
        var length = heap.length;
        var halfLength = length >>> 1;
        while(index < halfLength){
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
                if (rightIndex < length && compare(right, left) < 0) {
                    heap[index] = right;
                    heap[rightIndex] = node;
                    index = rightIndex;
                } else {
                    heap[index] = left;
                    heap[leftIndex] = node;
                    index = leftIndex;
                }
            } else if (rightIndex < length && compare(right, node) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
            } else return;
        }
    }
    function compare(a, b) {
        var diff = a.sortIndex - b.sortIndex;
        return diff !== 0 ? diff : a.id - b.id;
    }
    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5;
    function markTaskErrored(task, ms) {}
    var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';
    if (hasPerformanceNow) {
        var localPerformance = performance;
        exports.unstable_now = function() {
            return localPerformance.now();
        };
    } else {
        var localDate = Date;
        var initialTime = localDate.now();
        exports.unstable_now = function() {
            return localDate.now() - initialTime;
        };
    }
    var maxSigned31BitInt = 1073741823;
    var IMMEDIATE_PRIORITY_TIMEOUT = -1;
    var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000;
    var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
    var taskQueue = [];
    var timerQueue = [];
    var taskIdCounter = 1;
    var currentTask = null;
    var currentPriorityLevel = NormalPriority;
    var isPerformingWork = false;
    var isHostCallbackScheduled = false;
    var isHostTimeoutScheduled = false;
    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
    var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null;
    var isInputPending = typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
    function advanceTimers(currentTime) {
        var timer = peek(timerQueue);
        while(timer !== null){
            if (timer.callback === null) pop(timerQueue);
            else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
            } else return;
            timer = peek(timerQueue);
        }
    }
    function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            } else {
                var firstTimer = peek(timerQueue);
                if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
        }
    }
    function flushWork(hasTimeRemaining, initialTime) {
        isHostCallbackScheduled = false;
        if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
        }
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
            if (enableProfiling) try {
                return workLoop(hasTimeRemaining, initialTime);
            } catch (error) {
                if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                }
                throw error;
            }
            else return workLoop(hasTimeRemaining, initialTime);
        } finally{
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
        }
    }
    function workLoop(hasTimeRemaining, initialTime) {
        var currentTime = initialTime;
        advanceTimers(currentTime);
        currentTask = peek(taskQueue);
        while(currentTask !== null && !enableSchedulerDebugging){
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) break;
            var callback = currentTask.callback;
            if (typeof callback === 'function') {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === 'function') currentTask.callback = continuationCallback;
                else if (currentTask === peek(taskQueue)) pop(taskQueue);
                advanceTimers(currentTime);
            } else pop(taskQueue);
            currentTask = peek(taskQueue);
        }
        if (currentTask !== null) return true;
        else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            return false;
        }
    }
    function unstable_runWithPriority(priorityLevel, eventHandler) {
        switch(priorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
                break;
            default:
                priorityLevel = NormalPriority;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_next(eventHandler) {
        var priorityLevel;
        switch(currentPriorityLevel){
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
                priorityLevel = NormalPriority;
                break;
            default:
                priorityLevel = currentPriorityLevel;
                break;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
            return eventHandler();
        } finally{
            currentPriorityLevel = previousPriorityLevel;
        }
    }
    function unstable_wrapCallback(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
                return callback.apply(this, arguments);
            } finally{
                currentPriorityLevel = previousPriorityLevel;
            }
        };
    }
    function unstable_scheduleCallback(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        var startTime;
        if (typeof options === 'object' && options !== null) {
            var delay = options.delay;
            if (typeof delay === 'number' && delay > 0) startTime = currentTime + delay;
            else startTime = currentTime;
        } else startTime = currentTime;
        var timeout;
        switch(priorityLevel){
            case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
            case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
            case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
            case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
            case NormalPriority:
            default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
        }
        var expirationTime = startTime + timeout;
        var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1
        };
        if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
                if (isHostTimeoutScheduled) cancelHostTimeout();
                else isHostTimeoutScheduled = true;
                requestHostTimeout(handleTimeout, startTime - currentTime);
            }
        } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
            }
        }
        return newTask;
    }
    function unstable_pauseExecution() {}
    function unstable_continueExecution() {
        if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
        }
    }
    function unstable_getFirstCallbackNode() {
        return peek(taskQueue);
    }
    function unstable_cancelCallback(task) {
        task.callback = null;
    }
    function unstable_getCurrentPriorityLevel() {
        return currentPriorityLevel;
    }
    var isMessageLoopRunning = false;
    var scheduledHostCallback = null;
    var taskTimeoutID = -1;
    var frameInterval = frameYieldMs;
    var startTime = -1;
    function shouldYieldToHost() {
        var timeElapsed = exports.unstable_now() - startTime;
        if (timeElapsed < frameInterval) return false;
        return true;
    }
    function requestPaint() {}
    function forceFrameRate(fps) {
        if (fps < 0 || fps > 125) {
            console['error']("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
        }
        if (fps > 0) frameInterval = Math.floor(1000 / fps);
        else frameInterval = frameYieldMs;
    }
    var performWorkUntilDeadline = function() {
        if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally{
                if (hasMoreWork) schedulePerformWorkUntilDeadline();
                else {
                    isMessageLoopRunning = false;
                    scheduledHostCallback = null;
                }
            }
        } else isMessageLoopRunning = false;
    };
    var schedulePerformWorkUntilDeadline;
    if (typeof localSetImmediate === 'function') schedulePerformWorkUntilDeadline = function() {
        localSetImmediate(performWorkUntilDeadline);
    };
    else if (typeof MessageChannel !== 'undefined') {
        var channel = new MessageChannel();
        var port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
        };
    } else schedulePerformWorkUntilDeadline = function() {
        localSetTimeout(performWorkUntilDeadline, 0);
    };
    function requestHostCallback(callback) {
        scheduledHostCallback = callback;
        if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
        }
    }
    function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
        }, ms);
    }
    function cancelHostTimeout() {
        localClearTimeout(taskTimeoutID);
        taskTimeoutID = -1;
    }
    var unstable_requestPaint = requestPaint;
    var unstable_Profiling = null;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_Profiling = unstable_Profiling;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_forceFrameRate = forceFrameRate;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
    exports.unstable_next = unstable_next;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_requestPaint = unstable_requestPaint;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_shouldYield = shouldYieldToHost;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
})();
},
"../../node_modules/scheduler/index.js": function (module, exports, __webpack_require__) {
"use strict";
module.exports = __webpack_require__("../../node_modules/scheduler/cjs/scheduler.development.js");
},
"../../node_modules/scroll-into-view-if-needed/es/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/scroll-into-view-if-needed/node_modules/compute-scroll-into-view/es/index.js"));
function isOptionsObject(options) {
    return options === Object(options) && Object.keys(options).length !== 0;
}
function defaultBehavior(actions, behavior) {
    if (behavior === void 0) behavior = 'auto';
    var canSmoothScroll = 'scrollBehavior' in document.body.style;
    actions.forEach(function(_ref) {
        var el = _ref.el, top = _ref.top, left = _ref.left;
        if (el.scroll && canSmoothScroll) el.scroll({
            top: top,
            left: left,
            behavior: behavior
        });
        else {
            el.scrollTop = top;
            el.scrollLeft = left;
        }
    });
}
function getOptions(options) {
    if (options === false) return {
        block: 'end',
        inline: 'nearest'
    };
    if (isOptionsObject(options)) return options;
    return {
        block: 'start',
        inline: 'nearest'
    };
}
function scrollIntoView(target, options) {
    var targetIsDetached = !target.ownerDocument.documentElement.contains(target);
    if (isOptionsObject(options) && typeof options.behavior === 'function') return options.behavior(targetIsDetached ? [] : (0, _index.default)(target, options));
    if (targetIsDetached) return;
    var computeOptions = getOptions(options);
    return defaultBehavior((0, _index.default)(target, computeOptions), computeOptions.behavior);
}
var _default = scrollIntoView;
},
"../../node_modules/scroll-into-view-if-needed/node_modules/compute-scroll-into-view/es/index.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
function isElement(el) {
    return el != null && typeof el === 'object' && el.nodeType === 1;
}
function canOverflow(overflow, skipOverflowHiddenElements) {
    if (skipOverflowHiddenElements && overflow === 'hidden') return false;
    return overflow !== 'visible' && overflow !== 'clip';
}
function isScrollable(el, skipOverflowHiddenElements) {
    if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {
        var style = getComputedStyle(el, null);
        return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);
    }
    return false;
}
function alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {
    if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) return 0;
    if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;
    if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;
    return 0;
}
var _default = function(target, options) {
    var scrollMode = options.scrollMode, block = options.block, inline = options.inline, boundary = options.boundary, skipOverflowHiddenElements = options.skipOverflowHiddenElements;
    var checkBoundary = typeof boundary === 'function' ? boundary : function(node) {
        return node !== boundary;
    };
    if (!isElement(target)) throw new TypeError('Invalid target');
    var scrollingElement = document.scrollingElement || document.documentElement;
    var frames = [];
    var cursor = target;
    while(isElement(cursor) && checkBoundary(cursor)){
        cursor = cursor.parentNode;
        if (cursor === scrollingElement) {
            frames.push(cursor);
            break;
        }
        if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) continue;
        if (isScrollable(cursor, skipOverflowHiddenElements)) frames.push(cursor);
    }
    var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;
    var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;
    var viewportX = window.scrollX || pageXOffset;
    var viewportY = window.scrollY || pageYOffset;
    var _target$getBoundingCl = target.getBoundingClientRect(), targetHeight = _target$getBoundingCl.height, targetWidth = _target$getBoundingCl.width, targetTop = _target$getBoundingCl.top, targetRight = _target$getBoundingCl.right, targetBottom = _target$getBoundingCl.bottom, targetLeft = _target$getBoundingCl.left;
    var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;
    var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;
    var computations = [];
    for(var index = 0; index < frames.length; index++){
        var frame = frames[index];
        var _frame$getBoundingCli = frame.getBoundingClientRect(), _height = _frame$getBoundingCli.height, _width = _frame$getBoundingCli.width, _top = _frame$getBoundingCli.top, right = _frame$getBoundingCli.right, bottom = _frame$getBoundingCli.bottom, _left = _frame$getBoundingCli.left;
        if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) return computations;
        var frameStyle = getComputedStyle(frame);
        var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);
        var borderTop = parseInt(frameStyle.borderTopWidth, 10);
        var borderRight = parseInt(frameStyle.borderRightWidth, 10);
        var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);
        var blockScroll = 0;
        var inlineScroll = 0;
        var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;
        var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;
        if (scrollingElement === frame) {
            if (block === 'start') blockScroll = targetBlock;
            else if (block === 'end') blockScroll = targetBlock - viewportHeight;
            else if (block === 'nearest') blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);
            else blockScroll = targetBlock - viewportHeight / 2;
            if (inline === 'start') inlineScroll = targetInline;
            else if (inline === 'center') inlineScroll = targetInline - viewportWidth / 2;
            else if (inline === 'end') inlineScroll = targetInline - viewportWidth;
            else inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);
            blockScroll = Math.max(0, blockScroll + viewportY);
            inlineScroll = Math.max(0, inlineScroll + viewportX);
        } else {
            if (block === 'start') blockScroll = targetBlock - _top - borderTop;
            else if (block === 'end') blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;
            else if (block === 'nearest') blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);
            else blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;
            if (inline === 'start') inlineScroll = targetInline - _left - borderLeft;
            else if (inline === 'center') inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;
            else if (inline === 'end') inlineScroll = targetInline - right + borderRight + scrollbarWidth;
            else inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);
            var scrollLeft = frame.scrollLeft, scrollTop = frame.scrollTop;
            blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));
            inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));
            targetBlock += scrollTop - blockScroll;
            targetInline += scrollLeft - inlineScroll;
        }
        computations.push({
            el: frame,
            top: blockScroll,
            left: inlineScroll
        });
    }
    return computations;
};
},
"../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _assertThisInitialized;
    }
});
function _assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
},
"../../node_modules/@babel/runtime/helpers/esm/defineProperty.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _defineProperty;
    }
});
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
},
"../../node_modules/@babel/runtime/helpers/esm/extends.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _extends;
    }
});
function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return _extends.apply(this, arguments);
}
},
"../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _inheritsLoose;
    }
});
var _setPrototypeOf = __webpack_require__.ir(__webpack_require__("../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"));
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    (0, _setPrototypeOf.default)(subClass, superClass);
}
},
"../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _objectWithoutPropertiesLoose;
    }
});
function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
},
"../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _setPrototypeOf;
    }
});
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
},
"./components/mime-component/index.jsx": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "MimeComponent", {
    enumerable: true,
    get: function() {
        return MimeComponent;
    }
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/Breadcrumb/style/index.js");
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Breadcrumb/index.js"));
var _jsxruntime = __webpack_require__("../../node_modules/react/jsx-runtime.js");
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
function MimeComponent() {
    return (0, _jsxruntime.jsxs)("div", {
        children: [
            (0, _jsxruntime.jsx)("p", {
                children: "mime component"
            }),
            (0, _jsxruntime.jsxs)(_index.default, {
                children: [
                    (0, _jsxruntime.jsx)(_index.default.Item, {
                        children: "Home"
                    }),
                    (0, _jsxruntime.jsx)(_index.default.Item, {
                        children: (0, _jsxruntime.jsx)("a", {
                            href: "#",
                            children: "Channel"
                        })
                    }),
                    (0, _jsxruntime.jsx)(_index.default.Item, {
                        children: "News"
                    })
                ]
            })
        ]
    });
}
},
"./src/App.jsx": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return _default;
    }
});
__webpack_require__("../../node_modules/@arco-design/web-react/es/Empty/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Rate/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Switch/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Tag/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/style/index.js");
__webpack_require__("../../node_modules/@arco-design/web-react/es/Space/style/index.js");
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Empty/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Rate/index.js"));
var _index2 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Switch/index.js"));
var _index3 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Slider/index.js"));
var _index4 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Tag/index.js"));
var _index5 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Input/index.js"));
var _index6 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Avatar/index.js"));
var _index7 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/DatePicker/index.js"));
var _index8 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Button/index.js"));
var _index9 = __webpack_require__.ir(__webpack_require__("../../node_modules/@arco-design/web-react/es/Space/index.js"));
var _jsxruntime = __webpack_require__("../../node_modules/react/jsx-runtime.js");
var _index10 = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index11 = __webpack_require__("../component-a/lib/index.js");
var _indexjsx = __webpack_require__("./components/mime-component/index.jsx");
function App() {
    return (0, _jsxruntime.jsx)("div", {
        style: {
            padding: 20
        },
        children: (0, _jsxruntime.jsxs)(_index9.default, {
            direction: "vertical",
            children: [
                (0, _jsxruntime.jsx)(_index8.default, {
                    type: "primary",
                    children: "Button"
                }),
                (0, _jsxruntime.jsx)(_index7.default, {}),
                (0, _jsxruntime.jsx)(_index6.default, {
                    children: "Arco"
                }),
                (0, _jsxruntime.jsx)(_index5.default, {}),
                (0, _jsxruntime.jsx)(_index4.default, {
                    children: "Tag"
                }),
                (0, _jsxruntime.jsx)(_index3.default, {}),
                (0, _jsxruntime.jsx)(_index2.default, {}),
                (0, _jsxruntime.jsx)(_index1.default, {}),
                (0, _jsxruntime.jsx)(_index.default, {}),
                (0, _jsxruntime.jsx)(_index11.ComponentA, {}),
                (0, _jsxruntime.jsx)(_indexjsx.MimeComponent, {})
            ]
        })
    });
}
var _default = App;
},
"./src/main.jsx": function (module, exports, __webpack_require__) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxruntime = __webpack_require__("../../node_modules/react/jsx-runtime.js");
var _index = __webpack_require__.ir(__webpack_require__("../../node_modules/react/index.js"));
var _index1 = __webpack_require__.ir(__webpack_require__("../../node_modules/react-dom/index.js"));
var _Appjsx = __webpack_require__.ir(__webpack_require__("./src/App.jsx"));
console.log(123123);
_index1.default.render((0, _jsxruntime.jsx)(_Appjsx.default, {}), document.getElementById('root'));
},

}
// The module cache
 var __webpack_module_cache__ = {};
function __webpack_require__(moduleId) {
// Check if module is in cache
        var cachedModule = __webpack_module_cache__[moduleId];
        if (cachedModule !== undefined) {
      return cachedModule.exports;
      }
      // Create a new module (and put it into the cache)
      var module = (__webpack_module_cache__[moduleId] = {
       exports: {} 
      });
      // Execute the module function
      __webpack_modules__[moduleId](module, module.exports, __webpack_require__);
// Return the exports of the module
 return module.exports;

}
// ir
(function() {
(function () {
	function _getRequireCache(nodeInterop) {
		if (typeof WeakMap !== "function") return null;

		var cacheBabelInterop = new WeakMap();
		var cacheNodeInterop = new WeakMap();
		return (_getRequireCache = function (nodeInterop) {
			return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
		})(nodeInterop);
	}

	__webpack_require__.ir = function (obj, nodeInterop) {
		if (!nodeInterop && obj && obj.__esModule) {
			return obj;
		}

		if (
			obj === null ||
			(typeof obj !== "object" && typeof obj !== "function")
		) {
			return { default: obj };
		}

		var cache = _getRequireCache(nodeInterop);
		if (cache && cache.has(obj)) {
			return cache.get(obj);
		}

		var newObj = {};
		var hasPropertyDescriptor =
			Object.defineProperty && Object.getOwnPropertyDescriptor;
		for (var key in obj) {
			if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
				var desc = hasPropertyDescriptor
					? Object.getOwnPropertyDescriptor(obj, key)
					: null;
				if (desc && (desc.get || desc.set)) {
					Object.defineProperty(newObj, key, desc);
				} else {
					newObj[key] = obj[key];
				}
			}
		}
		newObj.default = obj;
		if (cache) {
			cache.set(obj, newObj);
		}
		return newObj;
	};
})();

})();
// es
(function() {
(function () {
	__webpack_require__.es = function (from, to) {
		Object.keys(from).forEach(function (k) {
			if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k))
				Object.defineProperty(to, k, {
					enumerable: true,
					get: function () {
						return from[k];
					}
				});
		});
		return from;
	};
})();

})();
// webpack/runtime/global
(function() {
__webpack_require__.g = (function () {
	if (typeof globalThis === "object") return globalThis;
	try {
		return this || new Function("return this")();
	} catch (e) {
		if (typeof window === "object") return window;
	}
})();

})();
var __webpack_exports__ = __webpack_require__('./src/main.jsx');

})();

//# sourceMappingURL=main.js.map